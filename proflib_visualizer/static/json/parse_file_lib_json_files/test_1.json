[
    {
        "children": [
            {
                "children": [], 
                "classes": [], 
                "comments": [], 
                "decorators": [], 
                "docstring": null, 
                "functions": [], 
                "imports": [], 
                "indent": 0, 
                "is_class": true, 
                "is_function": false, 
                "line_index_end": 26, 
                "line_index_start": 23, 
                "lines": [
                    "class CurrentViewAlreadyExistsError(Exception):\n", 
                    "    pass\n", 
                    "\n", 
                    "\n"
                ], 
                "name": "CurrentViewAlreadyExistsError", 
                "obj_type": "class", 
                "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                "returns": [], 
                "variables": []
            }, 
            {
                "children": [], 
                "classes": [], 
                "comments": [], 
                "decorators": [], 
                "docstring": null, 
                "functions": [], 
                "imports": [], 
                "indent": 0, 
                "is_class": true, 
                "is_function": false, 
                "line_index_end": 30, 
                "line_index_start": 27, 
                "lines": [
                    "class DefaultViewAlreadyExistsError(Exception):\n", 
                    "    pass\n", 
                    "\n", 
                    "\n"
                ], 
                "name": "DefaultViewAlreadyExistsError", 
                "obj_type": "class", 
                "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                "returns": [], 
                "variables": []
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 158, 
                        "line_index_start": 120, 
                        "lines": [
                            "    def __init__(self, request, survey_id):\n", 
                            "        self.request = request\n", 
                            "        self.id = str(survey_id)\n", 
                            "\n", 
                            "        # Holds the survey's dictionary structure\n", 
                            "        self._structure = {}\n", 
                            "\n", 
                            "        self._user_list = []\n", 
                            "        self._user_map = {}\n", 
                            "\n", 
                            "        self._views_list = []\n", 
                            "        self._views_map = {}\n", 
                            "\n", 
                            "        self._export_views_list = []\n", 
                            "        self._export_views_map = {}\n", 
                            "\n", 
                            "        self._page_list = []\n", 
                            "        self._page_map = {}\n", 
                            "        self._page_map_by_index = {}\n", 
                            "\n", 
                            "        self._question_list = []\n", 
                            "        self._question_map = {}\n", 
                            "\n", 
                            "        self._answer_map = {}\n", 
                            "\n", 
                            "        self._export_job_list = []\n", 
                            "        self._export_job_map = {}\n", 
                            "\n", 
                            "        self._collector_list = []\n", 
                            "        self._has_email_collector = False\n", 
                            "        self._has_collector = False\n", 
                            "        self._has_open_collector = False\n", 
                            "        self._has_unconfigured_collector = False\n", 
                            "        self._has_all_closed_collectors = False\n", 
                            "        self._has_configured_audience = False\n", 
                            "\n", 
                            "        self._question_logic = None\n", 
                            "        self._page_logic = None\n", 
                            "\n"
                        ], 
                        "name": "__init__", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22caa10>, 'line_index_start': 121, 'value': 'request', 'line_index_end': 121, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cab10>, 'line_index_start': 122, 'line_index_end': 124, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cac90>, 'line_index_start': 125, 'line_index_end': 126, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cad90>, 'line_index_start': 127, 'line_index_end': 127, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cae90>, 'line_index_start': 128, 'line_index_end': 129, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22caf90>, 'line_index_start': 130, 'line_index_end': 130, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb0d0>, 'line_index_start': 131, 'line_index_end': 132, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb1d0>, 'line_index_start': 133, 'line_index_end': 133, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb2d0>, 'line_index_start': 134, 'line_index_end': 135, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb3d0>, 'line_index_start': 136, 'line_index_end': 136, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb4d0>, 'line_index_start': 137, 'line_index_end': 137, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb5d0>, 'line_index_start': 138, 'line_index_end': 139, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb6d0>, 'line_index_start': 140, 'line_index_end': 140, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb7d0>, 'line_index_start': 141, 'line_index_end': 142, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb8d0>, 'line_index_start': 143, 'line_index_end': 144, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb9d0>, 'line_index_start': 145, 'line_index_end': 145, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbad0>, 'line_index_start': 146, 'line_index_end': 147, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbbd0>, 'line_index_start': 148, 'line_index_end': 148, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbcd0>, 'line_index_start': 149, 'value': 'False', 'line_index_end': 149, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbdd0>, 'line_index_start': 150, 'value': 'False', 'line_index_end': 150, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbed0>, 'line_index_start': 151, 'value': 'False', 'line_index_end': 151, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbfd0>, 'line_index_start': 152, 'value': 'False', 'line_index_end': 152, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc110>, 'line_index_start': 153, 'value': 'False', 'line_index_end': 153, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc210>, 'line_index_start': 154, 'value': 'False', 'line_index_end': 155, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc310>, 'line_index_start': 156, 'value': 'None', 'line_index_end': 156, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc410>, 'line_index_start': 157, 'value': 'None', 'line_index_end': 158, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 165, 
                        "line_index_start": 159, 
                        "lines": [
                            "    def __repr__(self):\n", 
                            "        return \"<%(class)s=%(id)s at 0x%(mem)x>\" % {\n", 
                            "            \"class\": self.__class__.__name__,\n", 
                            "            \"id\": self.id,\n", 
                            "            \"mem\": id(self)\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "__repr__", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 160, 'ast_node': <_ast.Return object at 0x22cc5d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371f50>, 'obj_type': 'return', 'line_index_end': 165}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 180, 
                        "line_index_start": 166, 
                        "lines": [
                            "    def _load_survey(self, survey_data):\n", 
                            "        self._date_created = survey_data['date_created']\n", 
                            "        self._date_modified = survey_data['date_modified']\n", 
                            "        self._date_deleted = survey_data['date_deleted']\n", 
                            "        self._title = survey_data['title']['text']\n", 
                            "        self._nickname = survey_data.get('nickname')\n", 
                            "        self._language_id = survey_data['language_id']\n", 
                            "        self.version = survey_data['version']\n", 
                            "        self.num_responses = survey_data['num_responses']\n", 
                            "        self.question_count = survey_data['question_count']\n", 
                            "        self.has_panel_page = survey_data.get('has_panel_page', False)\n", 
                            "        self._quotas = survey_data.get('quota')\n", 
                            "        self.has_page_randomization = survey_data['page_randomization']['enabled']\n", 
                            "        self._answer_map = {}\n", 
                            "    \n"
                        ], 
                        "name": "_load_survey", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cca90>, 'line_index_start': 167, 'line_index_end': 167, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ccc50>, 'line_index_start': 168, 'line_index_end': 168, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cce10>, 'line_index_start': 169, 'line_index_end': 169, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ccfd0>, 'line_index_start': 170, 'line_index_end': 170, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce290>, 'line_index_start': 171, 'line_index_end': 171, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce450>, 'line_index_start': 172, 'line_index_end': 172, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce610>, 'line_index_start': 173, 'line_index_end': 173, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce7d0>, 'line_index_start': 174, 'line_index_end': 174, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce990>, 'line_index_start': 175, 'line_index_end': 175, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ceb50>, 'line_index_start': 176, 'line_index_end': 176, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ced50>, 'line_index_start': 177, 'line_index_end': 177, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cef10>, 'line_index_start': 178, 'line_index_end': 178, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x254e1d0>, 'line_index_start': 179, 'line_index_end': 180, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 207, 
                        "line_index_start": 181, 
                        "lines": [
                            "    def _set_benchmarkable_flags(self, survey_data):\n", 
                            "        if self.owner.has_benchmarking_feature():\n", 
                            "            # get benchmarkable data. we'll do this per page to minimize the bmsvc calls\n", 
                            "            for page in survey_data['pages']:\n", 
                            "                # get a dict of logical id by question id\n", 
                            "                #   we'll use this dict to update the page data\n", 
                            "                # get the list of logical ids\n", 
                            "                #   we'll use this list to get the benchmarkable info\n", 
                            "                qb_questions = {}\n", 
                            "                logical_ids = []\n", 
                            "                for question in page['questions']:\n", 
                            "                    if question['question_bank']['is_banked']:\n", 
                            "                        qb_questions[question['question_id']] = question['question_bank']['logical_bank_id']\n", 
                            "                        logical_ids.append(qb_questions[question['question_id']])\n", 
                            "                benchmarkable_ids = self.request.bmsvc.is_benchmarkable(logical_ids)\n", 
                            "                # now update the questions\n", 
                            "                for question in page['questions']:\n", 
                            "                    question['is_benchmarkable'] = True if question['question_id'] in qb_questions and\\\n", 
                            "                                                           qb_questions[question['question_id']] in benchmarkable_ids\\\n", 
                            "                                                        else False\n", 
                            "        else:\n", 
                            "            # set all questions as not benchmarkable\n", 
                            "            for page in survey_data['pages']:\n", 
                            "                for question in page['questions']:\n", 
                            "                    question['is_benchmarkable'] = False\n", 
                            "\n", 
                            "    #@prof(depth=1, include_variables=['survey_data'])\n"
                        ], 
                        "name": "_set_benchmarkable_flags", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 230, 
                        "line_index_start": 208, 
                        "lines": [
                            "    def _populate_pages(self):\n", 
                            "        if self._populated_pages:\n", 
                            "            return\n", 
                            "\n", 
                            "        # FIXME: Maybe create Option objects as well?\n", 
                            "        # only include panel if there has been a configured audience\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            load_pages=True,\n", 
                            "            include_panel=self.has_configured_audience\n", 
                            "        )\n", 
                            "        \n", 
                            "        # if the user has benchmarking available, we will set the benchmarking flag for each question as appropriate\n", 
                            "        self._set_benchmarkable_flags(survey_data)\n", 
                            "        \n", 
                            "        if not self._populated_survey:\n", 
                            "            self._populated_survey = True\n", 
                            "            self._load_survey(survey_data)\n", 
                            "\n", 
                            "        self._populated_pages = True\n", 
                            "        self._load_pages(survey_data['pages'])\n", 
                            "\n"
                        ], 
                        "name": "_populate_pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2551250>, 'target': 'survey_data', 'line_index_start': 214, 'line_index_end': 221, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23733d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2551b10>, 'line_index_start': 228, 'value': 'True', 'line_index_end': 228, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23733d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 251, 
                        "line_index_start": 231, 
                        "lines": [
                            "    def _populate_survey(self):\n", 
                            "        if self._populated_survey:\n", 
                            "            return\n", 
                            "\n", 
                            "        # FIXME: Maybe create Option objects as well?\n", 
                            "        # only include panel if there has abeen a configured audience\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            load_pages=False,\n", 
                            "            include_panel=self.has_configured_audience\n", 
                            "        )\n", 
                            "\n", 
                            "        if 'quota' in survey_data:\n", 
                            "            survey_data['quota'] = self.request.ansvc.quota_list(\n", 
                            "                survey_data['survey_id']\n", 
                            "            )['quota']\n", 
                            "\n", 
                            "        self._populated_survey = True\n", 
                            "        self._load_survey(survey_data)\n", 
                            "\n"
                        ], 
                        "name": "_populate_survey", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2551fd0>, 'target': 'survey_data', 'line_index_start': 237, 'line_index_end': 243, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373490>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2552990>, 'line_index_start': 249, 'value': 'True', 'line_index_end': 249, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373490>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2552e50>, 'name': 'property', 'line_index_start': 252, 'line_index_end': 253, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373550>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 257, 
                        "line_index_start": 252, 
                        "lines": [
                            "    @property\n", 
                            "    def title(self):\n", 
                            "        self._populate_survey()\n", 
                            "        return self._title\n", 
                            "\n", 
                            "    #dates appear to be stored in seconds\n"
                        ], 
                        "name": "title", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 255, 'ast_node': <_ast.Return object at 0x2552d90>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373550>, 'obj_type': 'return', 'line_index_end': 257}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2554290>, 'name': 'property', 'line_index_start': 258, 'line_index_end': 259, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373610>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 263, 
                        "line_index_start": 258, 
                        "lines": [
                            "    @property\n", 
                            "    def date_deleted(self):\n", 
                            "        self._populate_survey()\n", 
                            "        if self._date_deleted:\n", 
                            "            return self._date_deleted * 1000\n", 
                            "\n"
                        ], 
                        "name": "date_deleted", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25545d0>, 'name': 'property', 'line_index_start': 264, 'line_index_end': 265, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373690>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 268, 
                        "line_index_start": 264, 
                        "lines": [
                            "    @property\n", 
                            "    def date_created(self):\n", 
                            "        self._populate_survey()\n", 
                            "        return self._date_created * 1000\n", 
                            "\n"
                        ], 
                        "name": "date_created", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 267, 'ast_node': <_ast.Return object at 0x2554490>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373690>, 'obj_type': 'return', 'line_index_end': 268}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25549d0>, 'name': 'property', 'line_index_start': 269, 'line_index_end': 270, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373750>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 274, 
                        "line_index_start": 269, 
                        "lines": [
                            "    @property\n", 
                            "    def date_modified(self):\n", 
                            "        self._populate_survey()\n", 
                            "        if self._date_modified:\n", 
                            "            return self._date_modified * 1000\n", 
                            "\n"
                        ], 
                        "name": "date_modified", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2554c90>, 'name': 'property', 'line_index_start': 275, 'line_index_end': 276, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23737d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 279, 
                        "line_index_start": 275, 
                        "lines": [
                            "    @property\n", 
                            "    def quotas(self):\n", 
                            "        self._populate_survey()\n", 
                            "        return self._quotas\n", 
                            "\n"
                        ], 
                        "name": "quotas", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 278, 'ast_node': <_ast.Return object at 0x2554bd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23737d0>, 'obj_type': 'return', 'line_index_end': 279}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2556110>, 'name': 'property', 'line_index_start': 280, 'line_index_end': 281, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373890>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 287, 
                        "line_index_start": 280, 
                        "lines": [
                            "    @property\n", 
                            "    def nickname(self):\n", 
                            "        self._populate_survey()\n", 
                            "        if self._nickname:\n", 
                            "            return self._nickname\n", 
                            "\n", 
                            "        return self._title\n", 
                            "\n"
                        ], 
                        "name": "nickname", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 286, 'ast_node': <_ast.Return object at 0x2556050>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373890>, 'obj_type': 'return', 'line_index_end': 287}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2556610>, 'name': 'property', 'line_index_start': 288, 'line_index_end': 289, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373950>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 295, 
                        "line_index_start": 288, 
                        "lines": [
                            "    @property\n", 
                            "    def mangled_id(self):\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
                            "            )\n", 
                            "        return encrypt_mangled(\"SurveyID=%s&\" % self.id)\n", 
                            "\n"
                        ], 
                        "name": "mangled_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 294, 'ast_node': <_ast.Return object at 0x2556450>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373950>, 'obj_type': 'return', 'line_index_end': 295}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2556f10>, 'name': 'property', 'line_index_start': 296, 'line_index_end': 297, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 312, 
                        "line_index_start": 296, 
                        "lines": [
                            "    @property\n", 
                            "    def preview_link(self):\n", 
                            "        query_string = {\n", 
                            "            's': self.id,\n", 
                            "            'mode': 3\n", 
                            "        }\n", 
                            "        query_string = urlencode(query_string)\n", 
                            "        query_string = urlencode({\n", 
                            "            'sm': encrypt_mangled(query_string),\n", 
                            "            'PREVIEW_MODE': 'DO_NOT_USE_THIS_LINK_FOR_COLLECTION',\n", 
                            "        })\n", 
                            "\n", 
                            "        return \"%(path)s?%(qs)s\" % {\n", 
                            "            \"path\": '/s.aspx',\n", 
                            "            \"qs\": query_string\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "preview_link", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 308, 'ast_node': <_ast.Return object at 0x2556d10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'obj_type': 'return', 'line_index_end': 312}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2556710>, 'target': 'query_string', 'line_index_start': 298, 'line_index_end': 301, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2556910>, 'target': 'query_string', 'line_index_start': 302, 'line_index_end': 302, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2556a50>, 'target': 'query_string', 'line_index_start': 303, 'line_index_end': 307, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2558310>, 'name': 'property', 'line_index_start': 313, 'line_index_end': 314, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373b90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 320, 
                        "line_index_start": 313, 
                        "lines": [
                            "    @property\n", 
                            "    def has_question_randomization(self):\n", 
                            "        for page in self.pages:\n", 
                            "            if page.has_question_randomization:\n", 
                            "                return True\n", 
                            "\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_question_randomization", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2558290>, 'line_index_start': 319, 'value': 'False', 'line_index_end': 320, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373b90>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25586d0>, 'name': 'property', 'line_index_start': 321, 'line_index_end': 322, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373c50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 327, 
                        "line_index_start": 321, 
                        "lines": [
                            "    @property\n", 
                            "    def has_random_assignment(self):\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                return True\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_random_assignment", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2558650>, 'line_index_start': 326, 'value': 'False', 'line_index_end': 327, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373c50>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 363, 
                        "line_index_start": 328, 
                        "lines": [
                            "    def _populate_collectors(self):\n", 
                            "        if self._populated_collectors:\n", 
                            "            return\n", 
                            "\n", 
                            "        collector_list = self.request.collectorsvc.get_collector_list(\n", 
                            "            int(self.owner.id),\n", 
                            "            int(self.id)\n", 
                            "        )\n", 
                            "\n", 
                            "        self._has_all_closed_collectors = True\n", 
                            "        for collector_data in collector_list:\n", 
                            "            collector = Collector(self.request)\n", 
                            "            collector.load(collector_data)\n", 
                            "            if collector.is_email:\n", 
                            "                self._has_email_collector = True\n", 
                            "\n", 
                            "            if collector.is_open or collector.is_clearing_responses:\n", 
                            "                self._has_open_collector = True\n", 
                            "\n", 
                            "            if collector.is_new:\n", 
                            "                self._has_unconfigured_collector = True\n", 
                            "            elif collector.is_audience:\n", 
                            "                self._has_configured_audience = True\n", 
                            "\n", 
                            "            if not (collector.is_closed or collector.is_archived):\n", 
                            "                self._has_all_closed_collectors = False\n", 
                            "\n", 
                            "            self._collector_list.append(collector)\n", 
                            "\n", 
                            "        if self._collector_list:\n", 
                            "            self._has_collector = True\n", 
                            "        else:\n", 
                            "            self._has_all_closed_collectors = False\n", 
                            "\n", 
                            "        self._populated_collectors = True\n", 
                            "\n"
                        ], 
                        "name": "_populate_collectors", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25588d0>, 'target': 'collector_list', 'line_index_start': 332, 'line_index_end': 336, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2558cd0>, 'line_index_start': 337, 'value': 'True', 'line_index_end': 337, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2569090>, 'line_index_start': 362, 'value': 'True', 'line_index_end': 363, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373d10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569410>, 'name': 'property', 'line_index_start': 364, 'line_index_end': 365, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373e10>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 368, 
                        "line_index_start": 364, 
                        "lines": [
                            "    @property\n", 
                            "    def has_email_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_email_collector\n", 
                            "\n"
                        ], 
                        "name": "has_email_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 367, 'ast_node': <_ast.Return object at 0x2569350>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373e10>, 'obj_type': 'return', 'line_index_end': 368}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25696d0>, 'name': 'property', 'line_index_start': 369, 'line_index_end': 370, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373ed0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 373, 
                        "line_index_start": 369, 
                        "lines": [
                            "    @property\n", 
                            "    def has_open_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_open_collector\n", 
                            "\n"
                        ], 
                        "name": "has_open_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 372, 'ast_node': <_ast.Return object at 0x2569610>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373ed0>, 'obj_type': 'return', 'line_index_end': 373}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569990>, 'name': 'property', 'line_index_start': 374, 'line_index_end': 375, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373f90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 378, 
                        "line_index_start": 374, 
                        "lines": [
                            "    @property\n", 
                            "    def has_all_closed_collectors(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_all_closed_collectors\n", 
                            "\n"
                        ], 
                        "name": "has_all_closed_collectors", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 377, 'ast_node': <_ast.Return object at 0x25698d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373f90>, 'obj_type': 'return', 'line_index_end': 378}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569c50>, 'name': 'property', 'line_index_start': 379, 'line_index_end': 380, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379090>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 383, 
                        "line_index_start": 379, 
                        "lines": [
                            "    @property\n", 
                            "    def has_unconfigured_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_unconfigured_collector\n", 
                            "\n"
                        ], 
                        "name": "has_unconfigured_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 382, 'ast_node': <_ast.Return object at 0x2569b90>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379090>, 'obj_type': 'return', 'line_index_end': 383}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569f10>, 'name': 'property', 'line_index_start': 384, 'line_index_end': 385, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379150>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 388, 
                        "line_index_start": 384, 
                        "lines": [
                            "    @property\n", 
                            "    def has_configured_audience(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_configured_audience\n", 
                            "\n"
                        ], 
                        "name": "has_configured_audience", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 387, 'ast_node': <_ast.Return object at 0x2569e50>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379150>, 'obj_type': 'return', 'line_index_end': 388}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256a210>, 'name': 'property', 'line_index_start': 389, 'line_index_end': 390, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379210>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 393, 
                        "line_index_start": 389, 
                        "lines": [
                            "    @property\n", 
                            "    def has_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_collector\n", 
                            "\n"
                        ], 
                        "name": "has_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 392, 'ast_node': <_ast.Return object at 0x256a150>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379210>, 'obj_type': 'return', 'line_index_end': 393}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256a4d0>, 'name': 'property', 'line_index_start': 394, 'line_index_end': 395, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23792d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 398, 
                        "line_index_start": 394, 
                        "lines": [
                            "    @property\n", 
                            "    def collectors(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._collector_list\n", 
                            "\n"
                        ], 
                        "name": "collectors", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 397, 'ast_node': <_ast.Return object at 0x256a410>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23792d0>, 'obj_type': 'return', 'line_index_end': 398}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Get the owners (user IDs) for this survey.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 419, 
                        "line_index_start": 399, 
                        "lines": [
                            "    def _populate_owners(self):\n", 
                            "        \"\"\"\n", 
                            "        Get the owners (user IDs) for this survey.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if self._populated_owners:\n", 
                            "            return\n", 
                            "\n", 
                            "        try:\n", 
                            "            access_list = self.request.svysvc.survey_access_list(self.id)\n", 
                            "            self._populated_owners = True\n", 
                            "        except ServiceResponseError:\n", 
                            "            # Survey might not be found\n", 
                            "            return\n", 
                            "\n", 
                            "        for user_id in access_list['users']:\n", 
                            "            user = User(self.request, user_id)\n", 
                            "            self._user_list.append(user)\n", 
                            "            self._user_map[user.id] = user\n", 
                            "            user.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "_populate_owners", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 423, 
                        "line_index_start": 420, 
                        "lines": [
                            "    def is_owner(self, user):\n", 
                            "        self._populate_owners()\n", 
                            "        return str(user.id) in self._user_map\n", 
                            "\n"
                        ], 
                        "name": "is_owner", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 422, 'ast_node': <_ast.Return object at 0x256c590>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23793d0>, 'obj_type': 'return', 'line_index_end': 423}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256c9d0>, 'name': 'property', 'line_index_start': 424, 'line_index_end': 425, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379450>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 427, 
                        "line_index_start": 424, 
                        "lines": [
                            "    @property\n", 
                            "    def owner(self):\n", 
                            "        return self.owners[0]\n", 
                            "\n"
                        ], 
                        "name": "owner", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 426, 'ast_node': <_ast.Return object at 0x256c850>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379450>, 'obj_type': 'return', 'line_index_end': 427}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256cc90>, 'name': 'property', 'line_index_start': 428, 'line_index_end': 429, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379510>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 432, 
                        "line_index_start": 428, 
                        "lines": [
                            "    @property\n", 
                            "    def owners(self):\n", 
                            "        self._populate_owners()\n", 
                            "        return self._user_list\n", 
                            "\n"
                        ], 
                        "name": "owners", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 431, 'ast_node': <_ast.Return object at 0x256cbd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379510>, 'obj_type': 'return', 'line_index_end': 432}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 451, 
                        "line_index_start": 433, 
                        "lines": [
                            "    def _load_pages(self, pages):\n", 
                            "        question_position = 1\n", 
                            "        page_position = 1\n", 
                            "        for page_data in pages:\n", 
                            "            page = Page(self.request)\n", 
                            "            page.load(page_data)\n", 
                            "            page.position = page_position\n", 
                            "            page_position += 1\n", 
                            "            self.add_page(page)\n", 
                            "            for question in page.questions:\n", 
                            "                # Question numbers aren't stored with presentation context\n", 
                            "                # in the DB, we have to correct for this.\n", 
                            "                question.position = question_position\n", 
                            "                if not question.is_presentation() or \\\n", 
                            "                    question.has_random_assignment:\n", 
                            "                        question_position += 1\n", 
                            "                self.add_question(question)\n", 
                            "                self._load_answers(question.answers)\n", 
                            "\n"
                        ], 
                        "name": "_load_pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x256cdd0>, 'target': 'question_position', 'line_index_start': 434, 'value': 1, 'line_index_end': 434, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23795d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x256ce90>, 'target': 'page_position', 'line_index_start': 435, 'value': 1, 'line_index_end': 435, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23795d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 463, 
                        "line_index_start": 452, 
                        "lines": [
                            "    def _load_answers(self, answers):\n", 
                            "        for dim, dim_answers in iteritems(answers):\n", 
                            "            for answer in dim_answers:\n", 
                            "                self._answer_map[answer['answer_id']] = answer\n", 
                            "                answer['id'] = str(answer['answer_id'])\n", 
                            "                del answer['answer_id']\n", 
                            "                if 'items' in answer:\n", 
                            "                    for menu_item in answer['items']:\n", 
                            "                        self._answer_map[menu_item['answer_id']] = menu_item\n", 
                            "                        menu_item['id'] = str(menu_item['answer_id'])\n", 
                            "                        del menu_item['answer_id']\n", 
                            "\n"
                        ], 
                        "name": "_load_answers", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Get the views for this survey.\n\nIf no view exists, create default and current views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 570, 
                        "line_index_start": 464, 
                        "lines": [
                            "    def _populate_views(self):\n", 
                            "        \"\"\"\n", 
                            "        Get the views for this survey.\n", 
                            "\n", 
                            "        If no view exists, create default and current views.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if self._populated_views:\n", 
                            "            return\n", 
                            "\n", 
                            "        # Can't get data if ID is None\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to get views: survey has no ID.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        data = self.request.ansvc.list_views(self.id)\n", 
                            "        views = data['view_schemas']\n", 
                            "\n", 
                            "        # WARNING: This must be set before ``add_view()`` and\n", 
                            "        # ``get_views_by_id()`` gets called again lower down\n", 
                            "        self._populated_views = True\n", 
                            "\n", 
                            "        # Build view objects\n", 
                            "        self._views_list = []\n", 
                            "        self._views_map = {}\n", 
                            "        for view_id, view_data in iteritems(views):\n", 
                            "            view_type = view_data['view_type']\n", 
                            "            view_data = json.loads(view_data['view_schema'])\n", 
                            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                            "            # None when created the first time as we don't yet have an ID from\n", 
                            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                            "            # the view_id inside the view_schema is still None and wasn't\n", 
                            "            # assigned with its ID. For this to be fixed, we should not store\n", 
                            "            # the view_id within the view_schema. Or we can augment the dict\n", 
                            "            # such as here. This should be fixed when the view schema will be\n", 
                            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                            "            view_data['view_id'] = view_id\n", 
                            "            view_data['type'] = view_type\n", 
                            "\n", 
                            "            view = View(self.request, self)\n", 
                            "            view.load(view_data)\n", 
                            "            try:\n", 
                            "                self.add_view(view)\n", 
                            "            except (\n", 
                            "                CurrentViewAlreadyExistsError,\n", 
                            "                DefaultViewAlreadyExistsError\n", 
                            "            ):\n", 
                            "                log.warning(\n", 
                            "                    \"Name=DuplicateCurrentDefaultView\",\n", 
                            "                    \"ViewData=%s\" % view_data\n", 
                            "                )\n", 
                            "                # Force deletion because we normally can't delete a default or\n", 
                            "                # current view.\n", 
                            "                view.survey = self  # backref required for deletion\n", 
                            "                view.delete(force=True)\n", 
                            "\n", 
                            "        # Call .fix() only after all views have been loaded into the survey\n", 
                            "        # otherwise a view that depends on a not-yet-loaded view will\n", 
                            "        # provoke a traceback (GORILLA-2216).\n", 
                            "        for view in self.views:\n", 
                            "            if view.fix():\n", 
                            "                view.save()\n", 
                            "\n", 
                            "        if self.default_view is None:\n", 
                            "            log.info(\"Creating default view for survey=%s\", self.id)\n", 
                            "            default_view = self._create_default_view()\n", 
                            "            default_view.save()\n", 
                            "            self.add_view(default_view)\n", 
                            "\n", 
                            "        if self.current_view is None:\n", 
                            "            log.info(\"Creating current view for survey=%s\", self.id)\n", 
                            "            current_view = self._create_current_view()\n", 
                            "            current_view.selected_view = self.default_view\n", 
                            "            current_view.save()\n", 
                            "            self.add_view(current_view)\n", 
                            "\n", 
                            "        if self.quotas and self.default_view.quota_view_metadata is None:\n", 
                            "            log.info(\"Creating quota view for survey=%s\", self.id)\n", 
                            "            self._create_quota_views()\n", 
                            "        \n", 
                            "        if self.has_random_assignment and self.default_view.random_assignment_view_metadata is None:\n", 
                            "            log.info(\"Creating random assignment view for survey=%s\", self.id)\n", 
                            "            self._create_random_assignment_views()\n", 
                            "         \n", 
                            "        if self.has_configured_audience and \\\n", 
                            "            self.default_view.audience_view_metadata is None:\n", 
                            "                self._create_audience_view()\n", 
                            "\n", 
                            "        # Set the selected view on the current view.\n", 
                            "        selected_view_id = self.current_view.selected_view_id\n", 
                            "        selected_view = self.get_view_by_id(selected_view_id)\n", 
                            "        if selected_view is None:\n", 
                            "            # Make sure the current view has its selected view pointing to an\n", 
                            "            # existing view. If the selected view doesn't exist (see\n", 
                            "            # GORILLA-1198 for details), re-point the current view's selected\n", 
                            "            # view to be the default view.\n", 
                            "            log.warning(\n", 
                            "                \"Name=SelectedViewNotFound\",\n", 
                            "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
                            "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
                            "            )\n", 
                            "            selected_view = self.current_view.selected_view = self.default_view\n", 
                            "            self.current_view.save()\n", 
                            "        assert selected_view.id == self.current_view.selected_view_id\n", 
                            "        self.current_view.selected_view = selected_view\n", 
                            "\n"
                        ], 
                        "name": "_populate_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570590>, 'target': 'data', 'line_index_start': 480, 'line_index_end': 480, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25707d0>, 'target': 'views', 'line_index_start': 481, 'line_index_end': 484, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570950>, 'line_index_start': 485, 'value': 'True', 'line_index_end': 487, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570a50>, 'line_index_start': 488, 'line_index_end': 488, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570b50>, 'line_index_start': 489, 'line_index_end': 489, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2575e10>, 'target': 'selected_view_id', 'line_index_start': 554, 'line_index_end': 554, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2575f50>, 'target': 'selected_view', 'line_index_start': 555, 'line_index_end': 555, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2576a90>, 'line_index_start': 569, 'value': 'selected_view', 'line_index_end': 570, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Get the views for this survey.\n\nIf no view exists, create default and current views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 668, 
                        "line_index_start": 571, 
                        "lines": [
                            "    def _populate_shared_views(self):\n", 
                            "        \"\"\"\n", 
                            "        Get the views for this survey.\n", 
                            "\n", 
                            "        If no view exists, create default and current views.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if self._populated_shared_views:\n", 
                            "            return\n", 
                            "\n", 
                            "        # Can't get data if ID is None\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to get shared views: survey has no ID.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        data = self.request.ansvc.list_shared_views(self.id)\n", 
                            "        views = data['view_schemas']\n", 
                            "\n", 
                            "        # WARNING: This must be set before ``add_view()`` and\n", 
                            "        # ``get_views_by_id()`` gets called again lower down\n", 
                            "        self._populated_shared_views = True\n", 
                            "\n", 
                            "        # Build view objects\n", 
                            "        self._shared_views_list = []\n", 
                            "        self._shared_views_map = {}\n", 
                            "\n", 
                            "        for view_id, view_data in iteritems(views):\n", 
                            "            view_type = view_data['view_type']\n", 
                            "            view_data = json.loads(view_data['view_schema'])\n", 
                            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                            "            # None when created the first time as we don't yet have an ID from\n", 
                            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                            "            # the view_id inside the view_schema is still None and wasn't\n", 
                            "            # assigned with its ID. For this to be fixed, we should not store\n", 
                            "            # the view_id within the view_schema. Or we can augment the dict\n", 
                            "            # such as here. This should be fixed when the view schema will be\n", 
                            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                            "            view_data['view_id'] = view_id\n", 
                            "            view_data['type'] = view_type\n", 
                            "\n", 
                            "            view = View(self.request, self)\n", 
                            "            view.load(view_data)\n", 
                            "            view.survey = self\n", 
                            "\n", 
                            "            try:\n", 
                            "                self._shared_views_list.append(view)\n", 
                            "                self._shared_views_map[view_id] = view\n", 
                            "            except (\n", 
                            "                CurrentViewAlreadyExistsError,\n", 
                            "                DefaultViewAlreadyExistsError\n", 
                            "            ):\n", 
                            "                log.warning(\n", 
                            "                    \"Name=DuplicateCurrentDefaultView\",\n", 
                            "                    \"ViewData=%s\" % view_data\n", 
                            "                )\n", 
                            "                # Force deletion because we normally can't delete a default or\n", 
                            "                # current view.\n", 
                            "                view.delete(force=True)\n", 
                            "\n", 
                            "        # Call .fix() only after all views have been loaded into the survey\n", 
                            "        # otherwise a view that depends on a not-yet-loaded view will\n", 
                            "        # provoke a traceback (GORILLA-2216).\n", 
                            "        for view in self.views:\n", 
                            "            if view.fix():\n", 
                            "                view.save()\n", 
                            "\n", 
                            "        if self.default_view is None:\n", 
                            "            log.info(\"Creating default view for survey=%s\" % self.id)\n", 
                            "            default_view = self._create_default_view()\n", 
                            "            default_view.save()\n", 
                            "            self.add_view(default_view)\n", 
                            "\n", 
                            "        if self.current_view is None:\n", 
                            "            log.info(\"Creating current view for survey=%s\" % self.id)\n", 
                            "            current_view = self._create_current_view()\n", 
                            "            current_view.selected_view = self.default_view\n", 
                            "            current_view.save()\n", 
                            "            self.add_view(current_view)\n", 
                            "\n", 
                            "        # Set the selected view on the current view.\n", 
                            "        selected_view_id = self.current_view.selected_view_id\n", 
                            "        selected_view = self.get_view_by_id(selected_view_id)\n", 
                            "        if selected_view is None:\n", 
                            "            # Make sure the current view has its selected view pointing to an\n", 
                            "            # existing view. If the selected view doesn't exist (see\n", 
                            "            # GORILLA-1198 for details), re-point the current view's selected\n", 
                            "            # view to be the default view.\n", 
                            "            log.warning(\n", 
                            "                \"Name=SelectedViewNotFound\",\n", 
                            "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
                            "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
                            "            )\n", 
                            "            selected_view = self.current_view.selected_view = self.default_view\n", 
                            "            self.current_view.save()\n", 
                            "        assert selected_view.id == self.current_view.selected_view_id\n", 
                            "        self.current_view.selected_view = selected_view\n", 
                            "\n"
                        ], 
                        "name": "_populate_shared_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578090>, 'target': 'data', 'line_index_start': 587, 'line_index_end': 587, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25782d0>, 'target': 'views', 'line_index_start': 588, 'line_index_end': 591, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578450>, 'line_index_start': 592, 'value': 'True', 'line_index_end': 594, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578550>, 'line_index_start': 595, 'line_index_end': 595, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578650>, 'line_index_start': 596, 'line_index_end': 597, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257be10>, 'target': 'selected_view_id', 'line_index_start': 652, 'line_index_end': 652, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257bf50>, 'target': 'selected_view', 'line_index_start': 653, 'line_index_end': 653, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257ca90>, 'line_index_start': 667, 'value': 'selected_view', 'line_index_end': 668, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 709, 
                        "line_index_start": 669, 
                        "lines": [
                            "    def _populate_export_views(self):\n", 
                            "        if self._populated_export_views:\n", 
                            "            return\n", 
                            "\n", 
                            "        # Can't get data if ID is None\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to get views: survey has no ID.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        data = self.request.ansvc.list_export_views(self.id)\n", 
                            "        views = data['view_schemas']\n", 
                            "\n", 
                            "        # WARNING: This must be set before ``add_view()`` and\n", 
                            "        # ``get_views_by_id()`` gets called again lower down\n", 
                            "        self._populated_export_views = True\n", 
                            "\n", 
                            "        # Build view objects\n", 
                            "        self._export_views_list = []\n", 
                            "        self._export_views_map = {}\n", 
                            "        for view_id, view_data in iteritems(views):\n", 
                            "            view_type = view_data['view_type']\n", 
                            "            view_data = json.loads(view_data['view_schema'])\n", 
                            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                            "            # None when created the first time as we don't yet have an ID from\n", 
                            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                            "            # the view_id inside the view_schema is still None and wasn't\n", 
                            "            # assigned with its ID. For this to be fixed, we should not store\n", 
                            "            # the view_id within the view_schema. Or we can augment the dict\n", 
                            "            # such as here. This should be fixed when the view schema will be\n", 
                            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                            "            view_data['view_id'] = view_id\n", 
                            "            view_data['type'] = view_type\n", 
                            "\n", 
                            "            view = View(self.request, self)\n", 
                            "            view.load(view_data)\n", 
                            "            self.add_export_view(view)\n", 
                            "\n", 
                            "            if view.fix():\n", 
                            "                view.save()\n", 
                            "\n"
                        ], 
                        "name": "_populate_export_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257cfd0>, 'target': 'data', 'line_index_start': 679, 'line_index_end': 679, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e250>, 'target': 'views', 'line_index_start': 680, 'line_index_end': 683, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e3d0>, 'line_index_start': 684, 'value': 'True', 'line_index_end': 686, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e4d0>, 'line_index_start': 687, 'line_index_end': 687, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e5d0>, 'line_index_start': 688, 'line_index_end': 688, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 721, 
                        "line_index_start": 710, 
                        "lines": [
                            "    def _create_current_view(self):\n", 
                            "        view = View(self.request, self)\n", 
                            "        view_data = view.to_dict()\n", 
                            "        view_data['is_current'] = True\n", 
                            "        view_data['is_default'] = False\n", 
                            "        view_data['name'] = \"Current View\"\n", 
                            "        view_data['survey_id'] = self.id\n", 
                            "        view_data['type'] = 'standard'\n", 
                            "        view.load(view_data)\n", 
                            "        self.add_view(view)\n", 
                            "        return view\n", 
                            "\n"
                        ], 
                        "name": "_create_current_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2581410>, 'line_index_start': 720, 'value': 'view', 'line_index_end': 721, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257f690>, 'target': 'view', 'line_index_start': 711, 'line_index_end': 711, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257f850>, 'target': 'view_data', 'line_index_start': 712, 'line_index_end': 712, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257f990>, 'line_index_start': 713, 'value': 'True', 'line_index_end': 713, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257fb10>, 'line_index_start': 714, 'value': 'False', 'line_index_end': 714, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257fc90>, 'line_index_start': 715, 'value': 'Current View', 'line_index_end': 715, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257fe10>, 'line_index_start': 716, 'line_index_end': 716, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257ffd0>, 'line_index_start': 717, 'value': 'standard', 'line_index_end': 717, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 735, 
                        "line_index_start": 722, 
                        "lines": [
                            "    def _create_default_view(self):\n", 
                            "        view = View(self.request, self)\n", 
                            "        view_data = view.to_dict()\n", 
                            "        view_data['is_current'] = False\n", 
                            "        view_data['is_default'] = True\n", 
                            "        view_data['name'] = View.DEFAULT_VIEW_NAME\n", 
                            "        view_data['survey_id'] = self.id\n", 
                            "        view_data['type'] = 'standard'\n", 
                            "        view_data['page'] = 'all'\n", 
                            "\n", 
                            "        view.load(view_data)\n", 
                            "        self.add_view(view)\n", 
                            "        return view\n", 
                            "\n"
                        ], 
                        "name": "_create_default_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2582490>, 'line_index_start': 734, 'value': 'view', 'line_index_end': 735, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581550>, 'target': 'view', 'line_index_start': 723, 'line_index_end': 723, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581710>, 'target': 'view_data', 'line_index_start': 724, 'line_index_end': 724, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581850>, 'line_index_start': 725, 'value': 'False', 'line_index_end': 725, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25819d0>, 'line_index_start': 726, 'value': 'True', 'line_index_end': 726, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581b50>, 'line_index_start': 727, 'line_index_end': 727, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581d10>, 'line_index_start': 728, 'line_index_end': 728, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581ed0>, 'line_index_start': 729, 'value': 'standard', 'line_index_end': 729, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2582090>, 'line_index_start': 730, 'value': 'all', 'line_index_end': 731, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 798, 
                        "line_index_start": 736, 
                        "lines": [
                            "    def _create_quota_views(self):\n", 
                            "        if 'equations' not in self.quotas:\n", 
                            "            # A user can create part of a quota and not implement it so the\n", 
                            "            # survey has quotas but no equations. If so, we don't want to create\n", 
                            "            # the quota views until they finish creating the quota.\n", 
                            "            return\n", 
                            "        quota_question_map = self._translate_quotas()\n", 
                            "        for quota_group in self.quotas['equations']:\n", 
                            "            # each quota group has it's own view, and each quota groupd can have\n", 
                            "            # multiple questions and/or question answer option. The metadata,\n", 
                            "            # qna rules and completeness rule, are added to their quota view.\n", 
                            "            quota_view = View(self.request, self)\n", 
                            "            quota_view.survey = self\n", 
                            "            quota_view_data = quota_view.to_dict()\n", 
                            "            quota_view_data['name'] = quota_group['display_label']\n", 
                            "            quota_view_data['is_current'] = False\n", 
                            "            quota_view_data['is_default'] = False\n", 
                            "            quota_view_data['survey_id'] = self.id\n", 
                            "            quota_view_data['type'] = 'standard'\n", 
                            "            quota_view.load(quota_view_data)\n", 
                            "            quota_view.save()\n", 
                            "            self.add_view(quota_view)\n", 
                            "            for rules in quota_group['variables']:\n", 
                            "                # iterating through the the equation groups and using our map\n", 
                            "                # to get the question ids\n", 
                            "                question_option_group = rules['quota_question_option_group_id']\n", 
                            "                question_info = quota_question_map[question_option_group]\n", 
                            "                metadata_item = {\n", 
                            "                    'key': 'rule_filter_qna',\n", 
                            "                    'metadata_id': None,\n", 
                            "                    'option_id': None,\n", 
                            "                    'question_id': None,\n", 
                            "                    'view_id': quota_view.id,\n", 
                            "                    'value': {\n", 
                            "                        'rule_type': 'qna',\n", 
                            "                        'selected': True,\n", 
                            "                        'secondary_id': str(question_info['question_id']),\n", 
                            "                        'rows': {}\n", 
                            "                    }\n", 
                            "                }\n", 
                            "                for row in question_info['question_option_ids']:\n", 
                            "                    #this is for the answer options that are selected\n", 
                            "                    metadata_item['value'][\"rows\"][str(row)] = True\n", 
                            "                quota_view.add_or_update_metadata_item(metadata_item)\n", 
                            "            # completeness rule so we don't include overquota and disqualified\n", 
                            "            completeness_metadata = {\n", 
                            "                'key': 'rule_filter_completeness',\n", 
                            "                'value': {\n", 
                            "                    'rule_type': 'completeness',\n", 
                            "                    'rows': {\n", 
                            "                        'completely': True\n", 
                            "                    },\n", 
                            "                    'selected': True\n", 
                            "                },\n", 
                            "                'view_id': quota_view.id,\n", 
                            "                'metadata_id': None,\n", 
                            "                'option_id': None,\n", 
                            "                'question_id': None\n", 
                            "            }\n", 
                            "            quota_view.add_or_update_metadata_item(completeness_metadata)\n", 
                            "            quota_view.save_metadata()\n", 
                            "        self._add_autocreated_view_metadata(\"quota_views_created\")\n", 
                            "\n"
                        ], 
                        "name": "_create_quota_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2582750>, 'target': 'quota_question_map', 'line_index_start': 742, 'line_index_end': 742, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a11d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 855, 
                        "line_index_start": 799, 
                        "lines": [
                            "    def _create_random_assignment_views(self):\n", 
                            "        for ra in self.random_assignment_questions:\n", 
                            "            # each quota group has it's own view, and each quota groupd can have\n", 
                            "            # multiple questions and/or question answer option. The metadata,\n", 
                            "            # qna rules and completeness rule, are added to their quota view.\n", 
                            "\n", 
                            "            # We currently don't allow for compares on open_ended questions\n", 
                            "            if ra.type == 'open_ended' or \\\n", 
                            "               ra.type == 'demographic' or \\\n", 
                            "               ra.type == 'datetime':\n", 
                            "                continue\n", 
                            "            random_assignment_view = View(self.request, self)\n", 
                            "            random_assignment_view.survey = self\n", 
                            "            random_assignment_view_data = random_assignment_view.to_dict()\n", 
                            "\n", 
                            "            if len(ra.heading) > 0: \n", 
                            "                random_assignment_view_data['name'] = ra.heading\n", 
                            "            else:\n", 
                            "                random_assignment_view_data['name'] = \"Q%s A/B Test\" % (ra.position)\n", 
                            "\n", 
                            "            random_assignment_view_data['is_current'] = False\n", 
                            "            random_assignment_view_data['is_default'] = False\n", 
                            "            random_assignment_view_data['survey_id'] = self.id\n", 
                            "            random_assignment_view_data['type'] = 'standard'\n", 
                            "            random_assignment_view.load(random_assignment_view_data)\n", 
                            "            random_assignment_view.save()\n", 
                            "            self.add_view(random_assignment_view)\n", 
                            "            rows = {}\n", 
                            "            for rule in ra.random_assignment_list:\n", 
                            "                variable_id = rule['variable_id']\n", 
                            "                rows[str(variable_id)] = True\n", 
                            "                \n", 
                            "            # iterating through the the equation groups and using our map\n", 
                            "            # to get the question ids\n", 
                            "            metadata_item = {\n", 
                            "                'key': 'rule_compare_random_assignment',\n", 
                            "                'metadata_id': None,\n", 
                            "                'option_id': None,\n", 
                            "                'question_id': None,\n", 
                            "                'request': self.request,\n", 
                            "                'value': {\n", 
                            "                    'custom_heading': None,#rule['heading'],\n", 
                            "                    'family': ra.type,\n", 
                            "                    'subtype': ra.subtype,\n", 
                            "                    'question_id': int(ra.id),\n", 
                            "                    'rule_type': 'random_assignment',\n", 
                            "                    'selected': True,\n", 
                            "                    'rows': rows,\n", 
                            "                    'is_compare_rule': True,\n", 
                            "                },\n", 
                            "                'view_id': random_assignment_view.id,\n", 
                            "                'view': random_assignment_view,\n", 
                            "            }\n", 
                            "            random_assignment_view.add_or_update_metadata_item(metadata_item)\n", 
                            "            random_assignment_view.save_metadata()\n", 
                            "        self._add_autocreated_view_metadata(\"random_assignment_views_created\")\n", 
                            "\n"
                        ], 
                        "name": "_create_random_assignment_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 876, 
                        "line_index_start": 856, 
                        "lines": [
                            "    def _translate_quotas(self):\n", 
                            "        # must only be called on surveys with quotas!!\n", 
                            "        # AnSvc seperates the question option ids and question ids from the\n", 
                            "        # equations. We need to create a map for the equation group ids\n", 
                            "        # to the question ids, and selected question option ids.\n", 
                            "        quotas_questions = self.quotas['questions']\n", 
                            "        quota_question_map = {}\n", 
                            "        for question in quotas_questions:\n", 
                            "            question_id = question['question_id']\n", 
                            "            for options in question['option_groups']:\n", 
                            "                option_group_id = options['quota_question_option_group_id']\n", 
                            "                quota_question_map[option_group_id] = {\n", 
                            "                    'question_id': question_id,\n", 
                            "                    'question_option_ids': []\n", 
                            "                }\n", 
                            "                quota_question = quota_question_map[option_group_id]\n", 
                            "                question_option_ids = quota_question['question_option_ids']\n", 
                            "                for option in options['options']:\n", 
                            "                    question_option_ids.append(option['question_option_id'])\n", 
                            "        return quota_question_map\n", 
                            "\n"
                        ], 
                        "name": "_translate_quotas", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x258c550>, 'line_index_start': 875, 'value': 'quota_question_map', 'line_index_end': 876, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1290>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258a450>, 'target': 'quotas_questions', 'line_index_start': 861, 'line_index_end': 861, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1290>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258a610>, 'target': 'quota_question_map', 'line_index_start': 862, 'line_index_end': 862, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1290>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 927, 
                        "line_index_start": 877, 
                        "lines": [
                            "    def _create_audience_view(self):\n", 
                            "        # creating audience view\n", 
                            "        log.info(\"Creating audience view for survey=%s\", self.id)\n", 
                            "        audience_view = View(self.request, self)\n", 
                            "        audience_view.survey = self\n", 
                            "        audience_view_data = audience_view.to_dict()\n", 
                            "        audience_view_data['name'] = \"View complete responses only\"\n", 
                            "        audience_view_data['is_current'] = False\n", 
                            "        audience_view_data['is_default'] = False\n", 
                            "        audience_view_data['survey_id'] = self.id\n", 
                            "        audience_view_data['type'] = 'standard'\n", 
                            "        audience_view.load(audience_view_data)\n", 
                            "        audience_view.save()\n", 
                            "        self.add_view(audience_view)\n", 
                            "\n", 
                            "        #add completeness rule to audience view\n", 
                            "        completeness_metadata = {\n", 
                            "            'key': 'rule_filter_completeness',\n", 
                            "            'value': {\n", 
                            "                'rule_type': 'completeness',\n", 
                            "                'rows': {\n", 
                            "                    'completely': True\n", 
                            "                },\n", 
                            "                'selected': True\n", 
                            "            },\n", 
                            "            'view_id': audience_view.id,\n", 
                            "            'metadata_id': None,\n", 
                            "            'option_id': None,\n", 
                            "            'question_id': None\n", 
                            "        }\n", 
                            "        audience_view.add_or_update_metadata_item(completeness_metadata)\n", 
                            "        audience_view.save_metadata()\n", 
                            "\n", 
                            "        # testing to see how many people buying audiences have unsaved\n", 
                            "        # rules to see if this step is even necessary\n", 
                            "        # check if current view is dirty\n", 
                            "\n", 
                            "        if not self.current_view.is_dirty:\n", 
                            "            if self.owner.package_type != 'BASIC':\n", 
                            "                log.info(\"switching from current view to audience view \"\n", 
                            "                \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                            "                self.switch_view(audience_view)\n", 
                            "            else:\n", 
                            "                log.info(\"cannot switch to audience view views because user \"\n", 
                            "                \"is basic for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                            "        else:\n", 
                            "            log.info(\"has unsaved rules, cannot switch to audience view \"\n", 
                            "                 \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                            "\n", 
                            "        self._add_autocreated_view_metadata(\"audience_views_created\")\n", 
                            "\n"
                        ], 
                        "name": "_create_audience_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258c850>, 'target': 'audience_view', 'line_index_start': 880, 'line_index_end': 880, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258ca10>, 'line_index_start': 881, 'value': 'self', 'line_index_end': 881, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cb10>, 'target': 'audience_view_data', 'line_index_start': 882, 'line_index_end': 882, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cc50>, 'line_index_start': 883, 'value': 'View complete responses only', 'line_index_end': 883, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cdd0>, 'line_index_start': 884, 'value': 'False', 'line_index_end': 884, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cf50>, 'line_index_start': 885, 'value': 'False', 'line_index_end': 885, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2378110>, 'line_index_start': 886, 'line_index_end': 886, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23782d0>, 'line_index_start': 887, 'value': 'standard', 'line_index_end': 887, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23787d0>, 'target': 'completeness_metadata', 'line_index_start': 893, 'line_index_end': 906, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 943, 
                        "line_index_start": 928, 
                        "lines": [
                            "    def _add_autocreated_view_metadata(self, key):\n", 
                            "        # set metadata on the default view so we only create autocreated views\n", 
                            "        # once\n", 
                            "        autocreated_metadata = {\n", 
                            "            'key': key,\n", 
                            "            'value': {\n", 
                            "                'created': True\n", 
                            "            },\n", 
                            "            'view_id': self.default_view.id,\n", 
                            "            'metadata_id': None,\n", 
                            "            'option_id': None,\n", 
                            "            'question_id': None\n", 
                            "        }\n", 
                            "        self.default_view.add_or_update_metadata_item(autocreated_metadata)\n", 
                            "        self.default_view.save_metadata()\n", 
                            "\n"
                        ], 
                        "name": "_add_autocreated_view_metadata", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x233ce10>, 'target': 'autocreated_metadata', 'line_index_start': 931, 'line_index_end': 940, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1610>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x233d950>, 'name': 'property', 'line_index_start': 944, 'line_index_end': 945, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1690>}"
                        ], 
                        "docstring": "Return a list of views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 949, 
                        "line_index_start": 944, 
                        "lines": [
                            "    @property\n", 
                            "    def views(self):\n", 
                            "        \"\"\"Return a list of views.\"\"\"\n", 
                            "        self._populate_views()\n", 
                            "        return self._views_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 948, 'ast_node': <_ast.Return object at 0x233d810>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1690>, 'obj_type': 'return', 'line_index_end': 949}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x233dd10>, 'name': 'property', 'line_index_start': 950, 'line_index_end': 951, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1790>}"
                        ], 
                        "docstring": "Return a list of views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 955, 
                        "line_index_start": 950, 
                        "lines": [
                            "    @property\n", 
                            "    def export_views(self):\n", 
                            "        \"\"\"Return a list of views.\"\"\"\n", 
                            "        self._populate_export_views()\n", 
                            "        return self._export_views_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "export_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 954, 'ast_node': <_ast.Return object at 0x233dbd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1790>, 'obj_type': 'return', 'line_index_end': 955}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 993, 
                        "line_index_start": 956, 
                        "lines": [
                            "    def add_view(self, view):\n", 
                            "        self._populate_views()\n", 
                            "        if str(view.survey_id) != str(self.id):\n", 
                            "            raise RuntimeError(\n", 
                            "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
                            "                \"to survey %(other_survey_id)s\" % {\n", 
                            "                    \"view_id\": view.id,\n", 
                            "                    \"survey_id\": self.id,\n", 
                            "                    \"other_survey_id\": view.survey_id\n", 
                            "                }\n", 
                            "            )\n", 
                            "\n", 
                            "        if view.is_current:\n", 
                            "            if self._current_view is None:\n", 
                            "                self._current_view = view\n", 
                            "            elif self._current_view != view:\n", 
                            "                raise CurrentViewAlreadyExistsError(\n", 
                            "                    \"survey=%s already has current_view=%s\" % (\n", 
                            "                        self.id,\n", 
                            "                        self._current_view.id\n", 
                            "                    )\n", 
                            "                )\n", 
                            "        elif view.is_default:\n", 
                            "            if self._default_view is None:\n", 
                            "                self._default_view = view\n", 
                            "            elif self._default_view != view:\n", 
                            "                raise DefaultViewAlreadyExistsError(\n", 
                            "                    \"survey=%s already has default_view=%s\" % (\n", 
                            "                        self.id,\n", 
                            "                        self._default_view.id\n", 
                            "                    )\n", 
                            "                )\n", 
                            "            self._default_view = view\n", 
                            "\n", 
                            "        self._views_list.append(view)\n", 
                            "        self._views_map[view.id] = view\n", 
                            "        view.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2341690>, 'line_index_start': 991, 'value': 'view', 'line_index_end': 991, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2341890>, 'line_index_start': 992, 'value': 'self', 'line_index_end': 993, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1890>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Set the given selected view ``selected_view`` as the current view and\nreturn the current view.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1011, 
                        "line_index_start": 994, 
                        "lines": [
                            "    def switch_view(self, selected_view):\n", 
                            "        \"\"\"\n", 
                            "        Set the given selected view ``selected_view`` as the current view and\n", 
                            "        return the current view.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        self.current_view.copy(selected_view)\n", 
                            "        self.current_view.selected_view = selected_view\n", 
                            "\n", 
                            "        self.current_view.clear_metadata()\n", 
                            "\n", 
                            "        # Only copy metadata over if the selected view is not the default view\n", 
                            "        # because the default view should not have any rules saved on it.\n", 
                            "        if not selected_view.is_default and selected_view.has_metadata():\n", 
                            "            self.current_view.copy_metadata(selected_view)\n", 
                            "\n", 
                            "        return self.current_view\n", 
                            "\n"
                        ], 
                        "name": "switch_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1010, 'ast_node': <_ast.Return object at 0x23422d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1950>, 'obj_type': 'return', 'line_index_end': 1011}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2341c90>, 'line_index_start': 1001, 'value': 'selected_view', 'line_index_end': 1002, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1950>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1027, 
                        "line_index_start": 1012, 
                        "lines": [
                            "    def add_export_view(self, view):\n", 
                            "        self._populate_export_views()\n", 
                            "        if view.survey_id != self.id:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
                            "                \"to survey %(other_survey_id)s\" % {\n", 
                            "                    \"view_id\": view.id,\n", 
                            "                    \"survey_id\": self.id,\n", 
                            "                    \"other_survey_id\": view.survey_id\n", 
                            "                }\n", 
                            "            )\n", 
                            "\n", 
                            "        self._export_views_list.append(view)\n", 
                            "        self._export_views_map[view.id] = view\n", 
                            "        view.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_export_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2342c50>, 'line_index_start': 1025, 'value': 'view', 'line_index_end': 1025, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1a10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2342e50>, 'line_index_start': 1026, 'value': 'self', 'line_index_end': 1027, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1a10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1032, 
                        "line_index_start": 1028, 
                        "lines": [
                            "    def add_export_job(self, export_job):\n", 
                            "        self._export_job_list.append(export_job)\n", 
                            "        self._export_job_map[export_job.id] = export_job\n", 
                            "        export_job.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_export_job", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2345210>, 'line_index_start': 1030, 'value': 'export_job', 'line_index_end': 1030, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1ad0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2345410>, 'line_index_start': 1031, 'value': 'self', 'line_index_end': 1032, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1ad0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1041, 
                        "line_index_start": 1033, 
                        "lines": [
                            "    def delete_export_job(self, export_id):\n", 
                            "        self._populate_export_jobs()\n", 
                            "        job = self._export_job_map.get(export_id)\n", 
                            "        if job is None:\n", 
                            "            return\n", 
                            "        job.delete()\n", 
                            "        self._export_job_list.remove(job)\n", 
                            "        del self._export_job_map[export_id]\n", 
                            "\n"
                        ], 
                        "name": "delete_export_job", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2345710>, 'target': 'job', 'line_index_start': 1035, 'line_index_end': 1035, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1b90>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return a view given a ``view_id``.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1046, 
                        "line_index_start": 1042, 
                        "lines": [
                            "    def get_view_by_id(self, view_id):\n", 
                            "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
                            "        self._populate_views()\n", 
                            "        return self._views_map.get(view_id)\n", 
                            "\n"
                        ], 
                        "name": "get_view_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1045, 'ast_node': <_ast.Return object at 0x23460d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1c10>, 'obj_type': 'return', 'line_index_end': 1046}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return a view given a ``view_id``.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1051, 
                        "line_index_start": 1047, 
                        "lines": [
                            "    def get_shared_view_by_id(self, view_id):\n", 
                            "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
                            "        self._populate_shared_views()\n", 
                            "        return self._shared_views_map.get(view_id)\n", 
                            "\n"
                        ], 
                        "name": "get_shared_view_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1050, 'ast_node': <_ast.Return object at 0x23464d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1c90>, 'obj_type': 'return', 'line_index_end': 1051}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return an export view given a ``view_id``", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1056, 
                        "line_index_start": 1052, 
                        "lines": [
                            "    def get_export_view_by_id(self, view_id):\n", 
                            "        \"\"\"Return an export view given a ``view_id``\"\"\"\n", 
                            "        self._populate_export_views()\n", 
                            "        return self._export_views_map.get(view_id)\n", 
                            "\n"
                        ], 
                        "name": "get_export_view_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1055, 'ast_node': <_ast.Return object at 0x23468d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1d10>, 'obj_type': 'return', 'line_index_end': 1056}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2346cd0>, 'name': 'property', 'line_index_start': 1057, 'line_index_end': 1058, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1d90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1061, 
                        "line_index_start": 1057, 
                        "lines": [
                            "    @property\n", 
                            "    def current_view(self):\n", 
                            "        self._populate_views()\n", 
                            "        return self._current_view\n", 
                            "\n"
                        ], 
                        "name": "current_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1060, 'ast_node': <_ast.Return object at 0x2346c10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1d90>, 'obj_type': 'return', 'line_index_end': 1061}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2346f90>, 'name': 'property', 'line_index_start': 1062, 'line_index_end': 1063, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1e50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1066, 
                        "line_index_start": 1062, 
                        "lines": [
                            "    @property\n", 
                            "    def default_view(self):\n", 
                            "        self._populate_views()\n", 
                            "        return self._default_view\n", 
                            "\n"
                        ], 
                        "name": "default_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1065, 'ast_node': <_ast.Return object at 0x2346ed0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1e50>, 'obj_type': 'return', 'line_index_end': 1066}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1085, 
                        "line_index_start": 1067, 
                        "lines": [
                            "    def get_respondent_trends(\n", 
                            "        self, first_respondent, last_respondent, trend_by,\n", 
                            "        filter_data=None, compare_data=None\n", 
                            "    ):\n", 
                            "        counts = self.request.ansvc.get_survey_respondent_trends(\n", 
                            "            self.id,\n", 
                            "            first_respondent.id,\n", 
                            "            last_respondent.id,\n", 
                            "            trend_by,\n", 
                            "            self.owner.utc_offset,\n", 
                            "            filter_data=filter_data,\n", 
                            "            compare_data=compare_data\n", 
                            "        )\n", 
                            "\n", 
                            "        return {\n", 
                            "            'respondent_count': counts['respondent_count'],\n", 
                            "            'trend_by': trend_by\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "get_respondent_trends", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1081, 'ast_node': <_ast.Return object at 0x23497d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1f10>, 'obj_type': 'return', 'line_index_end': 1085}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2349290>, 'target': 'counts', 'line_index_start': 1071, 'line_index_end': 1080, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1f10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1095, 
                        "line_index_start": 1086, 
                        "lines": [
                            "    def respondent_counts(self, filter_data=None, compare_data=None):\n", 
                            "        counts = self.request.ansvc.get_respondent_counts(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            filter_data,\n", 
                            "            compare_data,\n", 
                            "            self.owner.response_limit\n", 
                            "        )\n", 
                            "        return counts['respondent_count']\n", 
                            "\n"
                        ], 
                        "name": "respondent_counts", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1094, 'ast_node': <_ast.Return object at 0x234a050>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1fd0>, 'obj_type': 'return', 'line_index_end': 1095}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2349bd0>, 'target': 'counts', 'line_index_start': 1087, 'line_index_end': 1093, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1fd0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1106, 
                        "line_index_start": 1096, 
                        "lines": [
                            "    def num_of_respondents(self, respondent_counts):\n", 
                            "        num_of_respondents = respondent_counts['total_context']\n", 
                            "\n", 
                            "        if (\n", 
                            "            self.owner.has_respondent_limit() and\n", 
                            "            num_of_respondents >= self.owner.response_limit\n", 
                            "        ):\n", 
                            "            num_of_respondents = self.owner.response_limit\n", 
                            "\n", 
                            "        return num_of_respondents\n", 
                            "\n"
                        ], 
                        "name": "num_of_respondents", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234a810>, 'line_index_start': 1105, 'value': 'num_of_respondents', 'line_index_end': 1106, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a50d0>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234a290>, 'target': 'num_of_respondents', 'line_index_start': 1097, 'line_index_end': 1098, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a50d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1118, 
                        "line_index_start": 1107, 
                        "lines": [
                            "    def add_page(self, page):\n", 
                            "        # Remove str() when this gets fixed:\n", 
                            "        # https://monkeys.jira.com/browse/GORILLA-922\n", 
                            "        if str(page.survey_id) != self.id:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to add page which survey ID differs\"\n", 
                            "            )\n", 
                            "        page.survey = self  # backref\n", 
                            "        self._page_list.append(page)\n", 
                            "        self._page_map[page.id] = page\n", 
                            "        self._page_map_by_index[page.index] = page\n", 
                            "\n"
                        ], 
                        "name": "add_page", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234ac90>, 'line_index_start': 1114, 'value': 'self', 'line_index_end': 1114, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5190>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234af10>, 'line_index_start': 1116, 'value': 'page', 'line_index_end': 1116, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5190>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234b150>, 'line_index_start': 1117, 'value': 'page', 'line_index_end': 1118, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5190>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1130, 
                        "line_index_start": 1119, 
                        "lines": [
                            "    def add_question(self, question):\n", 
                            "        # FIXME: Check that the question belongs to the survey (via the page)\n", 
                            "        # when this \"surveyservice\" ticket is fixed:\n", 
                            "        # https://monkeys.jira.com/browse/GORILLA-923\n", 
                            "        if question.page.survey.id != self.id:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to add question which page's ID differs\"\n", 
                            "            )\n", 
                            "        question.survey = self  # backref\n", 
                            "        self._question_list.append(question)\n", 
                            "        self._question_map[question.id] = question\n", 
                            "\n"
                        ], 
                        "name": "add_question", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234b750>, 'line_index_start': 1127, 'value': 'self', 'line_index_end': 1127, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5290>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234b9d0>, 'line_index_start': 1129, 'value': 'question', 'line_index_end': 1130, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5290>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234bf50>, 'name': 'property', 'line_index_start': 1131, 'line_index_end': 1132, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5350>}"
                        ], 
                        "docstring": "Return a list of pages.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1136, 
                        "line_index_start": 1131, 
                        "lines": [
                            "    @property\n", 
                            "    def pages(self):\n", 
                            "        \"\"\"Return a list of pages.\"\"\"\n", 
                            "        self._populate_pages()\n", 
                            "        return self._page_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1135, 'ast_node': <_ast.Return object at 0x234be10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5350>, 'obj_type': 'return', 'line_index_end': 1136}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234d610>, 'name': 'property', 'line_index_start': 1137, 'line_index_end': 1138, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5450>}"
                        ], 
                        "docstring": "Return a list of pages that shown by the show rule.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1145, 
                        "line_index_start": 1137, 
                        "lines": [
                            "    @property\n", 
                            "    def shown_pages(self):\n", 
                            "        \"\"\"Return a list of pages that shown by the show rule.\"\"\"\n", 
                            "        pages = []\n", 
                            "        for page in self.pages:\n", 
                            "            if self.current_view.shows_page(page):\n", 
                            "                pages.append(page)\n", 
                            "        return pages\n", 
                            "\n"
                        ], 
                        "name": "shown_pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234d590>, 'line_index_start': 1144, 'value': 'pages', 'line_index_end': 1145, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5450>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234d110>, 'target': 'pages', 'line_index_start': 1140, 'line_index_end': 1140, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5450>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return the first showable (analyzable) page. If no page is\nconsidered showable, return None. The show rule on the current view is\nalso taken into consideration to decide whether or not the page is\nshowable.\n\nIn analyze terms, a page is considered to be showable if the page\ncontains at least one \"real\" question that can be answered by a\nrespondent.\n\nE.g., \"presentation\" questions are not considered to be showable.\nUnless they are random assignment presentation questions.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1167, 
                        "line_index_start": 1146, 
                        "lines": [
                            "    def get_first_showable_page(self):\n", 
                            "        \"\"\"\n", 
                            "        Return the first showable (analyzable) page. If no page is\n", 
                            "        considered showable, return None. The show rule on the current view is\n", 
                            "        also taken into consideration to decide whether or not the page is\n", 
                            "        showable.\n", 
                            "\n", 
                            "        In analyze terms, a page is considered to be showable if the page\n", 
                            "        contains at least one \"real\" question that can be answered by a\n", 
                            "        respondent.\n", 
                            "\n", 
                            "        E.g., \"presentation\" questions are not considered to be showable.\n", 
                            "        Unless they are random assignment presentation questions.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        for page in self.shown_pages:\n", 
                            "            for question in page.questions:\n", 
                            "                if not question.is_presentation():\n", 
                            "                    return page\n", 
                            "                elif question.has_random_assignment:\n", 
                            "                    return page\n", 
                            "\n"
                        ], 
                        "name": "get_first_showable_page", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return the suggested default page index to show to the user.\n\nThe value is either the page's index or the string \"all\" meaning that\nall pages should be shown.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1187, 
                        "line_index_start": 1168, 
                        "lines": [
                            "    def get_suggested_default_page_index(self):\n", 
                            "        \"\"\"\n", 
                            "        Return the suggested default page index to show to the user.\n", 
                            "\n", 
                            "        The value is either the page's index or the string \"all\" meaning that\n", 
                            "        all pages should be shown.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if len(self.pages) > 1 and len(self.questions) > 30:\n", 
                            "\n", 
                            "            first_showable_page = self.get_first_showable_page()\n", 
                            "\n", 
                            "            if first_showable_page is None:\n", 
                            "                return self.pages[0].index\n", 
                            "\n", 
                            "            return first_showable_page.index\n", 
                            "\n", 
                            "        return \"all\"\n", 
                            "\n", 
                            "\n"
                        ], 
                        "name": "get_suggested_default_page_index", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234f650>, 'line_index_start': 1185, 'value': 'all', 'line_index_end': 1187, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5590>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234f9d0>, 'name': 'property', 'line_index_start': 1188, 'line_index_end': 1189, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a55d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1192, 
                        "line_index_start": 1188, 
                        "lines": [
                            "    @property\n", 
                            "    def questions(self):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._question_list[:]  # return copy!\n", 
                            "    \n"
                        ], 
                        "name": "questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1191, 'ast_node': <_ast.Return object at 0x234f890>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a55d0>, 'obj_type': 'return', 'line_index_end': 1192}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234fd90>, 'name': 'property', 'line_index_start': 1193, 'line_index_end': 1194, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a56d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1199, 
                        "line_index_start": 1193, 
                        "lines": [
                            "    @property\n", 
                            "    def has_random_assignment(self):\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                return True\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_random_assignment", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234fd10>, 'line_index_start': 1198, 'value': 'False', 'line_index_end': 1199, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a56d0>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2350310>, 'name': 'property', 'line_index_start': 1200, 'line_index_end': 1201, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5790>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1207, 
                        "line_index_start": 1200, 
                        "lines": [
                            "    @property\n", 
                            "    def random_assignment_questions(self):\n", 
                            "        random_assignment_questions = []\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                random_assignment_questions.append(q)\n", 
                            "        return random_assignment_questions\n", 
                            "\n"
                        ], 
                        "name": "random_assignment_questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2350290>, 'line_index_start': 1206, 'value': 'random_assignment_questions', 'line_index_end': 1207, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5790>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234fe90>, 'target': 'random_assignment_questions', 'line_index_start': 1202, 'line_index_end': 1202, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5790>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2350810>, 'name': 'property', 'line_index_start': 1208, 'line_index_end': 1209, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5890>}"
                        ], 
                        "docstring": "random assignment presentation questions included because they have\nsummary data", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1216, 
                        "line_index_start": 1208, 
                        "lines": [
                            "    @property\n", 
                            "    def summary_data_questions(self):\n", 
                            "        \"\"\"\n", 
                            "        random assignment presentation questions included because they have\n", 
                            "        summary data\n", 
                            "        \"\"\"\n", 
                            "        return [q for q in self.questions if not q.is_presentation() \\\n", 
                            "            or q.has_random_assignment]\n", 
                            "\n"
                        ], 
                        "name": "summary_data_questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1214, 'ast_node': <_ast.Return object at 0x2350490>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5890>, 'obj_type': 'return', 'line_index_end': 1216}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1220, 
                        "line_index_start": 1217, 
                        "lines": [
                            "    def get_question_by_id(self, question_id):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._question_map.get(question_id)\n", 
                            "\n"
                        ], 
                        "name": "get_question_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1219, 'ast_node': <_ast.Return object at 0x2350a50>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5910>, 'obj_type': 'return', 'line_index_end': 1220}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1224, 
                        "line_index_start": 1221, 
                        "lines": [
                            "    def get_page_by_id(self, page_id):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._page_map.get(page_id)\n", 
                            "\n"
                        ], 
                        "name": "get_page_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1223, 'ast_node': <_ast.Return object at 0x2350dd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a59d0>, 'obj_type': 'return', 'line_index_end': 1224}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2352390>, 'name': 'property', 'line_index_start': 1225, 'line_index_end': 1226, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5a50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1232, 
                        "line_index_start": 1225, 
                        "lines": [
                            "    @property\n", 
                            "    def export_jobs(self):\n", 
                            "        try:\n", 
                            "            self._populate_export_jobs()\n", 
                            "        except ServiceError:\n", 
                            "            return\n", 
                            "        return self._export_job_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "export_jobs", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1231, 'ast_node': <_ast.Return object at 0x2352250>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5a50>, 'obj_type': 'return', 'line_index_end': 1232}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1239, 
                        "line_index_start": 1233, 
                        "lines": [
                            "    def get_exportjob_by_id(self, job_id):\n", 
                            "        try:\n", 
                            "            self._populate_export_jobs()\n", 
                            "        except ServiceError:\n", 
                            "            return\n", 
                            "        return self._export_job_map.get(job_id)\n", 
                            "\n"
                        ], 
                        "name": "get_exportjob_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1238, 'ast_node': <_ast.Return object at 0x23526d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5b10>, 'obj_type': 'return', 'line_index_end': 1239}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2352ad0>, 'name': 'property', 'line_index_start': 1240, 'line_index_end': 1241, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5b90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1244, 
                        "line_index_start": 1240, 
                        "lines": [
                            "    @property\n", 
                            "    def theme(self):\n", 
                            "        self._populate_theme()\n", 
                            "        return self._theme\n", 
                            "\n"
                        ], 
                        "name": "theme", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1243, 'ast_node': <_ast.Return object at 0x2352a10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5b90>, 'obj_type': 'return', 'line_index_end': 1244}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2352d90>, 'name': 'property', 'line_index_start': 1245, 'line_index_end': 1246, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5c50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1249, 
                        "line_index_start": 1245, 
                        "lines": [
                            "    @property\n", 
                            "    def design_settings(self):\n", 
                            "        self._populate_design_settings()\n", 
                            "        return self._design_settings\n", 
                            "\n"
                        ], 
                        "name": "design_settings", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1248, 'ast_node': <_ast.Return object at 0x2352cd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5c50>, 'obj_type': 'return', 'line_index_end': 1249}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1261, 
                        "line_index_start": 1250, 
                        "lines": [
                            "    def _populate_theme(self):\n", 
                            "        if self._populated_theme:\n", 
                            "            return\n", 
                            "\n", 
                            "        self._populate_pages()\n", 
                            "        #self._populate_structure()  # required for the theme ID\n", 
                            "        theme_id = self.design_settings['theme_id']\n", 
                            "        theme_data = self.request.svysvc.get_theme(theme_id)\n", 
                            "        self._populated_theme = True\n", 
                            "\n", 
                            "        self._theme = theme_data\n", 
                            "\n"
                        ], 
                        "name": "_populate_theme", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23530d0>, 'target': 'theme_id', 'line_index_start': 1256, 'line_index_end': 1256, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353290>, 'target': 'theme_data', 'line_index_start': 1257, 'line_index_end': 1257, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353490>, 'line_index_start': 1258, 'value': 'True', 'line_index_end': 1259, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353590>, 'line_index_start': 1260, 'value': 'theme_data', 'line_index_end': 1261, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1275, 
                        "line_index_start": 1262, 
                        "lines": [
                            "    def _populate_design_settings(self):\n", 
                            "        if self._populated_design_settings:\n", 
                            "            return\n", 
                            "\n", 
                            "        # only include panel if there is a configured audience\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            include_design_settings=True,\n", 
                            "            include_panel=self.has_configured_audience\n", 
                            "        )\n", 
                            "\n", 
                            "        self._design_settings = survey_data['design_settings']\n", 
                            "\n"
                        ], 
                        "name": "_populate_design_settings", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353850>, 'target': 'survey_data', 'line_index_start': 1267, 'line_index_end': 1273, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5e50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353c90>, 'line_index_start': 1274, 'line_index_end': 1275, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5e50>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2355110>, 'name': 'property', 'line_index_start': 1276, 'line_index_end': 1277, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5f10>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1280, 
                        "line_index_start": 1276, 
                        "lines": [
                            "    @property\n", 
                            "    def question_logic(self):\n", 
                            "        self._populate_logic()\n", 
                            "        return self._question_logic\n", 
                            "\n"
                        ], 
                        "name": "question_logic", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1279, 'ast_node': <_ast.Return object at 0x2355050>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5f10>, 'obj_type': 'return', 'line_index_end': 1280}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x23553d0>, 'name': 'property', 'line_index_start': 1281, 'line_index_end': 1282, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5fd0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1285, 
                        "line_index_start": 1281, 
                        "lines": [
                            "    @property\n", 
                            "    def page_logic(self):\n", 
                            "        self._populate_logic()\n", 
                            "        return self._page_logic\n", 
                            "\n"
                        ], 
                        "name": "page_logic", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1284, 'ast_node': <_ast.Return object at 0x2355310>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5fd0>, 'obj_type': 'return', 'line_index_end': 1285}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1300, 
                        "line_index_start": 1286, 
                        "lines": [
                            "    def _populate_logic(self):\n", 
                            "        if self._populated_logic:\n", 
                            "            return\n", 
                            "\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            include_logic=True\n", 
                            "        )\n", 
                            "\n", 
                            "        self._question_logic = survey_data['logic'].get('question_logic')\n", 
                            "        self._page_logic = survey_data['logic'].get('page_logic')\n", 
                            "\n", 
                            "        self._populated_logic = True\n", 
                            "\n"
                        ], 
                        "name": "_populate_logic", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23555d0>, 'target': 'survey_data', 'line_index_start': 1290, 'line_index_end': 1295, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2355950>, 'line_index_start': 1296, 'line_index_end': 1296, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2355bd0>, 'line_index_start': 1297, 'line_index_end': 1298, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2355e50>, 'line_index_start': 1299, 'value': 'True', 'line_index_end': 1300, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1312, 
                        "line_index_start": 1301, 
                        "lines": [
                            "    def _populate_export_jobs(self):\n", 
                            "        if self._populated_export_jobs:\n", 
                            "            return\n", 
                            "\n", 
                            "        export_jobs_data = self.request.jobsvc.get_export_jobs(self.id)\n", 
                            "        for job_data in export_jobs_data['export_jobs']:\n", 
                            "            export_job = ViewExportJob(self.request)\n", 
                            "            export_job.load(job_data)\n", 
                            "            self.add_export_job(export_job)\n", 
                            "\n", 
                            "        self._populated_export_jobs = True\n", 
                            "\n"
                        ], 
                        "name": "_populate_export_jobs", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2356150>, 'target': 'export_jobs_data', 'line_index_start': 1305, 'line_index_end': 1305, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9210>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2356910>, 'line_index_start': 1311, 'value': 'True', 'line_index_end': 1312, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9210>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1316, 
                        "line_index_start": 1313, 
                        "lines": [
                            "    def get_page_by_index(self, index):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._page_map_by_index.get(index)\n", 
                            "\n"
                        ], 
                        "name": "get_page_by_index", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1315, 'ast_node': <_ast.Return object at 0x2356c10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a92d0>, 'obj_type': 'return', 'line_index_end': 1316}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2358310>, 'name': 'property', 'line_index_start': 1317, 'line_index_end': 1318, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9350>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1323, 
                        "line_index_start": 1317, 
                        "lines": [
                            "    @property\n", 
                            "    def language(self):\n", 
                            "        self._populate_survey()\n", 
                            "        for lang in self.language_options:\n", 
                            "            if lang['id'] == self._language_id:\n", 
                            "                return lang\n", 
                            "\n"
                        ], 
                        "name": "language", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "returns the english name of the current user's language ", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1328, 
                        "line_index_start": 1324, 
                        "lines": [
                            "    def _get_owner_language(self):\n", 
                            "        ''' returns the english name of the current user's language '''\n", 
                            "        language = get_language_from_country_code(self.owner.language_code)\n", 
                            "        return language.name.lower()\n", 
                            "\n"
                        ], 
                        "name": "_get_owner_language", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1327, 'ast_node': <_ast.Return object at 0x2358650>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a93d0>, 'obj_type': 'return', 'line_index_end': 1328}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2358490>, 'target': 'language', 'line_index_start': 1326, 'line_index_end': 1326, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a93d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "expand_all determines whether we will expand all the possible text items\nor just the essay questions.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1360, 
                        "line_index_start": 1329, 
                        "lines": [
                            "    def _get_ta_question_rollups(self, questions, filter_data=None,\n", 
                            "                                compare_data=None, expand_all=None):\n", 
                            "        '''\n", 
                            "        expand_all determines whether we will expand all the possible text items\n", 
                            "        or just the essay questions.\n", 
                            "\n", 
                            "        '''\n", 
                            "        rollups = {}\n", 
                            "\n", 
                            "        # compared questions are only expanded by the user\n", 
                            "        # or if expand_all == True\n", 
                            "        if (\n", 
                            "            expand_all is None and\n", 
                            "            compare_data is not None and\n", 
                            "            'right' in compare_data\n", 
                            "            ):\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        # prepare a default set of parameters for each question\n", 
                            "        default_params = self._prepare_ta_rollup(filter_data,\n", 
                            "                                                compare_data, expand_all)\n", 
                            "\n", 
                            "        if self.owner.has_respondent_limit():\n", 
                            "            response_limit = self.owner.response_limit\n", 
                            "            default_params['common']['response_limitation'] = response_limit\n", 
                            "\n", 
                            "        for question in questions:\n", 
                            "            rollups[question.id] = question.ta_preget_rollup_by_question(\n", 
                            "                                    default_params, expand_all)\n", 
                            "\n", 
                            "        return rollups\n", 
                            "\n"
                        ], 
                        "name": "_get_ta_question_rollups", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2359910>, 'line_index_start': 1359, 'value': 'rollups', 'line_index_end': 1360, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9490>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2358a90>, 'target': 'rollups', 'line_index_start': 1336, 'line_index_end': 1339, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9490>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2358e90>, 'target': 'default_params', 'line_index_start': 1348, 'line_index_end': 1350, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9490>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "random assignment ta rollups need a different structure", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1390, 
                        "line_index_start": 1361, 
                        "lines": [
                            "    def _get_random_assignment_ta_rollup(self, question, variation_id_list,\n", 
                            "                                        filter_data=None, compare_data=None,\n", 
                            "                                        expand_all=None, option_id=0):\n", 
                            "        \"\"\"\n", 
                            "        random assignment ta rollups need a different structure\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        rollups = {}\n", 
                            "\n", 
                            "        # compared questions are only expanded by the user\n", 
                            "        # or if expand_all == True\n", 
                            "        if (\n", 
                            "            expand_all is None and\n", 
                            "            compare_data is not None and\n", 
                            "            'right' in compare_data\n", 
                            "            ):\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        # prepare a default set of parameters for each question\n", 
                            "        for variation in variation_id_list:\n", 
                            "            default_params = self._prepare_ta_rollup(filter_data, compare_data,\n", 
                            "                expand_all, variation)\n", 
                            "            if self.owner.has_respondent_limit():\n", 
                            "                response_limit = self.owner.response_limit\n", 
                            "                default_params['common']['response_limitation'] = response_limit\n", 
                            "            ta_rollup = question.ta_preget_rollup_by_question(\n", 
                            "                            default_params, expand_all, option_id, variation)\n", 
                            "\n", 
                            "        return ta_rollup\n", 
                            "\n"
                        ], 
                        "name": "_get_random_assignment_ta_rollup", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x235bb90>, 'line_index_start': 1389, 'value': 'ta_rollup', 'line_index_end': 1390, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9590>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2359d50>, 'target': 'rollups', 'line_index_start': 1368, 'line_index_end': 1371, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9590>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "prepares rollups for all questions having text responses", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1421, 
                        "line_index_start": 1391, 
                        "lines": [
                            "    def _prepare_ta_rollup(self, filter_data=None, compare_data=None,\n", 
                            "                            expand_all=None, option_id=0, variation_id=0):\n", 
                            "        \"\"\"\n", 
                            "        prepares rollups for all questions having text responses\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "\n", 
                            "        return {\n", 
                            "            'common': {\n", 
                            "                'option_id': option_id,\n", 
                            "                'variation_id': variation_id,\n", 
                            "                'crosstab_option_id': None,\n", 
                            "                'matrix_crosstab': None,\n", 
                            "                'filter': filter_data,\n", 
                            "                'crosstab': compare_data\n", 
                            "            },\n", 
                            "            'response': {\n", 
                            "                'language': self._get_owner_language(),\n", 
                            "                # should get this from the client as well\n", 
                            "                #'page_size': data['page_size']\n", 
                            "                'page_size': 50,\n", 
                            "                'offset': 0,\n", 
                            "                'include_question_response_count': 1,\n", 
                            "                'include_question_tags': 1,\n", 
                            "                'restrict_by_tag_ids': None,\n", 
                            "            },\n", 
                            "            'analysis': {\n", 
                            "                'hide_ids': 1\n", 
                            "            }\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "_prepare_ta_rollup", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1398, 'ast_node': <_ast.Return object at 0x235bfd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9650>, 'obj_type': 'return', 'line_index_end': 1421}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Call object at 0x2363e10>, 'name': 'prof', 'starargs': None, 'kwargs': None, 'line_index_start': 1422, 'args': [], 'line_index_end': 1423, 'keywords': [<_ast.keyword object at 0x2363e90>], 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>}"
                        ], 
                        "docstring": "Return a dictionary of question rollup data for the currently showing\npage. Filters and compare data will be applied if they exist on the\ncurrent view.\n\nA list of Question instances may be passed as ``questions``, then only\nthe rollup data for these questions will be returned.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1561, 
                        "line_index_start": 1422, 
                        "lines": [
                            "    @prof(depth=5)#, include_variables=['questions', 'rollups'])\n", 
                            "    def get_question_rollups(self, questions, filter_data=None,\n", 
                            "                             compare_data=None, expand_all=None,\n", 
                            "                             include_openended=True):\n", 
                            "        \"\"\"\n", 
                            "        Return a dictionary of question rollup data for the currently showing\n", 
                            "        page. Filters and compare data will be applied if they exist on the\n", 
                            "        current view.\n", 
                            "\n", 
                            "        A list of Question instances may be passed as ``questions``, then only\n", 
                            "        the rollup data for these questions will be returned.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        rollups = {}  # returned data\n", 
                            "        input_question_list = []  # input for ansvc\n", 
                            "        ta_question_list = []  # input for tasvc\n", 
                            "        random_assignment_ta_list = []  # input for tasvc\n", 
                            "\n", 
                            "        for question in questions:\n", 
                            "            if question.is_presentation() and \\\n", 
                            "                not question.has_random_assignment:\n", 
                            "                # skip \"presentation\" questions that don't have summary data\n", 
                            "                continue\n", 
                            "\n", 
                            "            # We always return a dict of rollups that have all the requested\n", 
                            "            # questions. If the question doesn't have rollup data, it rollup\n", 
                            "            # value will be None.\n", 
                            "            rollups[question.id] = None\n", 
                            "            input_question_list.append(question)\n", 
                            "            if (\n", 
                            "                include_openended and\n", 
                            "                question.has_text and not\n", 
                            "                question.random_assignment_list\n", 
                            "            ):\n", 
                            "                ta_question_list.append(question)\n", 
                            "\n", 
                            "        if not input_question_list:\n", 
                            "            # If the survey doesn't have any questions, return an empty rollup\n", 
                            "            # dictionary\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        questions_data = []\n", 
                            "\n", 
                            "        for question in input_question_list:\n", 
                            "            q_data = {\n", 
                            "                'question_id': question.id,\n", 
                            "                'question_type': {\n", 
                            "                    'family': question.type,\n", 
                            "                    'subtype': question.subtype\n", 
                            "                },\n", 
                            "            }\n", 
                            "            if question.random_assignment_list:\n", 
                            "                q_data['random_assignment_vars'] = [str(ra['variable_id']) for ra in question.random_assignment_list]\n", 
                            "                if include_openended and question.has_text:\n", 
                            "                    random_assignment_ta_list.append(question)\n", 
                            "            questions_data.append(q_data)\n", 
                            "\n", 
                            "        is_ra_compare = False\n", 
                            "        is_ra_filter = False\n", 
                            "\n", 
                            "        if compare_data is not None:\n", 
                            "            if compare_data['type'] == 'random_assignment':\n", 
                            "                is_ra_compare = True\n", 
                            "        elif filter_data is not None:\n", 
                            "            if filter_data['left'] == 'question.ra':\n", 
                            "                is_ra_filter = True\n", 
                            "\n", 
                            "        if is_ra_compare:\n", 
                            "            response = self.request.ansvc.get_compare_rollups(\n", 
                            "                self.id,\n", 
                            "                self.owner.id,\n", 
                            "                questions_data,\n", 
                            "                filter_data,\n", 
                            "                compare_data,\n", 
                            "                self.owner.response_limit\n", 
                            "            )\n", 
                            "        elif False:  # is_ra_filter:\n", 
                            "            response = self.request.ansvc.get_questions_rollups_v2(\n", 
                            "                self.id,\n", 
                            "                self.owner.id,\n", 
                            "                questions_data,\n", 
                            "                filter_data,\n", 
                            "                compare_data,\n", 
                            "                self.owner.response_limit\n", 
                            "            )\n", 
                            "        else:\n", 
                            "            response = self.request.ansvc.get_questions_rollups(\n", 
                            "                self.id,\n", 
                            "                self.owner.id,\n", 
                            "                questions_data,\n", 
                            "                filter_data,\n", 
                            "                compare_data,\n", 
                            "                self.owner.response_limit\n", 
                            "            )\n", 
                            "\n", 
                            "        # unwrap rollups to the top-level of the dict\n", 
                            "        response = response[self.id]\n", 
                            "\n", 
                            "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
                            "        rollups.update(response)\n", 
                            "\n", 
                            "        ta_rollups = self._get_ta_question_rollups(\n", 
                            "            ta_question_list,\n", 
                            "            filter_data,\n", 
                            "            compare_data,\n", 
                            "            expand_all\n", 
                            "        )\n", 
                            "\n", 
                            "        for question_id in ta_rollups:\n", 
                            "            rollups[question_id]['summary']['ta_data'] = ta_rollups[question_id]\n", 
                            "\n", 
                            "        # Puts the TA data into questions that have random assignment in them\n", 
                            "        for question in random_assignment_ta_list:\n", 
                            "            for variable in question.random_assignment_list:\n", 
                            "                variable_id = str(variable['variable_id'])\n", 
                            "\n", 
                            "                # This is needed because on random_assignment compares, we\n", 
                            "                #   merge the question that is the source of the compare, thus we\n", 
                            "                #   don't seperate it by variation_id\n", 
                            "                if variable_id in rollups[question.id]:\n", 
                            "                    question_variable_rollup = rollups[question.id][variable_id]\n", 
                            "                else:\n", 
                            "                    variable_id == '0'\n", 
                            "                    question_variable_rollup = rollups[question.id]\n", 
                            "\n", 
                            "                if question.other_option:\n", 
                            "                    option_id = str(question.other_option['id'])\n", 
                            "                else:\n", 
                            "                    option_id = '0'\n", 
                            "\n", 
                            "                ta_rollup_data = self._get_random_assignment_ta_rollup(\n", 
                            "                                question, [variable_id],\n", 
                            "                                filter_data, compare_data,\n", 
                            "                                expand_all, option_id)\n", 
                            "\n", 
                            "                question_variable_rollup['summary']['ta_data'] = ta_rollup_data\n", 
                            "        \n", 
                            "        return rollups\n", 
                            "    \n", 
                            "\n"
                        ], 
                        "name": "get_question_rollups", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2363d90>, 'line_index_start': 1559, 'value': 'rollups', 'line_index_end': 1561, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235cc90>, 'target': 'rollups', 'line_index_start': 1435, 'line_index_end': 1435, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235cd50>, 'target': 'input_question_list', 'line_index_start': 1436, 'line_index_end': 1436, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235ce10>, 'target': 'ta_question_list', 'line_index_start': 1437, 'line_index_end': 1437, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235ced0>, 'target': 'random_assignment_ta_list', 'line_index_start': 1438, 'line_index_end': 1439, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235ea50>, 'target': 'questions_data', 'line_index_start': 1463, 'line_index_end': 1464, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235f810>, 'target': 'is_ra_compare', 'line_index_start': 1479, 'value': 'False', 'line_index_end': 1479, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235f8d0>, 'target': 'is_ra_filter', 'line_index_start': 1480, 'value': 'False', 'line_index_end': 1481, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2361f50>, 'target': 'response', 'line_index_start': 1518, 'line_index_end': 1520, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2362290>, 'target': 'ta_rollups', 'line_index_start': 1523, 'line_index_end': 1529, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2365b10>, 'name': 'property', 'line_index_start': 1562, 'line_index_end': 1563, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1573, 
                        "line_index_start": 1562, 
                        "lines": [
                            "    @property\n", 
                            "    def resource_path(self):\n", 
                            "        # taken from smlib.webmodels\n", 
                            "        if self.id is None:\n", 
                            "            raise Exception(\"survey id required\")\n", 
                            "\n", 
                            "        resource_path_prefix = self.request.registry.settings['dotnet.resource_path_prefix']\n", 
                            "        resource_host = self.request.registry.settings['dotnet.resource_host']\n", 
                            "        survey_id_modded = int(self.id) % 30000\n", 
                            "        return \"//%s/%s/%s/%s/\" % (resource_host, resource_path_prefix, survey_id_modded, self.id)\n", 
                            "\n", 
                            "\n"
                        ], 
                        "name": "resource_path", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1571, 'ast_node': <_ast.Return object at 0x23658d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'obj_type': 'return', 'line_index_end': 1573}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365250>, 'target': 'resource_path_prefix', 'line_index_start': 1568, 'line_index_end': 1568, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365490>, 'target': 'resource_host', 'line_index_start': 1569, 'line_index_end': 1569, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23656d0>, 'target': 'survey_id_modded', 'line_index_start': 1570, 'line_index_end': 1570, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return a dictionary of question rollup data for the currently showing\npage. Filters and compare data will be applied if they exist on the\ncurrent view.\n\nA list of Question instances may be passed as ``questions``, then only\nthe rollup data for these questions will be returned.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1635, 
                        "line_index_start": 1574, 
                        "lines": [
                            "    def get_questions_responses_trends(\n", 
                            "        self, first_respondent, last_respondent, default_trend_by, questions,\n", 
                            "        filter_data=None, compare_data=None\n", 
                            "    ):\n", 
                            "        \"\"\"\n", 
                            "        Return a dictionary of question rollup data for the currently showing\n", 
                            "        page. Filters and compare data will be applied if they exist on the\n", 
                            "        current view.\n", 
                            "\n", 
                            "        A list of Question instances may be passed as ``questions``, then only\n", 
                            "        the rollup data for these questions will be returned.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        rollups = {}  # returned data\n", 
                            "        input_question_list = []  # input for ansvc\n", 
                            "\n", 
                            "        for question in questions:\n", 
                            "            if not question.is_trendable():\n", 
                            "                continue\n", 
                            "            input_question_list.append(question)\n", 
                            "\n", 
                            "            # if the question has no data (no answers), we want to keep track\n", 
                            "            # that the rollup for this question was at least requested\n", 
                            "            rollups[question.id] = None\n", 
                            "\n", 
                            "        if not input_question_list:\n", 
                            "            # If the survey doesn't have any questions, return an empty rollup\n", 
                            "            # dictionary\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        questions_data = []\n", 
                            "        for question in input_question_list:\n", 
                            "            q_data = {\n", 
                            "                'question_id': question.id,\n", 
                            "                'question_type': {\n", 
                            "                    'family': question.type,\n", 
                            "                    'subtype': question.subtype\n", 
                            "                },\n", 
                            "                'trend_data': {\n", 
                            "                    'trend_by': question.trend_by or default_trend_by,\n", 
                            "                    'first_respondent': first_respondent.id,\n", 
                            "                    'last_respondent': last_respondent.id,\n", 
                            "                    'utc_offset': self.owner.utc_offset\n", 
                            "                }\n", 
                            "            }\n", 
                            "\n", 
                            "            questions_data.append(q_data)\n", 
                            "\n", 
                            "        response = self.request.ansvc.get_questions_responses_trends(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            questions_data,\n", 
                            "            filter_data,\n", 
                            "            compare_data\n", 
                            "        )\n", 
                            "        response = response[self.id]  # unwrap rollups to the top-level of the dict\n", 
                            "\n", 
                            "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
                            "        rollups.update(response)\n", 
                            "\n", 
                            "        return rollups\n", 
                            "\n"
                        ], 
                        "name": "get_questions_responses_trends", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2367850>, 'line_index_start': 1634, 'value': 'rollups', 'line_index_end': 1635, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365e90>, 'target': 'rollups', 'line_index_start': 1587, 'line_index_end': 1587, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365f50>, 'target': 'input_question_list', 'line_index_start': 1588, 'line_index_end': 1589, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23666d0>, 'target': 'questions_data', 'line_index_start': 1604, 'line_index_end': 1604, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2367190>, 'target': 'response', 'line_index_start': 1622, 'line_index_end': 1628, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2367550>, 'target': 'response', 'line_index_start': 1629, 'line_index_end': 1631, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return the whole survey structure.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1690, 
                        "line_index_start": 1636, 
                        "lines": [
                            "    def to_dict(self, include_collectors=False, include_theme=False):\n", 
                            "        \"\"\"\n", 
                            "        Return the whole survey structure.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        survey_data = {\n", 
                            "            'id': self.id,\n", 
                            "            'date_created': self.date_created,\n", 
                            "            'date_modified': self.date_modified,\n", 
                            "            'date_deleted': self.date_deleted,\n", 
                            "            'title': self.title,\n", 
                            "            'nickname': self.nickname,\n", 
                            "            'version': self.version,\n", 
                            "            'num_responses': self.num_responses,\n", 
                            "            'language': self.language,\n", 
                            "            'user_id': self.owner.id,\n", 
                            "            'answers': self._answer_map,\n", 
                            "            'has_panel_page': self.has_panel_page,\n", 
                            "            'question_count': self.question_count,\n", 
                            "            'design_settings': self.design_settings,\n", 
                            "            'theme_settings': self.theme if include_theme else None,\n", 
                            "            'quotas': self.quotas,\n", 
                            "            'page_logic': self.page_logic,\n", 
                            "            'question_logic': self.question_logic,\n", 
                            "            'has_logic': True if (\n", 
                            "                self.page_logic or self.question_logic\n", 
                            "            ) else False,\n", 
                            "            'has_randomization': True if (\n", 
                            "                self.has_page_randomization or\n", 
                            "                self.has_question_randomization\n", 
                            "            ) else False,\n", 
                            "            'mangled_id': self.mangled_id,\n", 
                            "            'preview_link': self.preview_link,\n", 
                            "            'resource_path': self.resource_path\n", 
                            "        }\n", 
                            "\n", 
                            "        if self._populated_pages:\n", 
                            "            survey_data.update({\n", 
                            "                'page_ids': [page.id for page in self.pages],\n", 
                            "                'questions': dict((q.id, q.to_dict()) for q in self.questions),\n", 
                            "                'pages': dict((p.id, p.to_dict()) for p in self.pages)\n", 
                            "            })\n", 
                            "        if self._populated_collectors or include_collectors:\n", 
                            "            survey_data.update({\n", 
                            "                'collectors': [c.to_dict() for c in self.collectors],\n", 
                            "                'has_collector': self.has_collector,\n", 
                            "                'has_email_collector': self.has_email_collector,\n", 
                            "                'has_open_collector': self.has_open_collector,\n", 
                            "                'has_all_closed_collectors': self.has_all_closed_collectors,\n", 
                            "                'has_unconfigured_collector': self.has_unconfigured_collector\n", 
                            "            })\n", 
                            "\n", 
                            "        return survey_data\n", 
                            "\n", 
                            "\n"
                        ], 
                        "name": "to_dict", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x236b550>, 'line_index_start': 1688, 'value': 'survey_data', 'line_index_end': 1690, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9d10>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2367b10>, 'target': 'survey_data', 'line_index_start': 1641, 'line_index_end': 1671, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9d10>, 'targets': []}"
                        ]
                    }
                ], 
                "classes": [], 
                "comments": [], 
                "decorators": [], 
                "docstring": null, 
                "functions": [
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 158, 
                        "line_index_start": 120, 
                        "lines": [
                            "    def __init__(self, request, survey_id):\n", 
                            "        self.request = request\n", 
                            "        self.id = str(survey_id)\n", 
                            "\n", 
                            "        # Holds the survey's dictionary structure\n", 
                            "        self._structure = {}\n", 
                            "\n", 
                            "        self._user_list = []\n", 
                            "        self._user_map = {}\n", 
                            "\n", 
                            "        self._views_list = []\n", 
                            "        self._views_map = {}\n", 
                            "\n", 
                            "        self._export_views_list = []\n", 
                            "        self._export_views_map = {}\n", 
                            "\n", 
                            "        self._page_list = []\n", 
                            "        self._page_map = {}\n", 
                            "        self._page_map_by_index = {}\n", 
                            "\n", 
                            "        self._question_list = []\n", 
                            "        self._question_map = {}\n", 
                            "\n", 
                            "        self._answer_map = {}\n", 
                            "\n", 
                            "        self._export_job_list = []\n", 
                            "        self._export_job_map = {}\n", 
                            "\n", 
                            "        self._collector_list = []\n", 
                            "        self._has_email_collector = False\n", 
                            "        self._has_collector = False\n", 
                            "        self._has_open_collector = False\n", 
                            "        self._has_unconfigured_collector = False\n", 
                            "        self._has_all_closed_collectors = False\n", 
                            "        self._has_configured_audience = False\n", 
                            "\n", 
                            "        self._question_logic = None\n", 
                            "        self._page_logic = None\n", 
                            "\n"
                        ], 
                        "name": "__init__", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22caa10>, 'line_index_start': 121, 'value': 'request', 'line_index_end': 121, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cab10>, 'line_index_start': 122, 'line_index_end': 124, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cac90>, 'line_index_start': 125, 'line_index_end': 126, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cad90>, 'line_index_start': 127, 'line_index_end': 127, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cae90>, 'line_index_start': 128, 'line_index_end': 129, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22caf90>, 'line_index_start': 130, 'line_index_end': 130, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb0d0>, 'line_index_start': 131, 'line_index_end': 132, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb1d0>, 'line_index_start': 133, 'line_index_end': 133, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb2d0>, 'line_index_start': 134, 'line_index_end': 135, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb3d0>, 'line_index_start': 136, 'line_index_end': 136, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb4d0>, 'line_index_start': 137, 'line_index_end': 137, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb5d0>, 'line_index_start': 138, 'line_index_end': 139, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb6d0>, 'line_index_start': 140, 'line_index_end': 140, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb7d0>, 'line_index_start': 141, 'line_index_end': 142, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb8d0>, 'line_index_start': 143, 'line_index_end': 144, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb9d0>, 'line_index_start': 145, 'line_index_end': 145, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbad0>, 'line_index_start': 146, 'line_index_end': 147, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbbd0>, 'line_index_start': 148, 'line_index_end': 148, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbcd0>, 'line_index_start': 149, 'value': 'False', 'line_index_end': 149, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbdd0>, 'line_index_start': 150, 'value': 'False', 'line_index_end': 150, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbed0>, 'line_index_start': 151, 'value': 'False', 'line_index_end': 151, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbfd0>, 'line_index_start': 152, 'value': 'False', 'line_index_end': 152, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc110>, 'line_index_start': 153, 'value': 'False', 'line_index_end': 153, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc210>, 'line_index_start': 154, 'value': 'False', 'line_index_end': 155, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc310>, 'line_index_start': 156, 'value': 'None', 'line_index_end': 156, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc410>, 'line_index_start': 157, 'value': 'None', 'line_index_end': 158, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 165, 
                        "line_index_start": 159, 
                        "lines": [
                            "    def __repr__(self):\n", 
                            "        return \"<%(class)s=%(id)s at 0x%(mem)x>\" % {\n", 
                            "            \"class\": self.__class__.__name__,\n", 
                            "            \"id\": self.id,\n", 
                            "            \"mem\": id(self)\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "__repr__", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 160, 'ast_node': <_ast.Return object at 0x22cc5d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371f50>, 'obj_type': 'return', 'line_index_end': 165}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 180, 
                        "line_index_start": 166, 
                        "lines": [
                            "    def _load_survey(self, survey_data):\n", 
                            "        self._date_created = survey_data['date_created']\n", 
                            "        self._date_modified = survey_data['date_modified']\n", 
                            "        self._date_deleted = survey_data['date_deleted']\n", 
                            "        self._title = survey_data['title']['text']\n", 
                            "        self._nickname = survey_data.get('nickname')\n", 
                            "        self._language_id = survey_data['language_id']\n", 
                            "        self.version = survey_data['version']\n", 
                            "        self.num_responses = survey_data['num_responses']\n", 
                            "        self.question_count = survey_data['question_count']\n", 
                            "        self.has_panel_page = survey_data.get('has_panel_page', False)\n", 
                            "        self._quotas = survey_data.get('quota')\n", 
                            "        self.has_page_randomization = survey_data['page_randomization']['enabled']\n", 
                            "        self._answer_map = {}\n", 
                            "    \n"
                        ], 
                        "name": "_load_survey", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cca90>, 'line_index_start': 167, 'line_index_end': 167, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ccc50>, 'line_index_start': 168, 'line_index_end': 168, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cce10>, 'line_index_start': 169, 'line_index_end': 169, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ccfd0>, 'line_index_start': 170, 'line_index_end': 170, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce290>, 'line_index_start': 171, 'line_index_end': 171, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce450>, 'line_index_start': 172, 'line_index_end': 172, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce610>, 'line_index_start': 173, 'line_index_end': 173, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce7d0>, 'line_index_start': 174, 'line_index_end': 174, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce990>, 'line_index_start': 175, 'line_index_end': 175, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ceb50>, 'line_index_start': 176, 'line_index_end': 176, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ced50>, 'line_index_start': 177, 'line_index_end': 177, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cef10>, 'line_index_start': 178, 'line_index_end': 178, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x254e1d0>, 'line_index_start': 179, 'line_index_end': 180, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 207, 
                        "line_index_start": 181, 
                        "lines": [
                            "    def _set_benchmarkable_flags(self, survey_data):\n", 
                            "        if self.owner.has_benchmarking_feature():\n", 
                            "            # get benchmarkable data. we'll do this per page to minimize the bmsvc calls\n", 
                            "            for page in survey_data['pages']:\n", 
                            "                # get a dict of logical id by question id\n", 
                            "                #   we'll use this dict to update the page data\n", 
                            "                # get the list of logical ids\n", 
                            "                #   we'll use this list to get the benchmarkable info\n", 
                            "                qb_questions = {}\n", 
                            "                logical_ids = []\n", 
                            "                for question in page['questions']:\n", 
                            "                    if question['question_bank']['is_banked']:\n", 
                            "                        qb_questions[question['question_id']] = question['question_bank']['logical_bank_id']\n", 
                            "                        logical_ids.append(qb_questions[question['question_id']])\n", 
                            "                benchmarkable_ids = self.request.bmsvc.is_benchmarkable(logical_ids)\n", 
                            "                # now update the questions\n", 
                            "                for question in page['questions']:\n", 
                            "                    question['is_benchmarkable'] = True if question['question_id'] in qb_questions and\\\n", 
                            "                                                           qb_questions[question['question_id']] in benchmarkable_ids\\\n", 
                            "                                                        else False\n", 
                            "        else:\n", 
                            "            # set all questions as not benchmarkable\n", 
                            "            for page in survey_data['pages']:\n", 
                            "                for question in page['questions']:\n", 
                            "                    question['is_benchmarkable'] = False\n", 
                            "\n", 
                            "    #@prof(depth=1, include_variables=['survey_data'])\n"
                        ], 
                        "name": "_set_benchmarkable_flags", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 230, 
                        "line_index_start": 208, 
                        "lines": [
                            "    def _populate_pages(self):\n", 
                            "        if self._populated_pages:\n", 
                            "            return\n", 
                            "\n", 
                            "        # FIXME: Maybe create Option objects as well?\n", 
                            "        # only include panel if there has been a configured audience\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            load_pages=True,\n", 
                            "            include_panel=self.has_configured_audience\n", 
                            "        )\n", 
                            "        \n", 
                            "        # if the user has benchmarking available, we will set the benchmarking flag for each question as appropriate\n", 
                            "        self._set_benchmarkable_flags(survey_data)\n", 
                            "        \n", 
                            "        if not self._populated_survey:\n", 
                            "            self._populated_survey = True\n", 
                            "            self._load_survey(survey_data)\n", 
                            "\n", 
                            "        self._populated_pages = True\n", 
                            "        self._load_pages(survey_data['pages'])\n", 
                            "\n"
                        ], 
                        "name": "_populate_pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2551250>, 'target': 'survey_data', 'line_index_start': 214, 'line_index_end': 221, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23733d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2551b10>, 'line_index_start': 228, 'value': 'True', 'line_index_end': 228, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23733d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 251, 
                        "line_index_start": 231, 
                        "lines": [
                            "    def _populate_survey(self):\n", 
                            "        if self._populated_survey:\n", 
                            "            return\n", 
                            "\n", 
                            "        # FIXME: Maybe create Option objects as well?\n", 
                            "        # only include panel if there has abeen a configured audience\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            load_pages=False,\n", 
                            "            include_panel=self.has_configured_audience\n", 
                            "        )\n", 
                            "\n", 
                            "        if 'quota' in survey_data:\n", 
                            "            survey_data['quota'] = self.request.ansvc.quota_list(\n", 
                            "                survey_data['survey_id']\n", 
                            "            )['quota']\n", 
                            "\n", 
                            "        self._populated_survey = True\n", 
                            "        self._load_survey(survey_data)\n", 
                            "\n"
                        ], 
                        "name": "_populate_survey", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2551fd0>, 'target': 'survey_data', 'line_index_start': 237, 'line_index_end': 243, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373490>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2552990>, 'line_index_start': 249, 'value': 'True', 'line_index_end': 249, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373490>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2552e50>, 'name': 'property', 'line_index_start': 252, 'line_index_end': 253, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373550>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 257, 
                        "line_index_start": 252, 
                        "lines": [
                            "    @property\n", 
                            "    def title(self):\n", 
                            "        self._populate_survey()\n", 
                            "        return self._title\n", 
                            "\n", 
                            "    #dates appear to be stored in seconds\n"
                        ], 
                        "name": "title", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 255, 'ast_node': <_ast.Return object at 0x2552d90>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373550>, 'obj_type': 'return', 'line_index_end': 257}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2554290>, 'name': 'property', 'line_index_start': 258, 'line_index_end': 259, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373610>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 263, 
                        "line_index_start": 258, 
                        "lines": [
                            "    @property\n", 
                            "    def date_deleted(self):\n", 
                            "        self._populate_survey()\n", 
                            "        if self._date_deleted:\n", 
                            "            return self._date_deleted * 1000\n", 
                            "\n"
                        ], 
                        "name": "date_deleted", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25545d0>, 'name': 'property', 'line_index_start': 264, 'line_index_end': 265, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373690>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 268, 
                        "line_index_start": 264, 
                        "lines": [
                            "    @property\n", 
                            "    def date_created(self):\n", 
                            "        self._populate_survey()\n", 
                            "        return self._date_created * 1000\n", 
                            "\n"
                        ], 
                        "name": "date_created", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 267, 'ast_node': <_ast.Return object at 0x2554490>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373690>, 'obj_type': 'return', 'line_index_end': 268}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25549d0>, 'name': 'property', 'line_index_start': 269, 'line_index_end': 270, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373750>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 274, 
                        "line_index_start": 269, 
                        "lines": [
                            "    @property\n", 
                            "    def date_modified(self):\n", 
                            "        self._populate_survey()\n", 
                            "        if self._date_modified:\n", 
                            "            return self._date_modified * 1000\n", 
                            "\n"
                        ], 
                        "name": "date_modified", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2554c90>, 'name': 'property', 'line_index_start': 275, 'line_index_end': 276, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23737d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 279, 
                        "line_index_start": 275, 
                        "lines": [
                            "    @property\n", 
                            "    def quotas(self):\n", 
                            "        self._populate_survey()\n", 
                            "        return self._quotas\n", 
                            "\n"
                        ], 
                        "name": "quotas", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 278, 'ast_node': <_ast.Return object at 0x2554bd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23737d0>, 'obj_type': 'return', 'line_index_end': 279}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2556110>, 'name': 'property', 'line_index_start': 280, 'line_index_end': 281, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373890>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 287, 
                        "line_index_start": 280, 
                        "lines": [
                            "    @property\n", 
                            "    def nickname(self):\n", 
                            "        self._populate_survey()\n", 
                            "        if self._nickname:\n", 
                            "            return self._nickname\n", 
                            "\n", 
                            "        return self._title\n", 
                            "\n"
                        ], 
                        "name": "nickname", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 286, 'ast_node': <_ast.Return object at 0x2556050>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373890>, 'obj_type': 'return', 'line_index_end': 287}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2556610>, 'name': 'property', 'line_index_start': 288, 'line_index_end': 289, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373950>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 295, 
                        "line_index_start": 288, 
                        "lines": [
                            "    @property\n", 
                            "    def mangled_id(self):\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
                            "            )\n", 
                            "        return encrypt_mangled(\"SurveyID=%s&\" % self.id)\n", 
                            "\n"
                        ], 
                        "name": "mangled_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 294, 'ast_node': <_ast.Return object at 0x2556450>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373950>, 'obj_type': 'return', 'line_index_end': 295}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2556f10>, 'name': 'property', 'line_index_start': 296, 'line_index_end': 297, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 312, 
                        "line_index_start": 296, 
                        "lines": [
                            "    @property\n", 
                            "    def preview_link(self):\n", 
                            "        query_string = {\n", 
                            "            's': self.id,\n", 
                            "            'mode': 3\n", 
                            "        }\n", 
                            "        query_string = urlencode(query_string)\n", 
                            "        query_string = urlencode({\n", 
                            "            'sm': encrypt_mangled(query_string),\n", 
                            "            'PREVIEW_MODE': 'DO_NOT_USE_THIS_LINK_FOR_COLLECTION',\n", 
                            "        })\n", 
                            "\n", 
                            "        return \"%(path)s?%(qs)s\" % {\n", 
                            "            \"path\": '/s.aspx',\n", 
                            "            \"qs\": query_string\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "preview_link", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 308, 'ast_node': <_ast.Return object at 0x2556d10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'obj_type': 'return', 'line_index_end': 312}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2556710>, 'target': 'query_string', 'line_index_start': 298, 'line_index_end': 301, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2556910>, 'target': 'query_string', 'line_index_start': 302, 'line_index_end': 302, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2556a50>, 'target': 'query_string', 'line_index_start': 303, 'line_index_end': 307, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2558310>, 'name': 'property', 'line_index_start': 313, 'line_index_end': 314, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373b90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 320, 
                        "line_index_start": 313, 
                        "lines": [
                            "    @property\n", 
                            "    def has_question_randomization(self):\n", 
                            "        for page in self.pages:\n", 
                            "            if page.has_question_randomization:\n", 
                            "                return True\n", 
                            "\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_question_randomization", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2558290>, 'line_index_start': 319, 'value': 'False', 'line_index_end': 320, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373b90>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25586d0>, 'name': 'property', 'line_index_start': 321, 'line_index_end': 322, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373c50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 327, 
                        "line_index_start": 321, 
                        "lines": [
                            "    @property\n", 
                            "    def has_random_assignment(self):\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                return True\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_random_assignment", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2558650>, 'line_index_start': 326, 'value': 'False', 'line_index_end': 327, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373c50>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 363, 
                        "line_index_start": 328, 
                        "lines": [
                            "    def _populate_collectors(self):\n", 
                            "        if self._populated_collectors:\n", 
                            "            return\n", 
                            "\n", 
                            "        collector_list = self.request.collectorsvc.get_collector_list(\n", 
                            "            int(self.owner.id),\n", 
                            "            int(self.id)\n", 
                            "        )\n", 
                            "\n", 
                            "        self._has_all_closed_collectors = True\n", 
                            "        for collector_data in collector_list:\n", 
                            "            collector = Collector(self.request)\n", 
                            "            collector.load(collector_data)\n", 
                            "            if collector.is_email:\n", 
                            "                self._has_email_collector = True\n", 
                            "\n", 
                            "            if collector.is_open or collector.is_clearing_responses:\n", 
                            "                self._has_open_collector = True\n", 
                            "\n", 
                            "            if collector.is_new:\n", 
                            "                self._has_unconfigured_collector = True\n", 
                            "            elif collector.is_audience:\n", 
                            "                self._has_configured_audience = True\n", 
                            "\n", 
                            "            if not (collector.is_closed or collector.is_archived):\n", 
                            "                self._has_all_closed_collectors = False\n", 
                            "\n", 
                            "            self._collector_list.append(collector)\n", 
                            "\n", 
                            "        if self._collector_list:\n", 
                            "            self._has_collector = True\n", 
                            "        else:\n", 
                            "            self._has_all_closed_collectors = False\n", 
                            "\n", 
                            "        self._populated_collectors = True\n", 
                            "\n"
                        ], 
                        "name": "_populate_collectors", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25588d0>, 'target': 'collector_list', 'line_index_start': 332, 'line_index_end': 336, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2558cd0>, 'line_index_start': 337, 'value': 'True', 'line_index_end': 337, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2569090>, 'line_index_start': 362, 'value': 'True', 'line_index_end': 363, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373d10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569410>, 'name': 'property', 'line_index_start': 364, 'line_index_end': 365, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373e10>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 368, 
                        "line_index_start": 364, 
                        "lines": [
                            "    @property\n", 
                            "    def has_email_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_email_collector\n", 
                            "\n"
                        ], 
                        "name": "has_email_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 367, 'ast_node': <_ast.Return object at 0x2569350>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373e10>, 'obj_type': 'return', 'line_index_end': 368}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25696d0>, 'name': 'property', 'line_index_start': 369, 'line_index_end': 370, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373ed0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 373, 
                        "line_index_start": 369, 
                        "lines": [
                            "    @property\n", 
                            "    def has_open_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_open_collector\n", 
                            "\n"
                        ], 
                        "name": "has_open_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 372, 'ast_node': <_ast.Return object at 0x2569610>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373ed0>, 'obj_type': 'return', 'line_index_end': 373}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569990>, 'name': 'property', 'line_index_start': 374, 'line_index_end': 375, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373f90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 378, 
                        "line_index_start": 374, 
                        "lines": [
                            "    @property\n", 
                            "    def has_all_closed_collectors(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_all_closed_collectors\n", 
                            "\n"
                        ], 
                        "name": "has_all_closed_collectors", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 377, 'ast_node': <_ast.Return object at 0x25698d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373f90>, 'obj_type': 'return', 'line_index_end': 378}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569c50>, 'name': 'property', 'line_index_start': 379, 'line_index_end': 380, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379090>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 383, 
                        "line_index_start": 379, 
                        "lines": [
                            "    @property\n", 
                            "    def has_unconfigured_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_unconfigured_collector\n", 
                            "\n"
                        ], 
                        "name": "has_unconfigured_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 382, 'ast_node': <_ast.Return object at 0x2569b90>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379090>, 'obj_type': 'return', 'line_index_end': 383}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569f10>, 'name': 'property', 'line_index_start': 384, 'line_index_end': 385, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379150>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 388, 
                        "line_index_start": 384, 
                        "lines": [
                            "    @property\n", 
                            "    def has_configured_audience(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_configured_audience\n", 
                            "\n"
                        ], 
                        "name": "has_configured_audience", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 387, 'ast_node': <_ast.Return object at 0x2569e50>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379150>, 'obj_type': 'return', 'line_index_end': 388}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256a210>, 'name': 'property', 'line_index_start': 389, 'line_index_end': 390, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379210>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 393, 
                        "line_index_start": 389, 
                        "lines": [
                            "    @property\n", 
                            "    def has_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_collector\n", 
                            "\n"
                        ], 
                        "name": "has_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 392, 'ast_node': <_ast.Return object at 0x256a150>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379210>, 'obj_type': 'return', 'line_index_end': 393}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256a4d0>, 'name': 'property', 'line_index_start': 394, 'line_index_end': 395, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23792d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 398, 
                        "line_index_start": 394, 
                        "lines": [
                            "    @property\n", 
                            "    def collectors(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._collector_list\n", 
                            "\n"
                        ], 
                        "name": "collectors", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 397, 'ast_node': <_ast.Return object at 0x256a410>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23792d0>, 'obj_type': 'return', 'line_index_end': 398}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Get the owners (user IDs) for this survey.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 419, 
                        "line_index_start": 399, 
                        "lines": [
                            "    def _populate_owners(self):\n", 
                            "        \"\"\"\n", 
                            "        Get the owners (user IDs) for this survey.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if self._populated_owners:\n", 
                            "            return\n", 
                            "\n", 
                            "        try:\n", 
                            "            access_list = self.request.svysvc.survey_access_list(self.id)\n", 
                            "            self._populated_owners = True\n", 
                            "        except ServiceResponseError:\n", 
                            "            # Survey might not be found\n", 
                            "            return\n", 
                            "\n", 
                            "        for user_id in access_list['users']:\n", 
                            "            user = User(self.request, user_id)\n", 
                            "            self._user_list.append(user)\n", 
                            "            self._user_map[user.id] = user\n", 
                            "            user.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "_populate_owners", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 423, 
                        "line_index_start": 420, 
                        "lines": [
                            "    def is_owner(self, user):\n", 
                            "        self._populate_owners()\n", 
                            "        return str(user.id) in self._user_map\n", 
                            "\n"
                        ], 
                        "name": "is_owner", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 422, 'ast_node': <_ast.Return object at 0x256c590>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23793d0>, 'obj_type': 'return', 'line_index_end': 423}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256c9d0>, 'name': 'property', 'line_index_start': 424, 'line_index_end': 425, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379450>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 427, 
                        "line_index_start": 424, 
                        "lines": [
                            "    @property\n", 
                            "    def owner(self):\n", 
                            "        return self.owners[0]\n", 
                            "\n"
                        ], 
                        "name": "owner", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 426, 'ast_node': <_ast.Return object at 0x256c850>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379450>, 'obj_type': 'return', 'line_index_end': 427}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256cc90>, 'name': 'property', 'line_index_start': 428, 'line_index_end': 429, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379510>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 432, 
                        "line_index_start": 428, 
                        "lines": [
                            "    @property\n", 
                            "    def owners(self):\n", 
                            "        self._populate_owners()\n", 
                            "        return self._user_list\n", 
                            "\n"
                        ], 
                        "name": "owners", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 431, 'ast_node': <_ast.Return object at 0x256cbd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379510>, 'obj_type': 'return', 'line_index_end': 432}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 451, 
                        "line_index_start": 433, 
                        "lines": [
                            "    def _load_pages(self, pages):\n", 
                            "        question_position = 1\n", 
                            "        page_position = 1\n", 
                            "        for page_data in pages:\n", 
                            "            page = Page(self.request)\n", 
                            "            page.load(page_data)\n", 
                            "            page.position = page_position\n", 
                            "            page_position += 1\n", 
                            "            self.add_page(page)\n", 
                            "            for question in page.questions:\n", 
                            "                # Question numbers aren't stored with presentation context\n", 
                            "                # in the DB, we have to correct for this.\n", 
                            "                question.position = question_position\n", 
                            "                if not question.is_presentation() or \\\n", 
                            "                    question.has_random_assignment:\n", 
                            "                        question_position += 1\n", 
                            "                self.add_question(question)\n", 
                            "                self._load_answers(question.answers)\n", 
                            "\n"
                        ], 
                        "name": "_load_pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x256cdd0>, 'target': 'question_position', 'line_index_start': 434, 'value': 1, 'line_index_end': 434, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23795d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x256ce90>, 'target': 'page_position', 'line_index_start': 435, 'value': 1, 'line_index_end': 435, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23795d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 463, 
                        "line_index_start": 452, 
                        "lines": [
                            "    def _load_answers(self, answers):\n", 
                            "        for dim, dim_answers in iteritems(answers):\n", 
                            "            for answer in dim_answers:\n", 
                            "                self._answer_map[answer['answer_id']] = answer\n", 
                            "                answer['id'] = str(answer['answer_id'])\n", 
                            "                del answer['answer_id']\n", 
                            "                if 'items' in answer:\n", 
                            "                    for menu_item in answer['items']:\n", 
                            "                        self._answer_map[menu_item['answer_id']] = menu_item\n", 
                            "                        menu_item['id'] = str(menu_item['answer_id'])\n", 
                            "                        del menu_item['answer_id']\n", 
                            "\n"
                        ], 
                        "name": "_load_answers", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Get the views for this survey.\n\nIf no view exists, create default and current views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 570, 
                        "line_index_start": 464, 
                        "lines": [
                            "    def _populate_views(self):\n", 
                            "        \"\"\"\n", 
                            "        Get the views for this survey.\n", 
                            "\n", 
                            "        If no view exists, create default and current views.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if self._populated_views:\n", 
                            "            return\n", 
                            "\n", 
                            "        # Can't get data if ID is None\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to get views: survey has no ID.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        data = self.request.ansvc.list_views(self.id)\n", 
                            "        views = data['view_schemas']\n", 
                            "\n", 
                            "        # WARNING: This must be set before ``add_view()`` and\n", 
                            "        # ``get_views_by_id()`` gets called again lower down\n", 
                            "        self._populated_views = True\n", 
                            "\n", 
                            "        # Build view objects\n", 
                            "        self._views_list = []\n", 
                            "        self._views_map = {}\n", 
                            "        for view_id, view_data in iteritems(views):\n", 
                            "            view_type = view_data['view_type']\n", 
                            "            view_data = json.loads(view_data['view_schema'])\n", 
                            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                            "            # None when created the first time as we don't yet have an ID from\n", 
                            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                            "            # the view_id inside the view_schema is still None and wasn't\n", 
                            "            # assigned with its ID. For this to be fixed, we should not store\n", 
                            "            # the view_id within the view_schema. Or we can augment the dict\n", 
                            "            # such as here. This should be fixed when the view schema will be\n", 
                            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                            "            view_data['view_id'] = view_id\n", 
                            "            view_data['type'] = view_type\n", 
                            "\n", 
                            "            view = View(self.request, self)\n", 
                            "            view.load(view_data)\n", 
                            "            try:\n", 
                            "                self.add_view(view)\n", 
                            "            except (\n", 
                            "                CurrentViewAlreadyExistsError,\n", 
                            "                DefaultViewAlreadyExistsError\n", 
                            "            ):\n", 
                            "                log.warning(\n", 
                            "                    \"Name=DuplicateCurrentDefaultView\",\n", 
                            "                    \"ViewData=%s\" % view_data\n", 
                            "                )\n", 
                            "                # Force deletion because we normally can't delete a default or\n", 
                            "                # current view.\n", 
                            "                view.survey = self  # backref required for deletion\n", 
                            "                view.delete(force=True)\n", 
                            "\n", 
                            "        # Call .fix() only after all views have been loaded into the survey\n", 
                            "        # otherwise a view that depends on a not-yet-loaded view will\n", 
                            "        # provoke a traceback (GORILLA-2216).\n", 
                            "        for view in self.views:\n", 
                            "            if view.fix():\n", 
                            "                view.save()\n", 
                            "\n", 
                            "        if self.default_view is None:\n", 
                            "            log.info(\"Creating default view for survey=%s\", self.id)\n", 
                            "            default_view = self._create_default_view()\n", 
                            "            default_view.save()\n", 
                            "            self.add_view(default_view)\n", 
                            "\n", 
                            "        if self.current_view is None:\n", 
                            "            log.info(\"Creating current view for survey=%s\", self.id)\n", 
                            "            current_view = self._create_current_view()\n", 
                            "            current_view.selected_view = self.default_view\n", 
                            "            current_view.save()\n", 
                            "            self.add_view(current_view)\n", 
                            "\n", 
                            "        if self.quotas and self.default_view.quota_view_metadata is None:\n", 
                            "            log.info(\"Creating quota view for survey=%s\", self.id)\n", 
                            "            self._create_quota_views()\n", 
                            "        \n", 
                            "        if self.has_random_assignment and self.default_view.random_assignment_view_metadata is None:\n", 
                            "            log.info(\"Creating random assignment view for survey=%s\", self.id)\n", 
                            "            self._create_random_assignment_views()\n", 
                            "         \n", 
                            "        if self.has_configured_audience and \\\n", 
                            "            self.default_view.audience_view_metadata is None:\n", 
                            "                self._create_audience_view()\n", 
                            "\n", 
                            "        # Set the selected view on the current view.\n", 
                            "        selected_view_id = self.current_view.selected_view_id\n", 
                            "        selected_view = self.get_view_by_id(selected_view_id)\n", 
                            "        if selected_view is None:\n", 
                            "            # Make sure the current view has its selected view pointing to an\n", 
                            "            # existing view. If the selected view doesn't exist (see\n", 
                            "            # GORILLA-1198 for details), re-point the current view's selected\n", 
                            "            # view to be the default view.\n", 
                            "            log.warning(\n", 
                            "                \"Name=SelectedViewNotFound\",\n", 
                            "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
                            "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
                            "            )\n", 
                            "            selected_view = self.current_view.selected_view = self.default_view\n", 
                            "            self.current_view.save()\n", 
                            "        assert selected_view.id == self.current_view.selected_view_id\n", 
                            "        self.current_view.selected_view = selected_view\n", 
                            "\n"
                        ], 
                        "name": "_populate_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570590>, 'target': 'data', 'line_index_start': 480, 'line_index_end': 480, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25707d0>, 'target': 'views', 'line_index_start': 481, 'line_index_end': 484, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570950>, 'line_index_start': 485, 'value': 'True', 'line_index_end': 487, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570a50>, 'line_index_start': 488, 'line_index_end': 488, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570b50>, 'line_index_start': 489, 'line_index_end': 489, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2575e10>, 'target': 'selected_view_id', 'line_index_start': 554, 'line_index_end': 554, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2575f50>, 'target': 'selected_view', 'line_index_start': 555, 'line_index_end': 555, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2576a90>, 'line_index_start': 569, 'value': 'selected_view', 'line_index_end': 570, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Get the views for this survey.\n\nIf no view exists, create default and current views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 668, 
                        "line_index_start": 571, 
                        "lines": [
                            "    def _populate_shared_views(self):\n", 
                            "        \"\"\"\n", 
                            "        Get the views for this survey.\n", 
                            "\n", 
                            "        If no view exists, create default and current views.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if self._populated_shared_views:\n", 
                            "            return\n", 
                            "\n", 
                            "        # Can't get data if ID is None\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to get shared views: survey has no ID.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        data = self.request.ansvc.list_shared_views(self.id)\n", 
                            "        views = data['view_schemas']\n", 
                            "\n", 
                            "        # WARNING: This must be set before ``add_view()`` and\n", 
                            "        # ``get_views_by_id()`` gets called again lower down\n", 
                            "        self._populated_shared_views = True\n", 
                            "\n", 
                            "        # Build view objects\n", 
                            "        self._shared_views_list = []\n", 
                            "        self._shared_views_map = {}\n", 
                            "\n", 
                            "        for view_id, view_data in iteritems(views):\n", 
                            "            view_type = view_data['view_type']\n", 
                            "            view_data = json.loads(view_data['view_schema'])\n", 
                            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                            "            # None when created the first time as we don't yet have an ID from\n", 
                            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                            "            # the view_id inside the view_schema is still None and wasn't\n", 
                            "            # assigned with its ID. For this to be fixed, we should not store\n", 
                            "            # the view_id within the view_schema. Or we can augment the dict\n", 
                            "            # such as here. This should be fixed when the view schema will be\n", 
                            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                            "            view_data['view_id'] = view_id\n", 
                            "            view_data['type'] = view_type\n", 
                            "\n", 
                            "            view = View(self.request, self)\n", 
                            "            view.load(view_data)\n", 
                            "            view.survey = self\n", 
                            "\n", 
                            "            try:\n", 
                            "                self._shared_views_list.append(view)\n", 
                            "                self._shared_views_map[view_id] = view\n", 
                            "            except (\n", 
                            "                CurrentViewAlreadyExistsError,\n", 
                            "                DefaultViewAlreadyExistsError\n", 
                            "            ):\n", 
                            "                log.warning(\n", 
                            "                    \"Name=DuplicateCurrentDefaultView\",\n", 
                            "                    \"ViewData=%s\" % view_data\n", 
                            "                )\n", 
                            "                # Force deletion because we normally can't delete a default or\n", 
                            "                # current view.\n", 
                            "                view.delete(force=True)\n", 
                            "\n", 
                            "        # Call .fix() only after all views have been loaded into the survey\n", 
                            "        # otherwise a view that depends on a not-yet-loaded view will\n", 
                            "        # provoke a traceback (GORILLA-2216).\n", 
                            "        for view in self.views:\n", 
                            "            if view.fix():\n", 
                            "                view.save()\n", 
                            "\n", 
                            "        if self.default_view is None:\n", 
                            "            log.info(\"Creating default view for survey=%s\" % self.id)\n", 
                            "            default_view = self._create_default_view()\n", 
                            "            default_view.save()\n", 
                            "            self.add_view(default_view)\n", 
                            "\n", 
                            "        if self.current_view is None:\n", 
                            "            log.info(\"Creating current view for survey=%s\" % self.id)\n", 
                            "            current_view = self._create_current_view()\n", 
                            "            current_view.selected_view = self.default_view\n", 
                            "            current_view.save()\n", 
                            "            self.add_view(current_view)\n", 
                            "\n", 
                            "        # Set the selected view on the current view.\n", 
                            "        selected_view_id = self.current_view.selected_view_id\n", 
                            "        selected_view = self.get_view_by_id(selected_view_id)\n", 
                            "        if selected_view is None:\n", 
                            "            # Make sure the current view has its selected view pointing to an\n", 
                            "            # existing view. If the selected view doesn't exist (see\n", 
                            "            # GORILLA-1198 for details), re-point the current view's selected\n", 
                            "            # view to be the default view.\n", 
                            "            log.warning(\n", 
                            "                \"Name=SelectedViewNotFound\",\n", 
                            "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
                            "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
                            "            )\n", 
                            "            selected_view = self.current_view.selected_view = self.default_view\n", 
                            "            self.current_view.save()\n", 
                            "        assert selected_view.id == self.current_view.selected_view_id\n", 
                            "        self.current_view.selected_view = selected_view\n", 
                            "\n"
                        ], 
                        "name": "_populate_shared_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578090>, 'target': 'data', 'line_index_start': 587, 'line_index_end': 587, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25782d0>, 'target': 'views', 'line_index_start': 588, 'line_index_end': 591, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578450>, 'line_index_start': 592, 'value': 'True', 'line_index_end': 594, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578550>, 'line_index_start': 595, 'line_index_end': 595, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578650>, 'line_index_start': 596, 'line_index_end': 597, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257be10>, 'target': 'selected_view_id', 'line_index_start': 652, 'line_index_end': 652, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257bf50>, 'target': 'selected_view', 'line_index_start': 653, 'line_index_end': 653, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257ca90>, 'line_index_start': 667, 'value': 'selected_view', 'line_index_end': 668, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 709, 
                        "line_index_start": 669, 
                        "lines": [
                            "    def _populate_export_views(self):\n", 
                            "        if self._populated_export_views:\n", 
                            "            return\n", 
                            "\n", 
                            "        # Can't get data if ID is None\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to get views: survey has no ID.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        data = self.request.ansvc.list_export_views(self.id)\n", 
                            "        views = data['view_schemas']\n", 
                            "\n", 
                            "        # WARNING: This must be set before ``add_view()`` and\n", 
                            "        # ``get_views_by_id()`` gets called again lower down\n", 
                            "        self._populated_export_views = True\n", 
                            "\n", 
                            "        # Build view objects\n", 
                            "        self._export_views_list = []\n", 
                            "        self._export_views_map = {}\n", 
                            "        for view_id, view_data in iteritems(views):\n", 
                            "            view_type = view_data['view_type']\n", 
                            "            view_data = json.loads(view_data['view_schema'])\n", 
                            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                            "            # None when created the first time as we don't yet have an ID from\n", 
                            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                            "            # the view_id inside the view_schema is still None and wasn't\n", 
                            "            # assigned with its ID. For this to be fixed, we should not store\n", 
                            "            # the view_id within the view_schema. Or we can augment the dict\n", 
                            "            # such as here. This should be fixed when the view schema will be\n", 
                            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                            "            view_data['view_id'] = view_id\n", 
                            "            view_data['type'] = view_type\n", 
                            "\n", 
                            "            view = View(self.request, self)\n", 
                            "            view.load(view_data)\n", 
                            "            self.add_export_view(view)\n", 
                            "\n", 
                            "            if view.fix():\n", 
                            "                view.save()\n", 
                            "\n"
                        ], 
                        "name": "_populate_export_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257cfd0>, 'target': 'data', 'line_index_start': 679, 'line_index_end': 679, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e250>, 'target': 'views', 'line_index_start': 680, 'line_index_end': 683, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e3d0>, 'line_index_start': 684, 'value': 'True', 'line_index_end': 686, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e4d0>, 'line_index_start': 687, 'line_index_end': 687, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e5d0>, 'line_index_start': 688, 'line_index_end': 688, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 721, 
                        "line_index_start": 710, 
                        "lines": [
                            "    def _create_current_view(self):\n", 
                            "        view = View(self.request, self)\n", 
                            "        view_data = view.to_dict()\n", 
                            "        view_data['is_current'] = True\n", 
                            "        view_data['is_default'] = False\n", 
                            "        view_data['name'] = \"Current View\"\n", 
                            "        view_data['survey_id'] = self.id\n", 
                            "        view_data['type'] = 'standard'\n", 
                            "        view.load(view_data)\n", 
                            "        self.add_view(view)\n", 
                            "        return view\n", 
                            "\n"
                        ], 
                        "name": "_create_current_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2581410>, 'line_index_start': 720, 'value': 'view', 'line_index_end': 721, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257f690>, 'target': 'view', 'line_index_start': 711, 'line_index_end': 711, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257f850>, 'target': 'view_data', 'line_index_start': 712, 'line_index_end': 712, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257f990>, 'line_index_start': 713, 'value': 'True', 'line_index_end': 713, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257fb10>, 'line_index_start': 714, 'value': 'False', 'line_index_end': 714, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257fc90>, 'line_index_start': 715, 'value': 'Current View', 'line_index_end': 715, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257fe10>, 'line_index_start': 716, 'line_index_end': 716, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257ffd0>, 'line_index_start': 717, 'value': 'standard', 'line_index_end': 717, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 735, 
                        "line_index_start": 722, 
                        "lines": [
                            "    def _create_default_view(self):\n", 
                            "        view = View(self.request, self)\n", 
                            "        view_data = view.to_dict()\n", 
                            "        view_data['is_current'] = False\n", 
                            "        view_data['is_default'] = True\n", 
                            "        view_data['name'] = View.DEFAULT_VIEW_NAME\n", 
                            "        view_data['survey_id'] = self.id\n", 
                            "        view_data['type'] = 'standard'\n", 
                            "        view_data['page'] = 'all'\n", 
                            "\n", 
                            "        view.load(view_data)\n", 
                            "        self.add_view(view)\n", 
                            "        return view\n", 
                            "\n"
                        ], 
                        "name": "_create_default_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2582490>, 'line_index_start': 734, 'value': 'view', 'line_index_end': 735, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581550>, 'target': 'view', 'line_index_start': 723, 'line_index_end': 723, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581710>, 'target': 'view_data', 'line_index_start': 724, 'line_index_end': 724, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581850>, 'line_index_start': 725, 'value': 'False', 'line_index_end': 725, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25819d0>, 'line_index_start': 726, 'value': 'True', 'line_index_end': 726, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581b50>, 'line_index_start': 727, 'line_index_end': 727, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581d10>, 'line_index_start': 728, 'line_index_end': 728, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581ed0>, 'line_index_start': 729, 'value': 'standard', 'line_index_end': 729, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2582090>, 'line_index_start': 730, 'value': 'all', 'line_index_end': 731, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 798, 
                        "line_index_start": 736, 
                        "lines": [
                            "    def _create_quota_views(self):\n", 
                            "        if 'equations' not in self.quotas:\n", 
                            "            # A user can create part of a quota and not implement it so the\n", 
                            "            # survey has quotas but no equations. If so, we don't want to create\n", 
                            "            # the quota views until they finish creating the quota.\n", 
                            "            return\n", 
                            "        quota_question_map = self._translate_quotas()\n", 
                            "        for quota_group in self.quotas['equations']:\n", 
                            "            # each quota group has it's own view, and each quota groupd can have\n", 
                            "            # multiple questions and/or question answer option. The metadata,\n", 
                            "            # qna rules and completeness rule, are added to their quota view.\n", 
                            "            quota_view = View(self.request, self)\n", 
                            "            quota_view.survey = self\n", 
                            "            quota_view_data = quota_view.to_dict()\n", 
                            "            quota_view_data['name'] = quota_group['display_label']\n", 
                            "            quota_view_data['is_current'] = False\n", 
                            "            quota_view_data['is_default'] = False\n", 
                            "            quota_view_data['survey_id'] = self.id\n", 
                            "            quota_view_data['type'] = 'standard'\n", 
                            "            quota_view.load(quota_view_data)\n", 
                            "            quota_view.save()\n", 
                            "            self.add_view(quota_view)\n", 
                            "            for rules in quota_group['variables']:\n", 
                            "                # iterating through the the equation groups and using our map\n", 
                            "                # to get the question ids\n", 
                            "                question_option_group = rules['quota_question_option_group_id']\n", 
                            "                question_info = quota_question_map[question_option_group]\n", 
                            "                metadata_item = {\n", 
                            "                    'key': 'rule_filter_qna',\n", 
                            "                    'metadata_id': None,\n", 
                            "                    'option_id': None,\n", 
                            "                    'question_id': None,\n", 
                            "                    'view_id': quota_view.id,\n", 
                            "                    'value': {\n", 
                            "                        'rule_type': 'qna',\n", 
                            "                        'selected': True,\n", 
                            "                        'secondary_id': str(question_info['question_id']),\n", 
                            "                        'rows': {}\n", 
                            "                    }\n", 
                            "                }\n", 
                            "                for row in question_info['question_option_ids']:\n", 
                            "                    #this is for the answer options that are selected\n", 
                            "                    metadata_item['value'][\"rows\"][str(row)] = True\n", 
                            "                quota_view.add_or_update_metadata_item(metadata_item)\n", 
                            "            # completeness rule so we don't include overquota and disqualified\n", 
                            "            completeness_metadata = {\n", 
                            "                'key': 'rule_filter_completeness',\n", 
                            "                'value': {\n", 
                            "                    'rule_type': 'completeness',\n", 
                            "                    'rows': {\n", 
                            "                        'completely': True\n", 
                            "                    },\n", 
                            "                    'selected': True\n", 
                            "                },\n", 
                            "                'view_id': quota_view.id,\n", 
                            "                'metadata_id': None,\n", 
                            "                'option_id': None,\n", 
                            "                'question_id': None\n", 
                            "            }\n", 
                            "            quota_view.add_or_update_metadata_item(completeness_metadata)\n", 
                            "            quota_view.save_metadata()\n", 
                            "        self._add_autocreated_view_metadata(\"quota_views_created\")\n", 
                            "\n"
                        ], 
                        "name": "_create_quota_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2582750>, 'target': 'quota_question_map', 'line_index_start': 742, 'line_index_end': 742, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a11d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 855, 
                        "line_index_start": 799, 
                        "lines": [
                            "    def _create_random_assignment_views(self):\n", 
                            "        for ra in self.random_assignment_questions:\n", 
                            "            # each quota group has it's own view, and each quota groupd can have\n", 
                            "            # multiple questions and/or question answer option. The metadata,\n", 
                            "            # qna rules and completeness rule, are added to their quota view.\n", 
                            "\n", 
                            "            # We currently don't allow for compares on open_ended questions\n", 
                            "            if ra.type == 'open_ended' or \\\n", 
                            "               ra.type == 'demographic' or \\\n", 
                            "               ra.type == 'datetime':\n", 
                            "                continue\n", 
                            "            random_assignment_view = View(self.request, self)\n", 
                            "            random_assignment_view.survey = self\n", 
                            "            random_assignment_view_data = random_assignment_view.to_dict()\n", 
                            "\n", 
                            "            if len(ra.heading) > 0: \n", 
                            "                random_assignment_view_data['name'] = ra.heading\n", 
                            "            else:\n", 
                            "                random_assignment_view_data['name'] = \"Q%s A/B Test\" % (ra.position)\n", 
                            "\n", 
                            "            random_assignment_view_data['is_current'] = False\n", 
                            "            random_assignment_view_data['is_default'] = False\n", 
                            "            random_assignment_view_data['survey_id'] = self.id\n", 
                            "            random_assignment_view_data['type'] = 'standard'\n", 
                            "            random_assignment_view.load(random_assignment_view_data)\n", 
                            "            random_assignment_view.save()\n", 
                            "            self.add_view(random_assignment_view)\n", 
                            "            rows = {}\n", 
                            "            for rule in ra.random_assignment_list:\n", 
                            "                variable_id = rule['variable_id']\n", 
                            "                rows[str(variable_id)] = True\n", 
                            "                \n", 
                            "            # iterating through the the equation groups and using our map\n", 
                            "            # to get the question ids\n", 
                            "            metadata_item = {\n", 
                            "                'key': 'rule_compare_random_assignment',\n", 
                            "                'metadata_id': None,\n", 
                            "                'option_id': None,\n", 
                            "                'question_id': None,\n", 
                            "                'request': self.request,\n", 
                            "                'value': {\n", 
                            "                    'custom_heading': None,#rule['heading'],\n", 
                            "                    'family': ra.type,\n", 
                            "                    'subtype': ra.subtype,\n", 
                            "                    'question_id': int(ra.id),\n", 
                            "                    'rule_type': 'random_assignment',\n", 
                            "                    'selected': True,\n", 
                            "                    'rows': rows,\n", 
                            "                    'is_compare_rule': True,\n", 
                            "                },\n", 
                            "                'view_id': random_assignment_view.id,\n", 
                            "                'view': random_assignment_view,\n", 
                            "            }\n", 
                            "            random_assignment_view.add_or_update_metadata_item(metadata_item)\n", 
                            "            random_assignment_view.save_metadata()\n", 
                            "        self._add_autocreated_view_metadata(\"random_assignment_views_created\")\n", 
                            "\n"
                        ], 
                        "name": "_create_random_assignment_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 876, 
                        "line_index_start": 856, 
                        "lines": [
                            "    def _translate_quotas(self):\n", 
                            "        # must only be called on surveys with quotas!!\n", 
                            "        # AnSvc seperates the question option ids and question ids from the\n", 
                            "        # equations. We need to create a map for the equation group ids\n", 
                            "        # to the question ids, and selected question option ids.\n", 
                            "        quotas_questions = self.quotas['questions']\n", 
                            "        quota_question_map = {}\n", 
                            "        for question in quotas_questions:\n", 
                            "            question_id = question['question_id']\n", 
                            "            for options in question['option_groups']:\n", 
                            "                option_group_id = options['quota_question_option_group_id']\n", 
                            "                quota_question_map[option_group_id] = {\n", 
                            "                    'question_id': question_id,\n", 
                            "                    'question_option_ids': []\n", 
                            "                }\n", 
                            "                quota_question = quota_question_map[option_group_id]\n", 
                            "                question_option_ids = quota_question['question_option_ids']\n", 
                            "                for option in options['options']:\n", 
                            "                    question_option_ids.append(option['question_option_id'])\n", 
                            "        return quota_question_map\n", 
                            "\n"
                        ], 
                        "name": "_translate_quotas", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x258c550>, 'line_index_start': 875, 'value': 'quota_question_map', 'line_index_end': 876, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1290>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258a450>, 'target': 'quotas_questions', 'line_index_start': 861, 'line_index_end': 861, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1290>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258a610>, 'target': 'quota_question_map', 'line_index_start': 862, 'line_index_end': 862, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1290>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 927, 
                        "line_index_start": 877, 
                        "lines": [
                            "    def _create_audience_view(self):\n", 
                            "        # creating audience view\n", 
                            "        log.info(\"Creating audience view for survey=%s\", self.id)\n", 
                            "        audience_view = View(self.request, self)\n", 
                            "        audience_view.survey = self\n", 
                            "        audience_view_data = audience_view.to_dict()\n", 
                            "        audience_view_data['name'] = \"View complete responses only\"\n", 
                            "        audience_view_data['is_current'] = False\n", 
                            "        audience_view_data['is_default'] = False\n", 
                            "        audience_view_data['survey_id'] = self.id\n", 
                            "        audience_view_data['type'] = 'standard'\n", 
                            "        audience_view.load(audience_view_data)\n", 
                            "        audience_view.save()\n", 
                            "        self.add_view(audience_view)\n", 
                            "\n", 
                            "        #add completeness rule to audience view\n", 
                            "        completeness_metadata = {\n", 
                            "            'key': 'rule_filter_completeness',\n", 
                            "            'value': {\n", 
                            "                'rule_type': 'completeness',\n", 
                            "                'rows': {\n", 
                            "                    'completely': True\n", 
                            "                },\n", 
                            "                'selected': True\n", 
                            "            },\n", 
                            "            'view_id': audience_view.id,\n", 
                            "            'metadata_id': None,\n", 
                            "            'option_id': None,\n", 
                            "            'question_id': None\n", 
                            "        }\n", 
                            "        audience_view.add_or_update_metadata_item(completeness_metadata)\n", 
                            "        audience_view.save_metadata()\n", 
                            "\n", 
                            "        # testing to see how many people buying audiences have unsaved\n", 
                            "        # rules to see if this step is even necessary\n", 
                            "        # check if current view is dirty\n", 
                            "\n", 
                            "        if not self.current_view.is_dirty:\n", 
                            "            if self.owner.package_type != 'BASIC':\n", 
                            "                log.info(\"switching from current view to audience view \"\n", 
                            "                \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                            "                self.switch_view(audience_view)\n", 
                            "            else:\n", 
                            "                log.info(\"cannot switch to audience view views because user \"\n", 
                            "                \"is basic for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                            "        else:\n", 
                            "            log.info(\"has unsaved rules, cannot switch to audience view \"\n", 
                            "                 \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                            "\n", 
                            "        self._add_autocreated_view_metadata(\"audience_views_created\")\n", 
                            "\n"
                        ], 
                        "name": "_create_audience_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258c850>, 'target': 'audience_view', 'line_index_start': 880, 'line_index_end': 880, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258ca10>, 'line_index_start': 881, 'value': 'self', 'line_index_end': 881, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cb10>, 'target': 'audience_view_data', 'line_index_start': 882, 'line_index_end': 882, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cc50>, 'line_index_start': 883, 'value': 'View complete responses only', 'line_index_end': 883, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cdd0>, 'line_index_start': 884, 'value': 'False', 'line_index_end': 884, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cf50>, 'line_index_start': 885, 'value': 'False', 'line_index_end': 885, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2378110>, 'line_index_start': 886, 'line_index_end': 886, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23782d0>, 'line_index_start': 887, 'value': 'standard', 'line_index_end': 887, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23787d0>, 'target': 'completeness_metadata', 'line_index_start': 893, 'line_index_end': 906, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 943, 
                        "line_index_start": 928, 
                        "lines": [
                            "    def _add_autocreated_view_metadata(self, key):\n", 
                            "        # set metadata on the default view so we only create autocreated views\n", 
                            "        # once\n", 
                            "        autocreated_metadata = {\n", 
                            "            'key': key,\n", 
                            "            'value': {\n", 
                            "                'created': True\n", 
                            "            },\n", 
                            "            'view_id': self.default_view.id,\n", 
                            "            'metadata_id': None,\n", 
                            "            'option_id': None,\n", 
                            "            'question_id': None\n", 
                            "        }\n", 
                            "        self.default_view.add_or_update_metadata_item(autocreated_metadata)\n", 
                            "        self.default_view.save_metadata()\n", 
                            "\n"
                        ], 
                        "name": "_add_autocreated_view_metadata", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x233ce10>, 'target': 'autocreated_metadata', 'line_index_start': 931, 'line_index_end': 940, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1610>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x233d950>, 'name': 'property', 'line_index_start': 944, 'line_index_end': 945, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1690>}"
                        ], 
                        "docstring": "Return a list of views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 949, 
                        "line_index_start": 944, 
                        "lines": [
                            "    @property\n", 
                            "    def views(self):\n", 
                            "        \"\"\"Return a list of views.\"\"\"\n", 
                            "        self._populate_views()\n", 
                            "        return self._views_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 948, 'ast_node': <_ast.Return object at 0x233d810>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1690>, 'obj_type': 'return', 'line_index_end': 949}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x233dd10>, 'name': 'property', 'line_index_start': 950, 'line_index_end': 951, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1790>}"
                        ], 
                        "docstring": "Return a list of views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 955, 
                        "line_index_start": 950, 
                        "lines": [
                            "    @property\n", 
                            "    def export_views(self):\n", 
                            "        \"\"\"Return a list of views.\"\"\"\n", 
                            "        self._populate_export_views()\n", 
                            "        return self._export_views_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "export_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 954, 'ast_node': <_ast.Return object at 0x233dbd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1790>, 'obj_type': 'return', 'line_index_end': 955}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 993, 
                        "line_index_start": 956, 
                        "lines": [
                            "    def add_view(self, view):\n", 
                            "        self._populate_views()\n", 
                            "        if str(view.survey_id) != str(self.id):\n", 
                            "            raise RuntimeError(\n", 
                            "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
                            "                \"to survey %(other_survey_id)s\" % {\n", 
                            "                    \"view_id\": view.id,\n", 
                            "                    \"survey_id\": self.id,\n", 
                            "                    \"other_survey_id\": view.survey_id\n", 
                            "                }\n", 
                            "            )\n", 
                            "\n", 
                            "        if view.is_current:\n", 
                            "            if self._current_view is None:\n", 
                            "                self._current_view = view\n", 
                            "            elif self._current_view != view:\n", 
                            "                raise CurrentViewAlreadyExistsError(\n", 
                            "                    \"survey=%s already has current_view=%s\" % (\n", 
                            "                        self.id,\n", 
                            "                        self._current_view.id\n", 
                            "                    )\n", 
                            "                )\n", 
                            "        elif view.is_default:\n", 
                            "            if self._default_view is None:\n", 
                            "                self._default_view = view\n", 
                            "            elif self._default_view != view:\n", 
                            "                raise DefaultViewAlreadyExistsError(\n", 
                            "                    \"survey=%s already has default_view=%s\" % (\n", 
                            "                        self.id,\n", 
                            "                        self._default_view.id\n", 
                            "                    )\n", 
                            "                )\n", 
                            "            self._default_view = view\n", 
                            "\n", 
                            "        self._views_list.append(view)\n", 
                            "        self._views_map[view.id] = view\n", 
                            "        view.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2341690>, 'line_index_start': 991, 'value': 'view', 'line_index_end': 991, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2341890>, 'line_index_start': 992, 'value': 'self', 'line_index_end': 993, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1890>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Set the given selected view ``selected_view`` as the current view and\nreturn the current view.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1011, 
                        "line_index_start": 994, 
                        "lines": [
                            "    def switch_view(self, selected_view):\n", 
                            "        \"\"\"\n", 
                            "        Set the given selected view ``selected_view`` as the current view and\n", 
                            "        return the current view.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        self.current_view.copy(selected_view)\n", 
                            "        self.current_view.selected_view = selected_view\n", 
                            "\n", 
                            "        self.current_view.clear_metadata()\n", 
                            "\n", 
                            "        # Only copy metadata over if the selected view is not the default view\n", 
                            "        # because the default view should not have any rules saved on it.\n", 
                            "        if not selected_view.is_default and selected_view.has_metadata():\n", 
                            "            self.current_view.copy_metadata(selected_view)\n", 
                            "\n", 
                            "        return self.current_view\n", 
                            "\n"
                        ], 
                        "name": "switch_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1010, 'ast_node': <_ast.Return object at 0x23422d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1950>, 'obj_type': 'return', 'line_index_end': 1011}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2341c90>, 'line_index_start': 1001, 'value': 'selected_view', 'line_index_end': 1002, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1950>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1027, 
                        "line_index_start": 1012, 
                        "lines": [
                            "    def add_export_view(self, view):\n", 
                            "        self._populate_export_views()\n", 
                            "        if view.survey_id != self.id:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
                            "                \"to survey %(other_survey_id)s\" % {\n", 
                            "                    \"view_id\": view.id,\n", 
                            "                    \"survey_id\": self.id,\n", 
                            "                    \"other_survey_id\": view.survey_id\n", 
                            "                }\n", 
                            "            )\n", 
                            "\n", 
                            "        self._export_views_list.append(view)\n", 
                            "        self._export_views_map[view.id] = view\n", 
                            "        view.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_export_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2342c50>, 'line_index_start': 1025, 'value': 'view', 'line_index_end': 1025, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1a10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2342e50>, 'line_index_start': 1026, 'value': 'self', 'line_index_end': 1027, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1a10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1032, 
                        "line_index_start": 1028, 
                        "lines": [
                            "    def add_export_job(self, export_job):\n", 
                            "        self._export_job_list.append(export_job)\n", 
                            "        self._export_job_map[export_job.id] = export_job\n", 
                            "        export_job.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_export_job", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2345210>, 'line_index_start': 1030, 'value': 'export_job', 'line_index_end': 1030, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1ad0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2345410>, 'line_index_start': 1031, 'value': 'self', 'line_index_end': 1032, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1ad0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1041, 
                        "line_index_start": 1033, 
                        "lines": [
                            "    def delete_export_job(self, export_id):\n", 
                            "        self._populate_export_jobs()\n", 
                            "        job = self._export_job_map.get(export_id)\n", 
                            "        if job is None:\n", 
                            "            return\n", 
                            "        job.delete()\n", 
                            "        self._export_job_list.remove(job)\n", 
                            "        del self._export_job_map[export_id]\n", 
                            "\n"
                        ], 
                        "name": "delete_export_job", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2345710>, 'target': 'job', 'line_index_start': 1035, 'line_index_end': 1035, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1b90>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return a view given a ``view_id``.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1046, 
                        "line_index_start": 1042, 
                        "lines": [
                            "    def get_view_by_id(self, view_id):\n", 
                            "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
                            "        self._populate_views()\n", 
                            "        return self._views_map.get(view_id)\n", 
                            "\n"
                        ], 
                        "name": "get_view_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1045, 'ast_node': <_ast.Return object at 0x23460d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1c10>, 'obj_type': 'return', 'line_index_end': 1046}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return a view given a ``view_id``.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1051, 
                        "line_index_start": 1047, 
                        "lines": [
                            "    def get_shared_view_by_id(self, view_id):\n", 
                            "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
                            "        self._populate_shared_views()\n", 
                            "        return self._shared_views_map.get(view_id)\n", 
                            "\n"
                        ], 
                        "name": "get_shared_view_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1050, 'ast_node': <_ast.Return object at 0x23464d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1c90>, 'obj_type': 'return', 'line_index_end': 1051}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return an export view given a ``view_id``", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1056, 
                        "line_index_start": 1052, 
                        "lines": [
                            "    def get_export_view_by_id(self, view_id):\n", 
                            "        \"\"\"Return an export view given a ``view_id``\"\"\"\n", 
                            "        self._populate_export_views()\n", 
                            "        return self._export_views_map.get(view_id)\n", 
                            "\n"
                        ], 
                        "name": "get_export_view_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1055, 'ast_node': <_ast.Return object at 0x23468d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1d10>, 'obj_type': 'return', 'line_index_end': 1056}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2346cd0>, 'name': 'property', 'line_index_start': 1057, 'line_index_end': 1058, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1d90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1061, 
                        "line_index_start": 1057, 
                        "lines": [
                            "    @property\n", 
                            "    def current_view(self):\n", 
                            "        self._populate_views()\n", 
                            "        return self._current_view\n", 
                            "\n"
                        ], 
                        "name": "current_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1060, 'ast_node': <_ast.Return object at 0x2346c10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1d90>, 'obj_type': 'return', 'line_index_end': 1061}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2346f90>, 'name': 'property', 'line_index_start': 1062, 'line_index_end': 1063, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1e50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1066, 
                        "line_index_start": 1062, 
                        "lines": [
                            "    @property\n", 
                            "    def default_view(self):\n", 
                            "        self._populate_views()\n", 
                            "        return self._default_view\n", 
                            "\n"
                        ], 
                        "name": "default_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1065, 'ast_node': <_ast.Return object at 0x2346ed0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1e50>, 'obj_type': 'return', 'line_index_end': 1066}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1085, 
                        "line_index_start": 1067, 
                        "lines": [
                            "    def get_respondent_trends(\n", 
                            "        self, first_respondent, last_respondent, trend_by,\n", 
                            "        filter_data=None, compare_data=None\n", 
                            "    ):\n", 
                            "        counts = self.request.ansvc.get_survey_respondent_trends(\n", 
                            "            self.id,\n", 
                            "            first_respondent.id,\n", 
                            "            last_respondent.id,\n", 
                            "            trend_by,\n", 
                            "            self.owner.utc_offset,\n", 
                            "            filter_data=filter_data,\n", 
                            "            compare_data=compare_data\n", 
                            "        )\n", 
                            "\n", 
                            "        return {\n", 
                            "            'respondent_count': counts['respondent_count'],\n", 
                            "            'trend_by': trend_by\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "get_respondent_trends", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1081, 'ast_node': <_ast.Return object at 0x23497d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1f10>, 'obj_type': 'return', 'line_index_end': 1085}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2349290>, 'target': 'counts', 'line_index_start': 1071, 'line_index_end': 1080, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1f10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1095, 
                        "line_index_start": 1086, 
                        "lines": [
                            "    def respondent_counts(self, filter_data=None, compare_data=None):\n", 
                            "        counts = self.request.ansvc.get_respondent_counts(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            filter_data,\n", 
                            "            compare_data,\n", 
                            "            self.owner.response_limit\n", 
                            "        )\n", 
                            "        return counts['respondent_count']\n", 
                            "\n"
                        ], 
                        "name": "respondent_counts", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1094, 'ast_node': <_ast.Return object at 0x234a050>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1fd0>, 'obj_type': 'return', 'line_index_end': 1095}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2349bd0>, 'target': 'counts', 'line_index_start': 1087, 'line_index_end': 1093, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1fd0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1106, 
                        "line_index_start": 1096, 
                        "lines": [
                            "    def num_of_respondents(self, respondent_counts):\n", 
                            "        num_of_respondents = respondent_counts['total_context']\n", 
                            "\n", 
                            "        if (\n", 
                            "            self.owner.has_respondent_limit() and\n", 
                            "            num_of_respondents >= self.owner.response_limit\n", 
                            "        ):\n", 
                            "            num_of_respondents = self.owner.response_limit\n", 
                            "\n", 
                            "        return num_of_respondents\n", 
                            "\n"
                        ], 
                        "name": "num_of_respondents", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234a810>, 'line_index_start': 1105, 'value': 'num_of_respondents', 'line_index_end': 1106, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a50d0>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234a290>, 'target': 'num_of_respondents', 'line_index_start': 1097, 'line_index_end': 1098, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a50d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1118, 
                        "line_index_start": 1107, 
                        "lines": [
                            "    def add_page(self, page):\n", 
                            "        # Remove str() when this gets fixed:\n", 
                            "        # https://monkeys.jira.com/browse/GORILLA-922\n", 
                            "        if str(page.survey_id) != self.id:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to add page which survey ID differs\"\n", 
                            "            )\n", 
                            "        page.survey = self  # backref\n", 
                            "        self._page_list.append(page)\n", 
                            "        self._page_map[page.id] = page\n", 
                            "        self._page_map_by_index[page.index] = page\n", 
                            "\n"
                        ], 
                        "name": "add_page", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234ac90>, 'line_index_start': 1114, 'value': 'self', 'line_index_end': 1114, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5190>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234af10>, 'line_index_start': 1116, 'value': 'page', 'line_index_end': 1116, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5190>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234b150>, 'line_index_start': 1117, 'value': 'page', 'line_index_end': 1118, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5190>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1130, 
                        "line_index_start": 1119, 
                        "lines": [
                            "    def add_question(self, question):\n", 
                            "        # FIXME: Check that the question belongs to the survey (via the page)\n", 
                            "        # when this \"surveyservice\" ticket is fixed:\n", 
                            "        # https://monkeys.jira.com/browse/GORILLA-923\n", 
                            "        if question.page.survey.id != self.id:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to add question which page's ID differs\"\n", 
                            "            )\n", 
                            "        question.survey = self  # backref\n", 
                            "        self._question_list.append(question)\n", 
                            "        self._question_map[question.id] = question\n", 
                            "\n"
                        ], 
                        "name": "add_question", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234b750>, 'line_index_start': 1127, 'value': 'self', 'line_index_end': 1127, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5290>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234b9d0>, 'line_index_start': 1129, 'value': 'question', 'line_index_end': 1130, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5290>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234bf50>, 'name': 'property', 'line_index_start': 1131, 'line_index_end': 1132, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5350>}"
                        ], 
                        "docstring": "Return a list of pages.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1136, 
                        "line_index_start": 1131, 
                        "lines": [
                            "    @property\n", 
                            "    def pages(self):\n", 
                            "        \"\"\"Return a list of pages.\"\"\"\n", 
                            "        self._populate_pages()\n", 
                            "        return self._page_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1135, 'ast_node': <_ast.Return object at 0x234be10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5350>, 'obj_type': 'return', 'line_index_end': 1136}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234d610>, 'name': 'property', 'line_index_start': 1137, 'line_index_end': 1138, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5450>}"
                        ], 
                        "docstring": "Return a list of pages that shown by the show rule.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1145, 
                        "line_index_start": 1137, 
                        "lines": [
                            "    @property\n", 
                            "    def shown_pages(self):\n", 
                            "        \"\"\"Return a list of pages that shown by the show rule.\"\"\"\n", 
                            "        pages = []\n", 
                            "        for page in self.pages:\n", 
                            "            if self.current_view.shows_page(page):\n", 
                            "                pages.append(page)\n", 
                            "        return pages\n", 
                            "\n"
                        ], 
                        "name": "shown_pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234d590>, 'line_index_start': 1144, 'value': 'pages', 'line_index_end': 1145, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5450>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234d110>, 'target': 'pages', 'line_index_start': 1140, 'line_index_end': 1140, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5450>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return the first showable (analyzable) page. If no page is\nconsidered showable, return None. The show rule on the current view is\nalso taken into consideration to decide whether or not the page is\nshowable.\n\nIn analyze terms, a page is considered to be showable if the page\ncontains at least one \"real\" question that can be answered by a\nrespondent.\n\nE.g., \"presentation\" questions are not considered to be showable.\nUnless they are random assignment presentation questions.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1167, 
                        "line_index_start": 1146, 
                        "lines": [
                            "    def get_first_showable_page(self):\n", 
                            "        \"\"\"\n", 
                            "        Return the first showable (analyzable) page. If no page is\n", 
                            "        considered showable, return None. The show rule on the current view is\n", 
                            "        also taken into consideration to decide whether or not the page is\n", 
                            "        showable.\n", 
                            "\n", 
                            "        In analyze terms, a page is considered to be showable if the page\n", 
                            "        contains at least one \"real\" question that can be answered by a\n", 
                            "        respondent.\n", 
                            "\n", 
                            "        E.g., \"presentation\" questions are not considered to be showable.\n", 
                            "        Unless they are random assignment presentation questions.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        for page in self.shown_pages:\n", 
                            "            for question in page.questions:\n", 
                            "                if not question.is_presentation():\n", 
                            "                    return page\n", 
                            "                elif question.has_random_assignment:\n", 
                            "                    return page\n", 
                            "\n"
                        ], 
                        "name": "get_first_showable_page", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return the suggested default page index to show to the user.\n\nThe value is either the page's index or the string \"all\" meaning that\nall pages should be shown.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1187, 
                        "line_index_start": 1168, 
                        "lines": [
                            "    def get_suggested_default_page_index(self):\n", 
                            "        \"\"\"\n", 
                            "        Return the suggested default page index to show to the user.\n", 
                            "\n", 
                            "        The value is either the page's index or the string \"all\" meaning that\n", 
                            "        all pages should be shown.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if len(self.pages) > 1 and len(self.questions) > 30:\n", 
                            "\n", 
                            "            first_showable_page = self.get_first_showable_page()\n", 
                            "\n", 
                            "            if first_showable_page is None:\n", 
                            "                return self.pages[0].index\n", 
                            "\n", 
                            "            return first_showable_page.index\n", 
                            "\n", 
                            "        return \"all\"\n", 
                            "\n", 
                            "\n"
                        ], 
                        "name": "get_suggested_default_page_index", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234f650>, 'line_index_start': 1185, 'value': 'all', 'line_index_end': 1187, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5590>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234f9d0>, 'name': 'property', 'line_index_start': 1188, 'line_index_end': 1189, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a55d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1192, 
                        "line_index_start": 1188, 
                        "lines": [
                            "    @property\n", 
                            "    def questions(self):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._question_list[:]  # return copy!\n", 
                            "    \n"
                        ], 
                        "name": "questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1191, 'ast_node': <_ast.Return object at 0x234f890>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a55d0>, 'obj_type': 'return', 'line_index_end': 1192}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234fd90>, 'name': 'property', 'line_index_start': 1193, 'line_index_end': 1194, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a56d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1199, 
                        "line_index_start": 1193, 
                        "lines": [
                            "    @property\n", 
                            "    def has_random_assignment(self):\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                return True\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_random_assignment", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234fd10>, 'line_index_start': 1198, 'value': 'False', 'line_index_end': 1199, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a56d0>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2350310>, 'name': 'property', 'line_index_start': 1200, 'line_index_end': 1201, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5790>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1207, 
                        "line_index_start": 1200, 
                        "lines": [
                            "    @property\n", 
                            "    def random_assignment_questions(self):\n", 
                            "        random_assignment_questions = []\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                random_assignment_questions.append(q)\n", 
                            "        return random_assignment_questions\n", 
                            "\n"
                        ], 
                        "name": "random_assignment_questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2350290>, 'line_index_start': 1206, 'value': 'random_assignment_questions', 'line_index_end': 1207, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5790>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234fe90>, 'target': 'random_assignment_questions', 'line_index_start': 1202, 'line_index_end': 1202, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5790>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2350810>, 'name': 'property', 'line_index_start': 1208, 'line_index_end': 1209, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5890>}"
                        ], 
                        "docstring": "random assignment presentation questions included because they have\nsummary data", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1216, 
                        "line_index_start": 1208, 
                        "lines": [
                            "    @property\n", 
                            "    def summary_data_questions(self):\n", 
                            "        \"\"\"\n", 
                            "        random assignment presentation questions included because they have\n", 
                            "        summary data\n", 
                            "        \"\"\"\n", 
                            "        return [q for q in self.questions if not q.is_presentation() \\\n", 
                            "            or q.has_random_assignment]\n", 
                            "\n"
                        ], 
                        "name": "summary_data_questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1214, 'ast_node': <_ast.Return object at 0x2350490>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5890>, 'obj_type': 'return', 'line_index_end': 1216}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1220, 
                        "line_index_start": 1217, 
                        "lines": [
                            "    def get_question_by_id(self, question_id):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._question_map.get(question_id)\n", 
                            "\n"
                        ], 
                        "name": "get_question_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1219, 'ast_node': <_ast.Return object at 0x2350a50>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5910>, 'obj_type': 'return', 'line_index_end': 1220}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1224, 
                        "line_index_start": 1221, 
                        "lines": [
                            "    def get_page_by_id(self, page_id):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._page_map.get(page_id)\n", 
                            "\n"
                        ], 
                        "name": "get_page_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1223, 'ast_node': <_ast.Return object at 0x2350dd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a59d0>, 'obj_type': 'return', 'line_index_end': 1224}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2352390>, 'name': 'property', 'line_index_start': 1225, 'line_index_end': 1226, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5a50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1232, 
                        "line_index_start": 1225, 
                        "lines": [
                            "    @property\n", 
                            "    def export_jobs(self):\n", 
                            "        try:\n", 
                            "            self._populate_export_jobs()\n", 
                            "        except ServiceError:\n", 
                            "            return\n", 
                            "        return self._export_job_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "export_jobs", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1231, 'ast_node': <_ast.Return object at 0x2352250>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5a50>, 'obj_type': 'return', 'line_index_end': 1232}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1239, 
                        "line_index_start": 1233, 
                        "lines": [
                            "    def get_exportjob_by_id(self, job_id):\n", 
                            "        try:\n", 
                            "            self._populate_export_jobs()\n", 
                            "        except ServiceError:\n", 
                            "            return\n", 
                            "        return self._export_job_map.get(job_id)\n", 
                            "\n"
                        ], 
                        "name": "get_exportjob_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1238, 'ast_node': <_ast.Return object at 0x23526d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5b10>, 'obj_type': 'return', 'line_index_end': 1239}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2352ad0>, 'name': 'property', 'line_index_start': 1240, 'line_index_end': 1241, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5b90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1244, 
                        "line_index_start": 1240, 
                        "lines": [
                            "    @property\n", 
                            "    def theme(self):\n", 
                            "        self._populate_theme()\n", 
                            "        return self._theme\n", 
                            "\n"
                        ], 
                        "name": "theme", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1243, 'ast_node': <_ast.Return object at 0x2352a10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5b90>, 'obj_type': 'return', 'line_index_end': 1244}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2352d90>, 'name': 'property', 'line_index_start': 1245, 'line_index_end': 1246, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5c50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1249, 
                        "line_index_start": 1245, 
                        "lines": [
                            "    @property\n", 
                            "    def design_settings(self):\n", 
                            "        self._populate_design_settings()\n", 
                            "        return self._design_settings\n", 
                            "\n"
                        ], 
                        "name": "design_settings", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1248, 'ast_node': <_ast.Return object at 0x2352cd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5c50>, 'obj_type': 'return', 'line_index_end': 1249}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1261, 
                        "line_index_start": 1250, 
                        "lines": [
                            "    def _populate_theme(self):\n", 
                            "        if self._populated_theme:\n", 
                            "            return\n", 
                            "\n", 
                            "        self._populate_pages()\n", 
                            "        #self._populate_structure()  # required for the theme ID\n", 
                            "        theme_id = self.design_settings['theme_id']\n", 
                            "        theme_data = self.request.svysvc.get_theme(theme_id)\n", 
                            "        self._populated_theme = True\n", 
                            "\n", 
                            "        self._theme = theme_data\n", 
                            "\n"
                        ], 
                        "name": "_populate_theme", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23530d0>, 'target': 'theme_id', 'line_index_start': 1256, 'line_index_end': 1256, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353290>, 'target': 'theme_data', 'line_index_start': 1257, 'line_index_end': 1257, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353490>, 'line_index_start': 1258, 'value': 'True', 'line_index_end': 1259, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353590>, 'line_index_start': 1260, 'value': 'theme_data', 'line_index_end': 1261, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1275, 
                        "line_index_start": 1262, 
                        "lines": [
                            "    def _populate_design_settings(self):\n", 
                            "        if self._populated_design_settings:\n", 
                            "            return\n", 
                            "\n", 
                            "        # only include panel if there is a configured audience\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            include_design_settings=True,\n", 
                            "            include_panel=self.has_configured_audience\n", 
                            "        )\n", 
                            "\n", 
                            "        self._design_settings = survey_data['design_settings']\n", 
                            "\n"
                        ], 
                        "name": "_populate_design_settings", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353850>, 'target': 'survey_data', 'line_index_start': 1267, 'line_index_end': 1273, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5e50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353c90>, 'line_index_start': 1274, 'line_index_end': 1275, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5e50>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2355110>, 'name': 'property', 'line_index_start': 1276, 'line_index_end': 1277, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5f10>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1280, 
                        "line_index_start": 1276, 
                        "lines": [
                            "    @property\n", 
                            "    def question_logic(self):\n", 
                            "        self._populate_logic()\n", 
                            "        return self._question_logic\n", 
                            "\n"
                        ], 
                        "name": "question_logic", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1279, 'ast_node': <_ast.Return object at 0x2355050>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5f10>, 'obj_type': 'return', 'line_index_end': 1280}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x23553d0>, 'name': 'property', 'line_index_start': 1281, 'line_index_end': 1282, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5fd0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1285, 
                        "line_index_start": 1281, 
                        "lines": [
                            "    @property\n", 
                            "    def page_logic(self):\n", 
                            "        self._populate_logic()\n", 
                            "        return self._page_logic\n", 
                            "\n"
                        ], 
                        "name": "page_logic", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1284, 'ast_node': <_ast.Return object at 0x2355310>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5fd0>, 'obj_type': 'return', 'line_index_end': 1285}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1300, 
                        "line_index_start": 1286, 
                        "lines": [
                            "    def _populate_logic(self):\n", 
                            "        if self._populated_logic:\n", 
                            "            return\n", 
                            "\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            include_logic=True\n", 
                            "        )\n", 
                            "\n", 
                            "        self._question_logic = survey_data['logic'].get('question_logic')\n", 
                            "        self._page_logic = survey_data['logic'].get('page_logic')\n", 
                            "\n", 
                            "        self._populated_logic = True\n", 
                            "\n"
                        ], 
                        "name": "_populate_logic", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23555d0>, 'target': 'survey_data', 'line_index_start': 1290, 'line_index_end': 1295, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2355950>, 'line_index_start': 1296, 'line_index_end': 1296, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2355bd0>, 'line_index_start': 1297, 'line_index_end': 1298, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2355e50>, 'line_index_start': 1299, 'value': 'True', 'line_index_end': 1300, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1312, 
                        "line_index_start": 1301, 
                        "lines": [
                            "    def _populate_export_jobs(self):\n", 
                            "        if self._populated_export_jobs:\n", 
                            "            return\n", 
                            "\n", 
                            "        export_jobs_data = self.request.jobsvc.get_export_jobs(self.id)\n", 
                            "        for job_data in export_jobs_data['export_jobs']:\n", 
                            "            export_job = ViewExportJob(self.request)\n", 
                            "            export_job.load(job_data)\n", 
                            "            self.add_export_job(export_job)\n", 
                            "\n", 
                            "        self._populated_export_jobs = True\n", 
                            "\n"
                        ], 
                        "name": "_populate_export_jobs", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2356150>, 'target': 'export_jobs_data', 'line_index_start': 1305, 'line_index_end': 1305, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9210>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2356910>, 'line_index_start': 1311, 'value': 'True', 'line_index_end': 1312, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9210>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1316, 
                        "line_index_start": 1313, 
                        "lines": [
                            "    def get_page_by_index(self, index):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._page_map_by_index.get(index)\n", 
                            "\n"
                        ], 
                        "name": "get_page_by_index", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1315, 'ast_node': <_ast.Return object at 0x2356c10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a92d0>, 'obj_type': 'return', 'line_index_end': 1316}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2358310>, 'name': 'property', 'line_index_start': 1317, 'line_index_end': 1318, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9350>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1323, 
                        "line_index_start": 1317, 
                        "lines": [
                            "    @property\n", 
                            "    def language(self):\n", 
                            "        self._populate_survey()\n", 
                            "        for lang in self.language_options:\n", 
                            "            if lang['id'] == self._language_id:\n", 
                            "                return lang\n", 
                            "\n"
                        ], 
                        "name": "language", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "returns the english name of the current user's language ", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1328, 
                        "line_index_start": 1324, 
                        "lines": [
                            "    def _get_owner_language(self):\n", 
                            "        ''' returns the english name of the current user's language '''\n", 
                            "        language = get_language_from_country_code(self.owner.language_code)\n", 
                            "        return language.name.lower()\n", 
                            "\n"
                        ], 
                        "name": "_get_owner_language", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1327, 'ast_node': <_ast.Return object at 0x2358650>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a93d0>, 'obj_type': 'return', 'line_index_end': 1328}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2358490>, 'target': 'language', 'line_index_start': 1326, 'line_index_end': 1326, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a93d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "expand_all determines whether we will expand all the possible text items\nor just the essay questions.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1360, 
                        "line_index_start": 1329, 
                        "lines": [
                            "    def _get_ta_question_rollups(self, questions, filter_data=None,\n", 
                            "                                compare_data=None, expand_all=None):\n", 
                            "        '''\n", 
                            "        expand_all determines whether we will expand all the possible text items\n", 
                            "        or just the essay questions.\n", 
                            "\n", 
                            "        '''\n", 
                            "        rollups = {}\n", 
                            "\n", 
                            "        # compared questions are only expanded by the user\n", 
                            "        # or if expand_all == True\n", 
                            "        if (\n", 
                            "            expand_all is None and\n", 
                            "            compare_data is not None and\n", 
                            "            'right' in compare_data\n", 
                            "            ):\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        # prepare a default set of parameters for each question\n", 
                            "        default_params = self._prepare_ta_rollup(filter_data,\n", 
                            "                                                compare_data, expand_all)\n", 
                            "\n", 
                            "        if self.owner.has_respondent_limit():\n", 
                            "            response_limit = self.owner.response_limit\n", 
                            "            default_params['common']['response_limitation'] = response_limit\n", 
                            "\n", 
                            "        for question in questions:\n", 
                            "            rollups[question.id] = question.ta_preget_rollup_by_question(\n", 
                            "                                    default_params, expand_all)\n", 
                            "\n", 
                            "        return rollups\n", 
                            "\n"
                        ], 
                        "name": "_get_ta_question_rollups", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2359910>, 'line_index_start': 1359, 'value': 'rollups', 'line_index_end': 1360, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9490>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2358a90>, 'target': 'rollups', 'line_index_start': 1336, 'line_index_end': 1339, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9490>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2358e90>, 'target': 'default_params', 'line_index_start': 1348, 'line_index_end': 1350, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9490>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "random assignment ta rollups need a different structure", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1390, 
                        "line_index_start": 1361, 
                        "lines": [
                            "    def _get_random_assignment_ta_rollup(self, question, variation_id_list,\n", 
                            "                                        filter_data=None, compare_data=None,\n", 
                            "                                        expand_all=None, option_id=0):\n", 
                            "        \"\"\"\n", 
                            "        random assignment ta rollups need a different structure\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        rollups = {}\n", 
                            "\n", 
                            "        # compared questions are only expanded by the user\n", 
                            "        # or if expand_all == True\n", 
                            "        if (\n", 
                            "            expand_all is None and\n", 
                            "            compare_data is not None and\n", 
                            "            'right' in compare_data\n", 
                            "            ):\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        # prepare a default set of parameters for each question\n", 
                            "        for variation in variation_id_list:\n", 
                            "            default_params = self._prepare_ta_rollup(filter_data, compare_data,\n", 
                            "                expand_all, variation)\n", 
                            "            if self.owner.has_respondent_limit():\n", 
                            "                response_limit = self.owner.response_limit\n", 
                            "                default_params['common']['response_limitation'] = response_limit\n", 
                            "            ta_rollup = question.ta_preget_rollup_by_question(\n", 
                            "                            default_params, expand_all, option_id, variation)\n", 
                            "\n", 
                            "        return ta_rollup\n", 
                            "\n"
                        ], 
                        "name": "_get_random_assignment_ta_rollup", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x235bb90>, 'line_index_start': 1389, 'value': 'ta_rollup', 'line_index_end': 1390, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9590>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2359d50>, 'target': 'rollups', 'line_index_start': 1368, 'line_index_end': 1371, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9590>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "prepares rollups for all questions having text responses", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1421, 
                        "line_index_start": 1391, 
                        "lines": [
                            "    def _prepare_ta_rollup(self, filter_data=None, compare_data=None,\n", 
                            "                            expand_all=None, option_id=0, variation_id=0):\n", 
                            "        \"\"\"\n", 
                            "        prepares rollups for all questions having text responses\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "\n", 
                            "        return {\n", 
                            "            'common': {\n", 
                            "                'option_id': option_id,\n", 
                            "                'variation_id': variation_id,\n", 
                            "                'crosstab_option_id': None,\n", 
                            "                'matrix_crosstab': None,\n", 
                            "                'filter': filter_data,\n", 
                            "                'crosstab': compare_data\n", 
                            "            },\n", 
                            "            'response': {\n", 
                            "                'language': self._get_owner_language(),\n", 
                            "                # should get this from the client as well\n", 
                            "                #'page_size': data['page_size']\n", 
                            "                'page_size': 50,\n", 
                            "                'offset': 0,\n", 
                            "                'include_question_response_count': 1,\n", 
                            "                'include_question_tags': 1,\n", 
                            "                'restrict_by_tag_ids': None,\n", 
                            "            },\n", 
                            "            'analysis': {\n", 
                            "                'hide_ids': 1\n", 
                            "            }\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "_prepare_ta_rollup", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1398, 'ast_node': <_ast.Return object at 0x235bfd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9650>, 'obj_type': 'return', 'line_index_end': 1421}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Call object at 0x2363e10>, 'name': 'prof', 'starargs': None, 'kwargs': None, 'line_index_start': 1422, 'args': [], 'line_index_end': 1423, 'keywords': [<_ast.keyword object at 0x2363e90>], 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>}"
                        ], 
                        "docstring": "Return a dictionary of question rollup data for the currently showing\npage. Filters and compare data will be applied if they exist on the\ncurrent view.\n\nA list of Question instances may be passed as ``questions``, then only\nthe rollup data for these questions will be returned.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1561, 
                        "line_index_start": 1422, 
                        "lines": [
                            "    @prof(depth=5)#, include_variables=['questions', 'rollups'])\n", 
                            "    def get_question_rollups(self, questions, filter_data=None,\n", 
                            "                             compare_data=None, expand_all=None,\n", 
                            "                             include_openended=True):\n", 
                            "        \"\"\"\n", 
                            "        Return a dictionary of question rollup data for the currently showing\n", 
                            "        page. Filters and compare data will be applied if they exist on the\n", 
                            "        current view.\n", 
                            "\n", 
                            "        A list of Question instances may be passed as ``questions``, then only\n", 
                            "        the rollup data for these questions will be returned.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        rollups = {}  # returned data\n", 
                            "        input_question_list = []  # input for ansvc\n", 
                            "        ta_question_list = []  # input for tasvc\n", 
                            "        random_assignment_ta_list = []  # input for tasvc\n", 
                            "\n", 
                            "        for question in questions:\n", 
                            "            if question.is_presentation() and \\\n", 
                            "                not question.has_random_assignment:\n", 
                            "                # skip \"presentation\" questions that don't have summary data\n", 
                            "                continue\n", 
                            "\n", 
                            "            # We always return a dict of rollups that have all the requested\n", 
                            "            # questions. If the question doesn't have rollup data, it rollup\n", 
                            "            # value will be None.\n", 
                            "            rollups[question.id] = None\n", 
                            "            input_question_list.append(question)\n", 
                            "            if (\n", 
                            "                include_openended and\n", 
                            "                question.has_text and not\n", 
                            "                question.random_assignment_list\n", 
                            "            ):\n", 
                            "                ta_question_list.append(question)\n", 
                            "\n", 
                            "        if not input_question_list:\n", 
                            "            # If the survey doesn't have any questions, return an empty rollup\n", 
                            "            # dictionary\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        questions_data = []\n", 
                            "\n", 
                            "        for question in input_question_list:\n", 
                            "            q_data = {\n", 
                            "                'question_id': question.id,\n", 
                            "                'question_type': {\n", 
                            "                    'family': question.type,\n", 
                            "                    'subtype': question.subtype\n", 
                            "                },\n", 
                            "            }\n", 
                            "            if question.random_assignment_list:\n", 
                            "                q_data['random_assignment_vars'] = [str(ra['variable_id']) for ra in question.random_assignment_list]\n", 
                            "                if include_openended and question.has_text:\n", 
                            "                    random_assignment_ta_list.append(question)\n", 
                            "            questions_data.append(q_data)\n", 
                            "\n", 
                            "        is_ra_compare = False\n", 
                            "        is_ra_filter = False\n", 
                            "\n", 
                            "        if compare_data is not None:\n", 
                            "            if compare_data['type'] == 'random_assignment':\n", 
                            "                is_ra_compare = True\n", 
                            "        elif filter_data is not None:\n", 
                            "            if filter_data['left'] == 'question.ra':\n", 
                            "                is_ra_filter = True\n", 
                            "\n", 
                            "        if is_ra_compare:\n", 
                            "            response = self.request.ansvc.get_compare_rollups(\n", 
                            "                self.id,\n", 
                            "                self.owner.id,\n", 
                            "                questions_data,\n", 
                            "                filter_data,\n", 
                            "                compare_data,\n", 
                            "                self.owner.response_limit\n", 
                            "            )\n", 
                            "        elif False:  # is_ra_filter:\n", 
                            "            response = self.request.ansvc.get_questions_rollups_v2(\n", 
                            "                self.id,\n", 
                            "                self.owner.id,\n", 
                            "                questions_data,\n", 
                            "                filter_data,\n", 
                            "                compare_data,\n", 
                            "                self.owner.response_limit\n", 
                            "            )\n", 
                            "        else:\n", 
                            "            response = self.request.ansvc.get_questions_rollups(\n", 
                            "                self.id,\n", 
                            "                self.owner.id,\n", 
                            "                questions_data,\n", 
                            "                filter_data,\n", 
                            "                compare_data,\n", 
                            "                self.owner.response_limit\n", 
                            "            )\n", 
                            "\n", 
                            "        # unwrap rollups to the top-level of the dict\n", 
                            "        response = response[self.id]\n", 
                            "\n", 
                            "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
                            "        rollups.update(response)\n", 
                            "\n", 
                            "        ta_rollups = self._get_ta_question_rollups(\n", 
                            "            ta_question_list,\n", 
                            "            filter_data,\n", 
                            "            compare_data,\n", 
                            "            expand_all\n", 
                            "        )\n", 
                            "\n", 
                            "        for question_id in ta_rollups:\n", 
                            "            rollups[question_id]['summary']['ta_data'] = ta_rollups[question_id]\n", 
                            "\n", 
                            "        # Puts the TA data into questions that have random assignment in them\n", 
                            "        for question in random_assignment_ta_list:\n", 
                            "            for variable in question.random_assignment_list:\n", 
                            "                variable_id = str(variable['variable_id'])\n", 
                            "\n", 
                            "                # This is needed because on random_assignment compares, we\n", 
                            "                #   merge the question that is the source of the compare, thus we\n", 
                            "                #   don't seperate it by variation_id\n", 
                            "                if variable_id in rollups[question.id]:\n", 
                            "                    question_variable_rollup = rollups[question.id][variable_id]\n", 
                            "                else:\n", 
                            "                    variable_id == '0'\n", 
                            "                    question_variable_rollup = rollups[question.id]\n", 
                            "\n", 
                            "                if question.other_option:\n", 
                            "                    option_id = str(question.other_option['id'])\n", 
                            "                else:\n", 
                            "                    option_id = '0'\n", 
                            "\n", 
                            "                ta_rollup_data = self._get_random_assignment_ta_rollup(\n", 
                            "                                question, [variable_id],\n", 
                            "                                filter_data, compare_data,\n", 
                            "                                expand_all, option_id)\n", 
                            "\n", 
                            "                question_variable_rollup['summary']['ta_data'] = ta_rollup_data\n", 
                            "        \n", 
                            "        return rollups\n", 
                            "    \n", 
                            "\n"
                        ], 
                        "name": "get_question_rollups", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2363d90>, 'line_index_start': 1559, 'value': 'rollups', 'line_index_end': 1561, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235cc90>, 'target': 'rollups', 'line_index_start': 1435, 'line_index_end': 1435, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235cd50>, 'target': 'input_question_list', 'line_index_start': 1436, 'line_index_end': 1436, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235ce10>, 'target': 'ta_question_list', 'line_index_start': 1437, 'line_index_end': 1437, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235ced0>, 'target': 'random_assignment_ta_list', 'line_index_start': 1438, 'line_index_end': 1439, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235ea50>, 'target': 'questions_data', 'line_index_start': 1463, 'line_index_end': 1464, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235f810>, 'target': 'is_ra_compare', 'line_index_start': 1479, 'value': 'False', 'line_index_end': 1479, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235f8d0>, 'target': 'is_ra_filter', 'line_index_start': 1480, 'value': 'False', 'line_index_end': 1481, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2361f50>, 'target': 'response', 'line_index_start': 1518, 'line_index_end': 1520, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2362290>, 'target': 'ta_rollups', 'line_index_start': 1523, 'line_index_end': 1529, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2365b10>, 'name': 'property', 'line_index_start': 1562, 'line_index_end': 1563, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1573, 
                        "line_index_start": 1562, 
                        "lines": [
                            "    @property\n", 
                            "    def resource_path(self):\n", 
                            "        # taken from smlib.webmodels\n", 
                            "        if self.id is None:\n", 
                            "            raise Exception(\"survey id required\")\n", 
                            "\n", 
                            "        resource_path_prefix = self.request.registry.settings['dotnet.resource_path_prefix']\n", 
                            "        resource_host = self.request.registry.settings['dotnet.resource_host']\n", 
                            "        survey_id_modded = int(self.id) % 30000\n", 
                            "        return \"//%s/%s/%s/%s/\" % (resource_host, resource_path_prefix, survey_id_modded, self.id)\n", 
                            "\n", 
                            "\n"
                        ], 
                        "name": "resource_path", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1571, 'ast_node': <_ast.Return object at 0x23658d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'obj_type': 'return', 'line_index_end': 1573}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365250>, 'target': 'resource_path_prefix', 'line_index_start': 1568, 'line_index_end': 1568, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365490>, 'target': 'resource_host', 'line_index_start': 1569, 'line_index_end': 1569, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23656d0>, 'target': 'survey_id_modded', 'line_index_start': 1570, 'line_index_end': 1570, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return a dictionary of question rollup data for the currently showing\npage. Filters and compare data will be applied if they exist on the\ncurrent view.\n\nA list of Question instances may be passed as ``questions``, then only\nthe rollup data for these questions will be returned.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1635, 
                        "line_index_start": 1574, 
                        "lines": [
                            "    def get_questions_responses_trends(\n", 
                            "        self, first_respondent, last_respondent, default_trend_by, questions,\n", 
                            "        filter_data=None, compare_data=None\n", 
                            "    ):\n", 
                            "        \"\"\"\n", 
                            "        Return a dictionary of question rollup data for the currently showing\n", 
                            "        page. Filters and compare data will be applied if they exist on the\n", 
                            "        current view.\n", 
                            "\n", 
                            "        A list of Question instances may be passed as ``questions``, then only\n", 
                            "        the rollup data for these questions will be returned.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        rollups = {}  # returned data\n", 
                            "        input_question_list = []  # input for ansvc\n", 
                            "\n", 
                            "        for question in questions:\n", 
                            "            if not question.is_trendable():\n", 
                            "                continue\n", 
                            "            input_question_list.append(question)\n", 
                            "\n", 
                            "            # if the question has no data (no answers), we want to keep track\n", 
                            "            # that the rollup for this question was at least requested\n", 
                            "            rollups[question.id] = None\n", 
                            "\n", 
                            "        if not input_question_list:\n", 
                            "            # If the survey doesn't have any questions, return an empty rollup\n", 
                            "            # dictionary\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        questions_data = []\n", 
                            "        for question in input_question_list:\n", 
                            "            q_data = {\n", 
                            "                'question_id': question.id,\n", 
                            "                'question_type': {\n", 
                            "                    'family': question.type,\n", 
                            "                    'subtype': question.subtype\n", 
                            "                },\n", 
                            "                'trend_data': {\n", 
                            "                    'trend_by': question.trend_by or default_trend_by,\n", 
                            "                    'first_respondent': first_respondent.id,\n", 
                            "                    'last_respondent': last_respondent.id,\n", 
                            "                    'utc_offset': self.owner.utc_offset\n", 
                            "                }\n", 
                            "            }\n", 
                            "\n", 
                            "            questions_data.append(q_data)\n", 
                            "\n", 
                            "        response = self.request.ansvc.get_questions_responses_trends(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            questions_data,\n", 
                            "            filter_data,\n", 
                            "            compare_data\n", 
                            "        )\n", 
                            "        response = response[self.id]  # unwrap rollups to the top-level of the dict\n", 
                            "\n", 
                            "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
                            "        rollups.update(response)\n", 
                            "\n", 
                            "        return rollups\n", 
                            "\n"
                        ], 
                        "name": "get_questions_responses_trends", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2367850>, 'line_index_start': 1634, 'value': 'rollups', 'line_index_end': 1635, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365e90>, 'target': 'rollups', 'line_index_start': 1587, 'line_index_end': 1587, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365f50>, 'target': 'input_question_list', 'line_index_start': 1588, 'line_index_end': 1589, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23666d0>, 'target': 'questions_data', 'line_index_start': 1604, 'line_index_end': 1604, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2367190>, 'target': 'response', 'line_index_start': 1622, 'line_index_end': 1628, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2367550>, 'target': 'response', 'line_index_start': 1629, 'line_index_end': 1631, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return the whole survey structure.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1690, 
                        "line_index_start": 1636, 
                        "lines": [
                            "    def to_dict(self, include_collectors=False, include_theme=False):\n", 
                            "        \"\"\"\n", 
                            "        Return the whole survey structure.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        survey_data = {\n", 
                            "            'id': self.id,\n", 
                            "            'date_created': self.date_created,\n", 
                            "            'date_modified': self.date_modified,\n", 
                            "            'date_deleted': self.date_deleted,\n", 
                            "            'title': self.title,\n", 
                            "            'nickname': self.nickname,\n", 
                            "            'version': self.version,\n", 
                            "            'num_responses': self.num_responses,\n", 
                            "            'language': self.language,\n", 
                            "            'user_id': self.owner.id,\n", 
                            "            'answers': self._answer_map,\n", 
                            "            'has_panel_page': self.has_panel_page,\n", 
                            "            'question_count': self.question_count,\n", 
                            "            'design_settings': self.design_settings,\n", 
                            "            'theme_settings': self.theme if include_theme else None,\n", 
                            "            'quotas': self.quotas,\n", 
                            "            'page_logic': self.page_logic,\n", 
                            "            'question_logic': self.question_logic,\n", 
                            "            'has_logic': True if (\n", 
                            "                self.page_logic or self.question_logic\n", 
                            "            ) else False,\n", 
                            "            'has_randomization': True if (\n", 
                            "                self.has_page_randomization or\n", 
                            "                self.has_question_randomization\n", 
                            "            ) else False,\n", 
                            "            'mangled_id': self.mangled_id,\n", 
                            "            'preview_link': self.preview_link,\n", 
                            "            'resource_path': self.resource_path\n", 
                            "        }\n", 
                            "\n", 
                            "        if self._populated_pages:\n", 
                            "            survey_data.update({\n", 
                            "                'page_ids': [page.id for page in self.pages],\n", 
                            "                'questions': dict((q.id, q.to_dict()) for q in self.questions),\n", 
                            "                'pages': dict((p.id, p.to_dict()) for p in self.pages)\n", 
                            "            })\n", 
                            "        if self._populated_collectors or include_collectors:\n", 
                            "            survey_data.update({\n", 
                            "                'collectors': [c.to_dict() for c in self.collectors],\n", 
                            "                'has_collector': self.has_collector,\n", 
                            "                'has_email_collector': self.has_email_collector,\n", 
                            "                'has_open_collector': self.has_open_collector,\n", 
                            "                'has_all_closed_collectors': self.has_all_closed_collectors,\n", 
                            "                'has_unconfigured_collector': self.has_unconfigured_collector\n", 
                            "            })\n", 
                            "\n", 
                            "        return survey_data\n", 
                            "\n", 
                            "\n"
                        ], 
                        "name": "to_dict", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x236b550>, 'line_index_start': 1688, 'value': 'survey_data', 'line_index_end': 1690, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9d10>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2367b10>, 'target': 'survey_data', 'line_index_start': 1641, 'line_index_end': 1671, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9d10>, 'targets': []}"
                        ]
                    }
                ], 
                "imports": [], 
                "indent": 0, 
                "is_class": true, 
                "is_function": false, 
                "line_index_end": 1690, 
                "line_index_start": 31, 
                "lines": [
                    "class Survey(object):\n", 
                    "\n", 
                    "    _populated_collectors = False\n", 
                    "    _populated_export_jobs = False\n", 
                    "    _populated_export_views = False\n", 
                    "    _populated_owners = False\n", 
                    "    _populated_theme = False\n", 
                    "    _populated_pages = False\n", 
                    "    _populated_survey = False\n", 
                    "    _populated_user_features = False\n", 
                    "    _populated_views = False\n", 
                    "    _populated_design_settings = False\n", 
                    "    _populated_logic = False\n", 
                    "    _populated_shared_views = False\n", 
                    "\n", 
                    "    _current_view = None\n", 
                    "    _default_view = None\n", 
                    "\n", 
                    "    _date_created = None\n", 
                    "    _date_modified = None\n", 
                    "    _date_deleted = None\n", 
                    "    _title = None\n", 
                    "    version = None\n", 
                    "    nickname = None\n", 
                    "    num_responses = None\n", 
                    "    _language_id = None\n", 
                    "    _theme = None\n", 
                    "\n", 
                    "    language_options = [\n", 
                    "        {\"name\": \"English\", \"id\": 1, \"code\": \"en\"},\n", 
                    "        {\"name\": \"Albanian\", \"id\": 24, \"code\": \"sq\"},\n", 
                    "        {\"name\": \"Arabic\", \"id\": 25, \"code\": \"ar\"},\n", 
                    "        {\"name\": \"Armenian\", \"id\": 26, \"code\": \"hy\"},\n", 
                    "        {\"name\": \"Basque\", \"id\": 27, \"code\": \"eu\"},\n", 
                    "        {\"name\": \"Bengali\", \"id\": 28, \"code\": \"bn\"},\n", 
                    "        {\"name\": \"Bosnian\", \"id\": 29, \"code\": \"bs\"},\n", 
                    "        {\"name\": \"Bulgarian\", \"id\": 30, \"code\": \"bg\"},\n", 
                    "        {\"name\": \"Catalan\", \"id\": 31, \"code\": \"ca\"},\n", 
                    "        {\"name\": \"Chinese (Simplified)\", \"id\": 2, \"code\": \"zh-cn\"},\n", 
                    "        {\"name\": \"Chinese (Traditional)\", \"id\": 3, \"code\": \"zh-tw\"},\n", 
                    "        {\"name\": \"Portuguese (Brazilian)\", \"id\": 17, \"code\": \"pt-br\"},\n", 
                    "        {\"name\": \"Portuguese (Iberian)\", \"id\": 16, \"code\": \"pt\"},\n", 
                    "        {\"name\": \"Croatian\", \"id\": 32, \"code\": \"hr\"},\n", 
                    "        {\"name\": \"Czech\", \"id\": 33, \"code\": \"cs\"},\n", 
                    "        {\"name\": \"Danish\", \"id\": 4, \"code\": \"da\"},\n", 
                    "        {\"name\": \"Dutch\", \"id\": 5, \"code\": \"nl\"},\n", 
                    "        {\"name\": \"Estonian\", \"id\": 34, \"code\": \"et\"},\n", 
                    "        {\"name\": \"Filipino\", \"id\": 35, \"code\": \"tl\"},\n", 
                    "        {\"name\": \"Finnish\", \"id\": 6, \"code\": \"fi\"},\n", 
                    "        {\"name\": \"French\", \"id\": 7, \"code\": \"fr\"},\n", 
                    "        {\"name\": \"Georgian\", \"id\": 36, \"code\": \"ka\"},\n", 
                    "        {\"name\": \"German\", \"id\": 8, \"code\": \"de\"},\n", 
                    "        {\"name\": \"Greek\", \"id\": 9, \"code\": \"el\"},\n", 
                    "        {\"name\": \"Hebrew\", \"id\": 37, \"code\": \"he\"},\n", 
                    "        {\"name\": \"Hindi\", \"id\": 38, \"code\": \"hi\"},\n", 
                    "        {\"name\": \"Hungarian\", \"id\": 39, \"code\": \"hu\"},\n", 
                    "        {\"name\": \"Icelandic\", \"id\": 40, \"code\": \"is\"},\n", 
                    "        {\"name\": \"Indonesian\", \"id\": 41, \"code\": \"id\"},\n", 
                    "        {\"name\": \"Irish\", \"id\": 42, \"code\": \"ga\"},\n", 
                    "        {\"name\": \"Italian\", \"id\": 10, \"code\": \"it\"},\n", 
                    "        {\"name\": \"Japanese\", \"id\": 11, \"code\": \"ja\"},\n", 
                    "        {\"name\": \"Korean\", \"id\": 12, \"code\": \"ko\"},\n", 
                    "        {\"name\": \"Kurdish\", \"id\": 43, \"code\": \"ku\"},\n", 
                    "        {\"name\": \"Latvian\", \"id\": 44, \"code\": \"lv\"},\n", 
                    "        {\"name\": \"Lithuanian\", \"id\": 45, \"code\": \"lt\"},\n", 
                    "        {\"name\": \"Macedonian\", \"id\": 46, \"code\": \"mk\"},\n", 
                    "        {\"name\": \"Malay\", \"id\": 13, \"code\": \"ms\"},\n", 
                    "        {\"name\": \"Malayalam\", \"id\": 47, \"code\": \"ml\"},\n", 
                    "        {\"name\": \"Norwegian\", \"id\": 14, \"code\": \"no\"},\n", 
                    "        {\"name\": \"Persian\", \"id\": 48, \"code\": \"fa\"},\n", 
                    "        {\"name\": \"Polish\", \"id\": 15, \"code\": \"pl\"},\n", 
                    "        {\"name\": \"Punjabi\", \"id\": 49, \"code\": \"pa\"},\n", 
                    "        {\"name\": \"Romanian\", \"id\": 50, \"code\": \"ro\"},\n", 
                    "        {\"name\": \"Russian\", \"id\": 18, \"code\": \"ru\"},\n", 
                    "        {\"name\": \"Serbian\", \"id\": 51, \"code\": \"sr\"},\n", 
                    "        {\"name\": \"Slovak\", \"id\": 52, \"code\": \"sk\"},\n", 
                    "        {\"name\": \"Slovenian\", \"id\": 53, \"code\": \"sl\"},\n", 
                    "        {\"name\": \"Spanish\", \"id\": 19, \"code\": \"es\"},\n", 
                    "        {\"name\": \"Swahili\", \"id\": 54, \"code\": \"sw\"},\n", 
                    "        {\"name\": \"Swedish\", \"id\": 20, \"code\": \"sv\"},\n", 
                    "        {\"name\": \"Tamil\", \"id\": 55, \"code\": \"ta\"},\n", 
                    "        {\"name\": \"Telugu\", \"id\": 56, \"code\": \"te\"},\n", 
                    "        {\"name\": \"Thai\", \"id\": 57, \"code\": \"th\"},\n", 
                    "        {\"name\": \"Turkish\", \"id\": 21, \"code\": \"tr\"},\n", 
                    "        {\"name\": \"Ukrainian\", \"id\": 22, \"code\": \"uk\"},\n", 
                    "        {\"name\": \"Vietnamese\", \"id\": 58, \"code\": \"vi\"},\n", 
                    "        {\"name\": \"Welsh\", \"id\": 59, \"code\": \"cy\"},\n", 
                    "    ]\n", 
                    "\n", 
                    "    def __init__(self, request, survey_id):\n", 
                    "        self.request = request\n", 
                    "        self.id = str(survey_id)\n", 
                    "\n", 
                    "        # Holds the survey's dictionary structure\n", 
                    "        self._structure = {}\n", 
                    "\n", 
                    "        self._user_list = []\n", 
                    "        self._user_map = {}\n", 
                    "\n", 
                    "        self._views_list = []\n", 
                    "        self._views_map = {}\n", 
                    "\n", 
                    "        self._export_views_list = []\n", 
                    "        self._export_views_map = {}\n", 
                    "\n", 
                    "        self._page_list = []\n", 
                    "        self._page_map = {}\n", 
                    "        self._page_map_by_index = {}\n", 
                    "\n", 
                    "        self._question_list = []\n", 
                    "        self._question_map = {}\n", 
                    "\n", 
                    "        self._answer_map = {}\n", 
                    "\n", 
                    "        self._export_job_list = []\n", 
                    "        self._export_job_map = {}\n", 
                    "\n", 
                    "        self._collector_list = []\n", 
                    "        self._has_email_collector = False\n", 
                    "        self._has_collector = False\n", 
                    "        self._has_open_collector = False\n", 
                    "        self._has_unconfigured_collector = False\n", 
                    "        self._has_all_closed_collectors = False\n", 
                    "        self._has_configured_audience = False\n", 
                    "\n", 
                    "        self._question_logic = None\n", 
                    "        self._page_logic = None\n", 
                    "\n", 
                    "    def __repr__(self):\n", 
                    "        return \"<%(class)s=%(id)s at 0x%(mem)x>\" % {\n", 
                    "            \"class\": self.__class__.__name__,\n", 
                    "            \"id\": self.id,\n", 
                    "            \"mem\": id(self)\n", 
                    "        }\n", 
                    "\n", 
                    "    def _load_survey(self, survey_data):\n", 
                    "        self._date_created = survey_data['date_created']\n", 
                    "        self._date_modified = survey_data['date_modified']\n", 
                    "        self._date_deleted = survey_data['date_deleted']\n", 
                    "        self._title = survey_data['title']['text']\n", 
                    "        self._nickname = survey_data.get('nickname')\n", 
                    "        self._language_id = survey_data['language_id']\n", 
                    "        self.version = survey_data['version']\n", 
                    "        self.num_responses = survey_data['num_responses']\n", 
                    "        self.question_count = survey_data['question_count']\n", 
                    "        self.has_panel_page = survey_data.get('has_panel_page', False)\n", 
                    "        self._quotas = survey_data.get('quota')\n", 
                    "        self.has_page_randomization = survey_data['page_randomization']['enabled']\n", 
                    "        self._answer_map = {}\n", 
                    "    \n", 
                    "    def _set_benchmarkable_flags(self, survey_data):\n", 
                    "        if self.owner.has_benchmarking_feature():\n", 
                    "            # get benchmarkable data. we'll do this per page to minimize the bmsvc calls\n", 
                    "            for page in survey_data['pages']:\n", 
                    "                # get a dict of logical id by question id\n", 
                    "                #   we'll use this dict to update the page data\n", 
                    "                # get the list of logical ids\n", 
                    "                #   we'll use this list to get the benchmarkable info\n", 
                    "                qb_questions = {}\n", 
                    "                logical_ids = []\n", 
                    "                for question in page['questions']:\n", 
                    "                    if question['question_bank']['is_banked']:\n", 
                    "                        qb_questions[question['question_id']] = question['question_bank']['logical_bank_id']\n", 
                    "                        logical_ids.append(qb_questions[question['question_id']])\n", 
                    "                benchmarkable_ids = self.request.bmsvc.is_benchmarkable(logical_ids)\n", 
                    "                # now update the questions\n", 
                    "                for question in page['questions']:\n", 
                    "                    question['is_benchmarkable'] = True if question['question_id'] in qb_questions and\\\n", 
                    "                                                           qb_questions[question['question_id']] in benchmarkable_ids\\\n", 
                    "                                                        else False\n", 
                    "        else:\n", 
                    "            # set all questions as not benchmarkable\n", 
                    "            for page in survey_data['pages']:\n", 
                    "                for question in page['questions']:\n", 
                    "                    question['is_benchmarkable'] = False\n", 
                    "\n", 
                    "    #@prof(depth=1, include_variables=['survey_data'])\n", 
                    "    def _populate_pages(self):\n", 
                    "        if self._populated_pages:\n", 
                    "            return\n", 
                    "\n", 
                    "        # FIXME: Maybe create Option objects as well?\n", 
                    "        # only include panel if there has been a configured audience\n", 
                    "        survey_data = self.request.svysvc.get_survey(\n", 
                    "            self.id,\n", 
                    "            self.owner.id,\n", 
                    "            load_pages=True,\n", 
                    "            include_panel=self.has_configured_audience\n", 
                    "        )\n", 
                    "        \n", 
                    "        # if the user has benchmarking available, we will set the benchmarking flag for each question as appropriate\n", 
                    "        self._set_benchmarkable_flags(survey_data)\n", 
                    "        \n", 
                    "        if not self._populated_survey:\n", 
                    "            self._populated_survey = True\n", 
                    "            self._load_survey(survey_data)\n", 
                    "\n", 
                    "        self._populated_pages = True\n", 
                    "        self._load_pages(survey_data['pages'])\n", 
                    "\n", 
                    "    def _populate_survey(self):\n", 
                    "        if self._populated_survey:\n", 
                    "            return\n", 
                    "\n", 
                    "        # FIXME: Maybe create Option objects as well?\n", 
                    "        # only include panel if there has abeen a configured audience\n", 
                    "        survey_data = self.request.svysvc.get_survey(\n", 
                    "            self.id,\n", 
                    "            self.owner.id,\n", 
                    "            load_pages=False,\n", 
                    "            include_panel=self.has_configured_audience\n", 
                    "        )\n", 
                    "\n", 
                    "        if 'quota' in survey_data:\n", 
                    "            survey_data['quota'] = self.request.ansvc.quota_list(\n", 
                    "                survey_data['survey_id']\n", 
                    "            )['quota']\n", 
                    "\n", 
                    "        self._populated_survey = True\n", 
                    "        self._load_survey(survey_data)\n", 
                    "\n", 
                    "    @property\n", 
                    "    def title(self):\n", 
                    "        self._populate_survey()\n", 
                    "        return self._title\n", 
                    "\n", 
                    "    #dates appear to be stored in seconds\n", 
                    "    @property\n", 
                    "    def date_deleted(self):\n", 
                    "        self._populate_survey()\n", 
                    "        if self._date_deleted:\n", 
                    "            return self._date_deleted * 1000\n", 
                    "\n", 
                    "    @property\n", 
                    "    def date_created(self):\n", 
                    "        self._populate_survey()\n", 
                    "        return self._date_created * 1000\n", 
                    "\n", 
                    "    @property\n", 
                    "    def date_modified(self):\n", 
                    "        self._populate_survey()\n", 
                    "        if self._date_modified:\n", 
                    "            return self._date_modified * 1000\n", 
                    "\n", 
                    "    @property\n", 
                    "    def quotas(self):\n", 
                    "        self._populate_survey()\n", 
                    "        return self._quotas\n", 
                    "\n", 
                    "    @property\n", 
                    "    def nickname(self):\n", 
                    "        self._populate_survey()\n", 
                    "        if self._nickname:\n", 
                    "            return self._nickname\n", 
                    "\n", 
                    "        return self._title\n", 
                    "\n", 
                    "    @property\n", 
                    "    def mangled_id(self):\n", 
                    "        if self.id is None:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
                    "            )\n", 
                    "        return encrypt_mangled(\"SurveyID=%s&\" % self.id)\n", 
                    "\n", 
                    "    @property\n", 
                    "    def preview_link(self):\n", 
                    "        query_string = {\n", 
                    "            's': self.id,\n", 
                    "            'mode': 3\n", 
                    "        }\n", 
                    "        query_string = urlencode(query_string)\n", 
                    "        query_string = urlencode({\n", 
                    "            'sm': encrypt_mangled(query_string),\n", 
                    "            'PREVIEW_MODE': 'DO_NOT_USE_THIS_LINK_FOR_COLLECTION',\n", 
                    "        })\n", 
                    "\n", 
                    "        return \"%(path)s?%(qs)s\" % {\n", 
                    "            \"path\": '/s.aspx',\n", 
                    "            \"qs\": query_string\n", 
                    "        }\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_question_randomization(self):\n", 
                    "        for page in self.pages:\n", 
                    "            if page.has_question_randomization:\n", 
                    "                return True\n", 
                    "\n", 
                    "        return False\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_random_assignment(self):\n", 
                    "        for q in self.questions:\n", 
                    "            if q.has_random_assignment:\n", 
                    "                return True\n", 
                    "        return False\n", 
                    "\n", 
                    "    def _populate_collectors(self):\n", 
                    "        if self._populated_collectors:\n", 
                    "            return\n", 
                    "\n", 
                    "        collector_list = self.request.collectorsvc.get_collector_list(\n", 
                    "            int(self.owner.id),\n", 
                    "            int(self.id)\n", 
                    "        )\n", 
                    "\n", 
                    "        self._has_all_closed_collectors = True\n", 
                    "        for collector_data in collector_list:\n", 
                    "            collector = Collector(self.request)\n", 
                    "            collector.load(collector_data)\n", 
                    "            if collector.is_email:\n", 
                    "                self._has_email_collector = True\n", 
                    "\n", 
                    "            if collector.is_open or collector.is_clearing_responses:\n", 
                    "                self._has_open_collector = True\n", 
                    "\n", 
                    "            if collector.is_new:\n", 
                    "                self._has_unconfigured_collector = True\n", 
                    "            elif collector.is_audience:\n", 
                    "                self._has_configured_audience = True\n", 
                    "\n", 
                    "            if not (collector.is_closed or collector.is_archived):\n", 
                    "                self._has_all_closed_collectors = False\n", 
                    "\n", 
                    "            self._collector_list.append(collector)\n", 
                    "\n", 
                    "        if self._collector_list:\n", 
                    "            self._has_collector = True\n", 
                    "        else:\n", 
                    "            self._has_all_closed_collectors = False\n", 
                    "\n", 
                    "        self._populated_collectors = True\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_email_collector(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._has_email_collector\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_open_collector(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._has_open_collector\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_all_closed_collectors(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._has_all_closed_collectors\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_unconfigured_collector(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._has_unconfigured_collector\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_configured_audience(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._has_configured_audience\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_collector(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._has_collector\n", 
                    "\n", 
                    "    @property\n", 
                    "    def collectors(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._collector_list\n", 
                    "\n", 
                    "    def _populate_owners(self):\n", 
                    "        \"\"\"\n", 
                    "        Get the owners (user IDs) for this survey.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        if self._populated_owners:\n", 
                    "            return\n", 
                    "\n", 
                    "        try:\n", 
                    "            access_list = self.request.svysvc.survey_access_list(self.id)\n", 
                    "            self._populated_owners = True\n", 
                    "        except ServiceResponseError:\n", 
                    "            # Survey might not be found\n", 
                    "            return\n", 
                    "\n", 
                    "        for user_id in access_list['users']:\n", 
                    "            user = User(self.request, user_id)\n", 
                    "            self._user_list.append(user)\n", 
                    "            self._user_map[user.id] = user\n", 
                    "            user.survey = self  # backref\n", 
                    "\n", 
                    "    def is_owner(self, user):\n", 
                    "        self._populate_owners()\n", 
                    "        return str(user.id) in self._user_map\n", 
                    "\n", 
                    "    @property\n", 
                    "    def owner(self):\n", 
                    "        return self.owners[0]\n", 
                    "\n", 
                    "    @property\n", 
                    "    def owners(self):\n", 
                    "        self._populate_owners()\n", 
                    "        return self._user_list\n", 
                    "\n", 
                    "    def _load_pages(self, pages):\n", 
                    "        question_position = 1\n", 
                    "        page_position = 1\n", 
                    "        for page_data in pages:\n", 
                    "            page = Page(self.request)\n", 
                    "            page.load(page_data)\n", 
                    "            page.position = page_position\n", 
                    "            page_position += 1\n", 
                    "            self.add_page(page)\n", 
                    "            for question in page.questions:\n", 
                    "                # Question numbers aren't stored with presentation context\n", 
                    "                # in the DB, we have to correct for this.\n", 
                    "                question.position = question_position\n", 
                    "                if not question.is_presentation() or \\\n", 
                    "                    question.has_random_assignment:\n", 
                    "                        question_position += 1\n", 
                    "                self.add_question(question)\n", 
                    "                self._load_answers(question.answers)\n", 
                    "\n", 
                    "    def _load_answers(self, answers):\n", 
                    "        for dim, dim_answers in iteritems(answers):\n", 
                    "            for answer in dim_answers:\n", 
                    "                self._answer_map[answer['answer_id']] = answer\n", 
                    "                answer['id'] = str(answer['answer_id'])\n", 
                    "                del answer['answer_id']\n", 
                    "                if 'items' in answer:\n", 
                    "                    for menu_item in answer['items']:\n", 
                    "                        self._answer_map[menu_item['answer_id']] = menu_item\n", 
                    "                        menu_item['id'] = str(menu_item['answer_id'])\n", 
                    "                        del menu_item['answer_id']\n", 
                    "\n", 
                    "    def _populate_views(self):\n", 
                    "        \"\"\"\n", 
                    "        Get the views for this survey.\n", 
                    "\n", 
                    "        If no view exists, create default and current views.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        if self._populated_views:\n", 
                    "            return\n", 
                    "\n", 
                    "        # Can't get data if ID is None\n", 
                    "        if self.id is None:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to get views: survey has no ID.\"\n", 
                    "            )\n", 
                    "\n", 
                    "        data = self.request.ansvc.list_views(self.id)\n", 
                    "        views = data['view_schemas']\n", 
                    "\n", 
                    "        # WARNING: This must be set before ``add_view()`` and\n", 
                    "        # ``get_views_by_id()`` gets called again lower down\n", 
                    "        self._populated_views = True\n", 
                    "\n", 
                    "        # Build view objects\n", 
                    "        self._views_list = []\n", 
                    "        self._views_map = {}\n", 
                    "        for view_id, view_data in iteritems(views):\n", 
                    "            view_type = view_data['view_type']\n", 
                    "            view_data = json.loads(view_data['view_schema'])\n", 
                    "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                    "            # None when created the first time as we don't yet have an ID from\n", 
                    "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                    "            # the view_id inside the view_schema is still None and wasn't\n", 
                    "            # assigned with its ID. For this to be fixed, we should not store\n", 
                    "            # the view_id within the view_schema. Or we can augment the dict\n", 
                    "            # such as here. This should be fixed when the view schema will be\n", 
                    "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                    "            view_data['view_id'] = view_id\n", 
                    "            view_data['type'] = view_type\n", 
                    "\n", 
                    "            view = View(self.request, self)\n", 
                    "            view.load(view_data)\n", 
                    "            try:\n", 
                    "                self.add_view(view)\n", 
                    "            except (\n", 
                    "                CurrentViewAlreadyExistsError,\n", 
                    "                DefaultViewAlreadyExistsError\n", 
                    "            ):\n", 
                    "                log.warning(\n", 
                    "                    \"Name=DuplicateCurrentDefaultView\",\n", 
                    "                    \"ViewData=%s\" % view_data\n", 
                    "                )\n", 
                    "                # Force deletion because we normally can't delete a default or\n", 
                    "                # current view.\n", 
                    "                view.survey = self  # backref required for deletion\n", 
                    "                view.delete(force=True)\n", 
                    "\n", 
                    "        # Call .fix() only after all views have been loaded into the survey\n", 
                    "        # otherwise a view that depends on a not-yet-loaded view will\n", 
                    "        # provoke a traceback (GORILLA-2216).\n", 
                    "        for view in self.views:\n", 
                    "            if view.fix():\n", 
                    "                view.save()\n", 
                    "\n", 
                    "        if self.default_view is None:\n", 
                    "            log.info(\"Creating default view for survey=%s\", self.id)\n", 
                    "            default_view = self._create_default_view()\n", 
                    "            default_view.save()\n", 
                    "            self.add_view(default_view)\n", 
                    "\n", 
                    "        if self.current_view is None:\n", 
                    "            log.info(\"Creating current view for survey=%s\", self.id)\n", 
                    "            current_view = self._create_current_view()\n", 
                    "            current_view.selected_view = self.default_view\n", 
                    "            current_view.save()\n", 
                    "            self.add_view(current_view)\n", 
                    "\n", 
                    "        if self.quotas and self.default_view.quota_view_metadata is None:\n", 
                    "            log.info(\"Creating quota view for survey=%s\", self.id)\n", 
                    "            self._create_quota_views()\n", 
                    "        \n", 
                    "        if self.has_random_assignment and self.default_view.random_assignment_view_metadata is None:\n", 
                    "            log.info(\"Creating random assignment view for survey=%s\", self.id)\n", 
                    "            self._create_random_assignment_views()\n", 
                    "         \n", 
                    "        if self.has_configured_audience and \\\n", 
                    "            self.default_view.audience_view_metadata is None:\n", 
                    "                self._create_audience_view()\n", 
                    "\n", 
                    "        # Set the selected view on the current view.\n", 
                    "        selected_view_id = self.current_view.selected_view_id\n", 
                    "        selected_view = self.get_view_by_id(selected_view_id)\n", 
                    "        if selected_view is None:\n", 
                    "            # Make sure the current view has its selected view pointing to an\n", 
                    "            # existing view. If the selected view doesn't exist (see\n", 
                    "            # GORILLA-1198 for details), re-point the current view's selected\n", 
                    "            # view to be the default view.\n", 
                    "            log.warning(\n", 
                    "                \"Name=SelectedViewNotFound\",\n", 
                    "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
                    "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
                    "            )\n", 
                    "            selected_view = self.current_view.selected_view = self.default_view\n", 
                    "            self.current_view.save()\n", 
                    "        assert selected_view.id == self.current_view.selected_view_id\n", 
                    "        self.current_view.selected_view = selected_view\n", 
                    "\n", 
                    "    def _populate_shared_views(self):\n", 
                    "        \"\"\"\n", 
                    "        Get the views for this survey.\n", 
                    "\n", 
                    "        If no view exists, create default and current views.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        if self._populated_shared_views:\n", 
                    "            return\n", 
                    "\n", 
                    "        # Can't get data if ID is None\n", 
                    "        if self.id is None:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to get shared views: survey has no ID.\"\n", 
                    "            )\n", 
                    "\n", 
                    "        data = self.request.ansvc.list_shared_views(self.id)\n", 
                    "        views = data['view_schemas']\n", 
                    "\n", 
                    "        # WARNING: This must be set before ``add_view()`` and\n", 
                    "        # ``get_views_by_id()`` gets called again lower down\n", 
                    "        self._populated_shared_views = True\n", 
                    "\n", 
                    "        # Build view objects\n", 
                    "        self._shared_views_list = []\n", 
                    "        self._shared_views_map = {}\n", 
                    "\n", 
                    "        for view_id, view_data in iteritems(views):\n", 
                    "            view_type = view_data['view_type']\n", 
                    "            view_data = json.loads(view_data['view_schema'])\n", 
                    "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                    "            # None when created the first time as we don't yet have an ID from\n", 
                    "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                    "            # the view_id inside the view_schema is still None and wasn't\n", 
                    "            # assigned with its ID. For this to be fixed, we should not store\n", 
                    "            # the view_id within the view_schema. Or we can augment the dict\n", 
                    "            # such as here. This should be fixed when the view schema will be\n", 
                    "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                    "            view_data['view_id'] = view_id\n", 
                    "            view_data['type'] = view_type\n", 
                    "\n", 
                    "            view = View(self.request, self)\n", 
                    "            view.load(view_data)\n", 
                    "            view.survey = self\n", 
                    "\n", 
                    "            try:\n", 
                    "                self._shared_views_list.append(view)\n", 
                    "                self._shared_views_map[view_id] = view\n", 
                    "            except (\n", 
                    "                CurrentViewAlreadyExistsError,\n", 
                    "                DefaultViewAlreadyExistsError\n", 
                    "            ):\n", 
                    "                log.warning(\n", 
                    "                    \"Name=DuplicateCurrentDefaultView\",\n", 
                    "                    \"ViewData=%s\" % view_data\n", 
                    "                )\n", 
                    "                # Force deletion because we normally can't delete a default or\n", 
                    "                # current view.\n", 
                    "                view.delete(force=True)\n", 
                    "\n", 
                    "        # Call .fix() only after all views have been loaded into the survey\n", 
                    "        # otherwise a view that depends on a not-yet-loaded view will\n", 
                    "        # provoke a traceback (GORILLA-2216).\n", 
                    "        for view in self.views:\n", 
                    "            if view.fix():\n", 
                    "                view.save()\n", 
                    "\n", 
                    "        if self.default_view is None:\n", 
                    "            log.info(\"Creating default view for survey=%s\" % self.id)\n", 
                    "            default_view = self._create_default_view()\n", 
                    "            default_view.save()\n", 
                    "            self.add_view(default_view)\n", 
                    "\n", 
                    "        if self.current_view is None:\n", 
                    "            log.info(\"Creating current view for survey=%s\" % self.id)\n", 
                    "            current_view = self._create_current_view()\n", 
                    "            current_view.selected_view = self.default_view\n", 
                    "            current_view.save()\n", 
                    "            self.add_view(current_view)\n", 
                    "\n", 
                    "        # Set the selected view on the current view.\n", 
                    "        selected_view_id = self.current_view.selected_view_id\n", 
                    "        selected_view = self.get_view_by_id(selected_view_id)\n", 
                    "        if selected_view is None:\n", 
                    "            # Make sure the current view has its selected view pointing to an\n", 
                    "            # existing view. If the selected view doesn't exist (see\n", 
                    "            # GORILLA-1198 for details), re-point the current view's selected\n", 
                    "            # view to be the default view.\n", 
                    "            log.warning(\n", 
                    "                \"Name=SelectedViewNotFound\",\n", 
                    "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
                    "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
                    "            )\n", 
                    "            selected_view = self.current_view.selected_view = self.default_view\n", 
                    "            self.current_view.save()\n", 
                    "        assert selected_view.id == self.current_view.selected_view_id\n", 
                    "        self.current_view.selected_view = selected_view\n", 
                    "\n", 
                    "    def _populate_export_views(self):\n", 
                    "        if self._populated_export_views:\n", 
                    "            return\n", 
                    "\n", 
                    "        # Can't get data if ID is None\n", 
                    "        if self.id is None:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to get views: survey has no ID.\"\n", 
                    "            )\n", 
                    "\n", 
                    "        data = self.request.ansvc.list_export_views(self.id)\n", 
                    "        views = data['view_schemas']\n", 
                    "\n", 
                    "        # WARNING: This must be set before ``add_view()`` and\n", 
                    "        # ``get_views_by_id()`` gets called again lower down\n", 
                    "        self._populated_export_views = True\n", 
                    "\n", 
                    "        # Build view objects\n", 
                    "        self._export_views_list = []\n", 
                    "        self._export_views_map = {}\n", 
                    "        for view_id, view_data in iteritems(views):\n", 
                    "            view_type = view_data['view_type']\n", 
                    "            view_data = json.loads(view_data['view_schema'])\n", 
                    "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                    "            # None when created the first time as we don't yet have an ID from\n", 
                    "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                    "            # the view_id inside the view_schema is still None and wasn't\n", 
                    "            # assigned with its ID. For this to be fixed, we should not store\n", 
                    "            # the view_id within the view_schema. Or we can augment the dict\n", 
                    "            # such as here. This should be fixed when the view schema will be\n", 
                    "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                    "            view_data['view_id'] = view_id\n", 
                    "            view_data['type'] = view_type\n", 
                    "\n", 
                    "            view = View(self.request, self)\n", 
                    "            view.load(view_data)\n", 
                    "            self.add_export_view(view)\n", 
                    "\n", 
                    "            if view.fix():\n", 
                    "                view.save()\n", 
                    "\n", 
                    "    def _create_current_view(self):\n", 
                    "        view = View(self.request, self)\n", 
                    "        view_data = view.to_dict()\n", 
                    "        view_data['is_current'] = True\n", 
                    "        view_data['is_default'] = False\n", 
                    "        view_data['name'] = \"Current View\"\n", 
                    "        view_data['survey_id'] = self.id\n", 
                    "        view_data['type'] = 'standard'\n", 
                    "        view.load(view_data)\n", 
                    "        self.add_view(view)\n", 
                    "        return view\n", 
                    "\n", 
                    "    def _create_default_view(self):\n", 
                    "        view = View(self.request, self)\n", 
                    "        view_data = view.to_dict()\n", 
                    "        view_data['is_current'] = False\n", 
                    "        view_data['is_default'] = True\n", 
                    "        view_data['name'] = View.DEFAULT_VIEW_NAME\n", 
                    "        view_data['survey_id'] = self.id\n", 
                    "        view_data['type'] = 'standard'\n", 
                    "        view_data['page'] = 'all'\n", 
                    "\n", 
                    "        view.load(view_data)\n", 
                    "        self.add_view(view)\n", 
                    "        return view\n", 
                    "\n", 
                    "    def _create_quota_views(self):\n", 
                    "        if 'equations' not in self.quotas:\n", 
                    "            # A user can create part of a quota and not implement it so the\n", 
                    "            # survey has quotas but no equations. If so, we don't want to create\n", 
                    "            # the quota views until they finish creating the quota.\n", 
                    "            return\n", 
                    "        quota_question_map = self._translate_quotas()\n", 
                    "        for quota_group in self.quotas['equations']:\n", 
                    "            # each quota group has it's own view, and each quota groupd can have\n", 
                    "            # multiple questions and/or question answer option. The metadata,\n", 
                    "            # qna rules and completeness rule, are added to their quota view.\n", 
                    "            quota_view = View(self.request, self)\n", 
                    "            quota_view.survey = self\n", 
                    "            quota_view_data = quota_view.to_dict()\n", 
                    "            quota_view_data['name'] = quota_group['display_label']\n", 
                    "            quota_view_data['is_current'] = False\n", 
                    "            quota_view_data['is_default'] = False\n", 
                    "            quota_view_data['survey_id'] = self.id\n", 
                    "            quota_view_data['type'] = 'standard'\n", 
                    "            quota_view.load(quota_view_data)\n", 
                    "            quota_view.save()\n", 
                    "            self.add_view(quota_view)\n", 
                    "            for rules in quota_group['variables']:\n", 
                    "                # iterating through the the equation groups and using our map\n", 
                    "                # to get the question ids\n", 
                    "                question_option_group = rules['quota_question_option_group_id']\n", 
                    "                question_info = quota_question_map[question_option_group]\n", 
                    "                metadata_item = {\n", 
                    "                    'key': 'rule_filter_qna',\n", 
                    "                    'metadata_id': None,\n", 
                    "                    'option_id': None,\n", 
                    "                    'question_id': None,\n", 
                    "                    'view_id': quota_view.id,\n", 
                    "                    'value': {\n", 
                    "                        'rule_type': 'qna',\n", 
                    "                        'selected': True,\n", 
                    "                        'secondary_id': str(question_info['question_id']),\n", 
                    "                        'rows': {}\n", 
                    "                    }\n", 
                    "                }\n", 
                    "                for row in question_info['question_option_ids']:\n", 
                    "                    #this is for the answer options that are selected\n", 
                    "                    metadata_item['value'][\"rows\"][str(row)] = True\n", 
                    "                quota_view.add_or_update_metadata_item(metadata_item)\n", 
                    "            # completeness rule so we don't include overquota and disqualified\n", 
                    "            completeness_metadata = {\n", 
                    "                'key': 'rule_filter_completeness',\n", 
                    "                'value': {\n", 
                    "                    'rule_type': 'completeness',\n", 
                    "                    'rows': {\n", 
                    "                        'completely': True\n", 
                    "                    },\n", 
                    "                    'selected': True\n", 
                    "                },\n", 
                    "                'view_id': quota_view.id,\n", 
                    "                'metadata_id': None,\n", 
                    "                'option_id': None,\n", 
                    "                'question_id': None\n", 
                    "            }\n", 
                    "            quota_view.add_or_update_metadata_item(completeness_metadata)\n", 
                    "            quota_view.save_metadata()\n", 
                    "        self._add_autocreated_view_metadata(\"quota_views_created\")\n", 
                    "\n", 
                    "    def _create_random_assignment_views(self):\n", 
                    "        for ra in self.random_assignment_questions:\n", 
                    "            # each quota group has it's own view, and each quota groupd can have\n", 
                    "            # multiple questions and/or question answer option. The metadata,\n", 
                    "            # qna rules and completeness rule, are added to their quota view.\n", 
                    "\n", 
                    "            # We currently don't allow for compares on open_ended questions\n", 
                    "            if ra.type == 'open_ended' or \\\n", 
                    "               ra.type == 'demographic' or \\\n", 
                    "               ra.type == 'datetime':\n", 
                    "                continue\n", 
                    "            random_assignment_view = View(self.request, self)\n", 
                    "            random_assignment_view.survey = self\n", 
                    "            random_assignment_view_data = random_assignment_view.to_dict()\n", 
                    "\n", 
                    "            if len(ra.heading) > 0: \n", 
                    "                random_assignment_view_data['name'] = ra.heading\n", 
                    "            else:\n", 
                    "                random_assignment_view_data['name'] = \"Q%s A/B Test\" % (ra.position)\n", 
                    "\n", 
                    "            random_assignment_view_data['is_current'] = False\n", 
                    "            random_assignment_view_data['is_default'] = False\n", 
                    "            random_assignment_view_data['survey_id'] = self.id\n", 
                    "            random_assignment_view_data['type'] = 'standard'\n", 
                    "            random_assignment_view.load(random_assignment_view_data)\n", 
                    "            random_assignment_view.save()\n", 
                    "            self.add_view(random_assignment_view)\n", 
                    "            rows = {}\n", 
                    "            for rule in ra.random_assignment_list:\n", 
                    "                variable_id = rule['variable_id']\n", 
                    "                rows[str(variable_id)] = True\n", 
                    "                \n", 
                    "            # iterating through the the equation groups and using our map\n", 
                    "            # to get the question ids\n", 
                    "            metadata_item = {\n", 
                    "                'key': 'rule_compare_random_assignment',\n", 
                    "                'metadata_id': None,\n", 
                    "                'option_id': None,\n", 
                    "                'question_id': None,\n", 
                    "                'request': self.request,\n", 
                    "                'value': {\n", 
                    "                    'custom_heading': None,#rule['heading'],\n", 
                    "                    'family': ra.type,\n", 
                    "                    'subtype': ra.subtype,\n", 
                    "                    'question_id': int(ra.id),\n", 
                    "                    'rule_type': 'random_assignment',\n", 
                    "                    'selected': True,\n", 
                    "                    'rows': rows,\n", 
                    "                    'is_compare_rule': True,\n", 
                    "                },\n", 
                    "                'view_id': random_assignment_view.id,\n", 
                    "                'view': random_assignment_view,\n", 
                    "            }\n", 
                    "            random_assignment_view.add_or_update_metadata_item(metadata_item)\n", 
                    "            random_assignment_view.save_metadata()\n", 
                    "        self._add_autocreated_view_metadata(\"random_assignment_views_created\")\n", 
                    "\n", 
                    "    def _translate_quotas(self):\n", 
                    "        # must only be called on surveys with quotas!!\n", 
                    "        # AnSvc seperates the question option ids and question ids from the\n", 
                    "        # equations. We need to create a map for the equation group ids\n", 
                    "        # to the question ids, and selected question option ids.\n", 
                    "        quotas_questions = self.quotas['questions']\n", 
                    "        quota_question_map = {}\n", 
                    "        for question in quotas_questions:\n", 
                    "            question_id = question['question_id']\n", 
                    "            for options in question['option_groups']:\n", 
                    "                option_group_id = options['quota_question_option_group_id']\n", 
                    "                quota_question_map[option_group_id] = {\n", 
                    "                    'question_id': question_id,\n", 
                    "                    'question_option_ids': []\n", 
                    "                }\n", 
                    "                quota_question = quota_question_map[option_group_id]\n", 
                    "                question_option_ids = quota_question['question_option_ids']\n", 
                    "                for option in options['options']:\n", 
                    "                    question_option_ids.append(option['question_option_id'])\n", 
                    "        return quota_question_map\n", 
                    "\n", 
                    "    def _create_audience_view(self):\n", 
                    "        # creating audience view\n", 
                    "        log.info(\"Creating audience view for survey=%s\", self.id)\n", 
                    "        audience_view = View(self.request, self)\n", 
                    "        audience_view.survey = self\n", 
                    "        audience_view_data = audience_view.to_dict()\n", 
                    "        audience_view_data['name'] = \"View complete responses only\"\n", 
                    "        audience_view_data['is_current'] = False\n", 
                    "        audience_view_data['is_default'] = False\n", 
                    "        audience_view_data['survey_id'] = self.id\n", 
                    "        audience_view_data['type'] = 'standard'\n", 
                    "        audience_view.load(audience_view_data)\n", 
                    "        audience_view.save()\n", 
                    "        self.add_view(audience_view)\n", 
                    "\n", 
                    "        #add completeness rule to audience view\n", 
                    "        completeness_metadata = {\n", 
                    "            'key': 'rule_filter_completeness',\n", 
                    "            'value': {\n", 
                    "                'rule_type': 'completeness',\n", 
                    "                'rows': {\n", 
                    "                    'completely': True\n", 
                    "                },\n", 
                    "                'selected': True\n", 
                    "            },\n", 
                    "            'view_id': audience_view.id,\n", 
                    "            'metadata_id': None,\n", 
                    "            'option_id': None,\n", 
                    "            'question_id': None\n", 
                    "        }\n", 
                    "        audience_view.add_or_update_metadata_item(completeness_metadata)\n", 
                    "        audience_view.save_metadata()\n", 
                    "\n", 
                    "        # testing to see how many people buying audiences have unsaved\n", 
                    "        # rules to see if this step is even necessary\n", 
                    "        # check if current view is dirty\n", 
                    "\n", 
                    "        if not self.current_view.is_dirty:\n", 
                    "            if self.owner.package_type != 'BASIC':\n", 
                    "                log.info(\"switching from current view to audience view \"\n", 
                    "                \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                    "                self.switch_view(audience_view)\n", 
                    "            else:\n", 
                    "                log.info(\"cannot switch to audience view views because user \"\n", 
                    "                \"is basic for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                    "        else:\n", 
                    "            log.info(\"has unsaved rules, cannot switch to audience view \"\n", 
                    "                 \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                    "\n", 
                    "        self._add_autocreated_view_metadata(\"audience_views_created\")\n", 
                    "\n", 
                    "    def _add_autocreated_view_metadata(self, key):\n", 
                    "        # set metadata on the default view so we only create autocreated views\n", 
                    "        # once\n", 
                    "        autocreated_metadata = {\n", 
                    "            'key': key,\n", 
                    "            'value': {\n", 
                    "                'created': True\n", 
                    "            },\n", 
                    "            'view_id': self.default_view.id,\n", 
                    "            'metadata_id': None,\n", 
                    "            'option_id': None,\n", 
                    "            'question_id': None\n", 
                    "        }\n", 
                    "        self.default_view.add_or_update_metadata_item(autocreated_metadata)\n", 
                    "        self.default_view.save_metadata()\n", 
                    "\n", 
                    "    @property\n", 
                    "    def views(self):\n", 
                    "        \"\"\"Return a list of views.\"\"\"\n", 
                    "        self._populate_views()\n", 
                    "        return self._views_list[:]  # return copy!\n", 
                    "\n", 
                    "    @property\n", 
                    "    def export_views(self):\n", 
                    "        \"\"\"Return a list of views.\"\"\"\n", 
                    "        self._populate_export_views()\n", 
                    "        return self._export_views_list[:]  # return copy!\n", 
                    "\n", 
                    "    def add_view(self, view):\n", 
                    "        self._populate_views()\n", 
                    "        if str(view.survey_id) != str(self.id):\n", 
                    "            raise RuntimeError(\n", 
                    "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
                    "                \"to survey %(other_survey_id)s\" % {\n", 
                    "                    \"view_id\": view.id,\n", 
                    "                    \"survey_id\": self.id,\n", 
                    "                    \"other_survey_id\": view.survey_id\n", 
                    "                }\n", 
                    "            )\n", 
                    "\n", 
                    "        if view.is_current:\n", 
                    "            if self._current_view is None:\n", 
                    "                self._current_view = view\n", 
                    "            elif self._current_view != view:\n", 
                    "                raise CurrentViewAlreadyExistsError(\n", 
                    "                    \"survey=%s already has current_view=%s\" % (\n", 
                    "                        self.id,\n", 
                    "                        self._current_view.id\n", 
                    "                    )\n", 
                    "                )\n", 
                    "        elif view.is_default:\n", 
                    "            if self._default_view is None:\n", 
                    "                self._default_view = view\n", 
                    "            elif self._default_view != view:\n", 
                    "                raise DefaultViewAlreadyExistsError(\n", 
                    "                    \"survey=%s already has default_view=%s\" % (\n", 
                    "                        self.id,\n", 
                    "                        self._default_view.id\n", 
                    "                    )\n", 
                    "                )\n", 
                    "            self._default_view = view\n", 
                    "\n", 
                    "        self._views_list.append(view)\n", 
                    "        self._views_map[view.id] = view\n", 
                    "        view.survey = self  # backref\n", 
                    "\n", 
                    "    def switch_view(self, selected_view):\n", 
                    "        \"\"\"\n", 
                    "        Set the given selected view ``selected_view`` as the current view and\n", 
                    "        return the current view.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        self.current_view.copy(selected_view)\n", 
                    "        self.current_view.selected_view = selected_view\n", 
                    "\n", 
                    "        self.current_view.clear_metadata()\n", 
                    "\n", 
                    "        # Only copy metadata over if the selected view is not the default view\n", 
                    "        # because the default view should not have any rules saved on it.\n", 
                    "        if not selected_view.is_default and selected_view.has_metadata():\n", 
                    "            self.current_view.copy_metadata(selected_view)\n", 
                    "\n", 
                    "        return self.current_view\n", 
                    "\n", 
                    "    def add_export_view(self, view):\n", 
                    "        self._populate_export_views()\n", 
                    "        if view.survey_id != self.id:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
                    "                \"to survey %(other_survey_id)s\" % {\n", 
                    "                    \"view_id\": view.id,\n", 
                    "                    \"survey_id\": self.id,\n", 
                    "                    \"other_survey_id\": view.survey_id\n", 
                    "                }\n", 
                    "            )\n", 
                    "\n", 
                    "        self._export_views_list.append(view)\n", 
                    "        self._export_views_map[view.id] = view\n", 
                    "        view.survey = self  # backref\n", 
                    "\n", 
                    "    def add_export_job(self, export_job):\n", 
                    "        self._export_job_list.append(export_job)\n", 
                    "        self._export_job_map[export_job.id] = export_job\n", 
                    "        export_job.survey = self  # backref\n", 
                    "\n", 
                    "    def delete_export_job(self, export_id):\n", 
                    "        self._populate_export_jobs()\n", 
                    "        job = self._export_job_map.get(export_id)\n", 
                    "        if job is None:\n", 
                    "            return\n", 
                    "        job.delete()\n", 
                    "        self._export_job_list.remove(job)\n", 
                    "        del self._export_job_map[export_id]\n", 
                    "\n", 
                    "    def get_view_by_id(self, view_id):\n", 
                    "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
                    "        self._populate_views()\n", 
                    "        return self._views_map.get(view_id)\n", 
                    "\n", 
                    "    def get_shared_view_by_id(self, view_id):\n", 
                    "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
                    "        self._populate_shared_views()\n", 
                    "        return self._shared_views_map.get(view_id)\n", 
                    "\n", 
                    "    def get_export_view_by_id(self, view_id):\n", 
                    "        \"\"\"Return an export view given a ``view_id``\"\"\"\n", 
                    "        self._populate_export_views()\n", 
                    "        return self._export_views_map.get(view_id)\n", 
                    "\n", 
                    "    @property\n", 
                    "    def current_view(self):\n", 
                    "        self._populate_views()\n", 
                    "        return self._current_view\n", 
                    "\n", 
                    "    @property\n", 
                    "    def default_view(self):\n", 
                    "        self._populate_views()\n", 
                    "        return self._default_view\n", 
                    "\n", 
                    "    def get_respondent_trends(\n", 
                    "        self, first_respondent, last_respondent, trend_by,\n", 
                    "        filter_data=None, compare_data=None\n", 
                    "    ):\n", 
                    "        counts = self.request.ansvc.get_survey_respondent_trends(\n", 
                    "            self.id,\n", 
                    "            first_respondent.id,\n", 
                    "            last_respondent.id,\n", 
                    "            trend_by,\n", 
                    "            self.owner.utc_offset,\n", 
                    "            filter_data=filter_data,\n", 
                    "            compare_data=compare_data\n", 
                    "        )\n", 
                    "\n", 
                    "        return {\n", 
                    "            'respondent_count': counts['respondent_count'],\n", 
                    "            'trend_by': trend_by\n", 
                    "        }\n", 
                    "\n", 
                    "    def respondent_counts(self, filter_data=None, compare_data=None):\n", 
                    "        counts = self.request.ansvc.get_respondent_counts(\n", 
                    "            self.id,\n", 
                    "            self.owner.id,\n", 
                    "            filter_data,\n", 
                    "            compare_data,\n", 
                    "            self.owner.response_limit\n", 
                    "        )\n", 
                    "        return counts['respondent_count']\n", 
                    "\n", 
                    "    def num_of_respondents(self, respondent_counts):\n", 
                    "        num_of_respondents = respondent_counts['total_context']\n", 
                    "\n", 
                    "        if (\n", 
                    "            self.owner.has_respondent_limit() and\n", 
                    "            num_of_respondents >= self.owner.response_limit\n", 
                    "        ):\n", 
                    "            num_of_respondents = self.owner.response_limit\n", 
                    "\n", 
                    "        return num_of_respondents\n", 
                    "\n", 
                    "    def add_page(self, page):\n", 
                    "        # Remove str() when this gets fixed:\n", 
                    "        # https://monkeys.jira.com/browse/GORILLA-922\n", 
                    "        if str(page.survey_id) != self.id:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to add page which survey ID differs\"\n", 
                    "            )\n", 
                    "        page.survey = self  # backref\n", 
                    "        self._page_list.append(page)\n", 
                    "        self._page_map[page.id] = page\n", 
                    "        self._page_map_by_index[page.index] = page\n", 
                    "\n", 
                    "    def add_question(self, question):\n", 
                    "        # FIXME: Check that the question belongs to the survey (via the page)\n", 
                    "        # when this \"surveyservice\" ticket is fixed:\n", 
                    "        # https://monkeys.jira.com/browse/GORILLA-923\n", 
                    "        if question.page.survey.id != self.id:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to add question which page's ID differs\"\n", 
                    "            )\n", 
                    "        question.survey = self  # backref\n", 
                    "        self._question_list.append(question)\n", 
                    "        self._question_map[question.id] = question\n", 
                    "\n", 
                    "    @property\n", 
                    "    def pages(self):\n", 
                    "        \"\"\"Return a list of pages.\"\"\"\n", 
                    "        self._populate_pages()\n", 
                    "        return self._page_list[:]  # return copy!\n", 
                    "\n", 
                    "    @property\n", 
                    "    def shown_pages(self):\n", 
                    "        \"\"\"Return a list of pages that shown by the show rule.\"\"\"\n", 
                    "        pages = []\n", 
                    "        for page in self.pages:\n", 
                    "            if self.current_view.shows_page(page):\n", 
                    "                pages.append(page)\n", 
                    "        return pages\n", 
                    "\n", 
                    "    def get_first_showable_page(self):\n", 
                    "        \"\"\"\n", 
                    "        Return the first showable (analyzable) page. If no page is\n", 
                    "        considered showable, return None. The show rule on the current view is\n", 
                    "        also taken into consideration to decide whether or not the page is\n", 
                    "        showable.\n", 
                    "\n", 
                    "        In analyze terms, a page is considered to be showable if the page\n", 
                    "        contains at least one \"real\" question that can be answered by a\n", 
                    "        respondent.\n", 
                    "\n", 
                    "        E.g., \"presentation\" questions are not considered to be showable.\n", 
                    "        Unless they are random assignment presentation questions.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        for page in self.shown_pages:\n", 
                    "            for question in page.questions:\n", 
                    "                if not question.is_presentation():\n", 
                    "                    return page\n", 
                    "                elif question.has_random_assignment:\n", 
                    "                    return page\n", 
                    "\n", 
                    "    def get_suggested_default_page_index(self):\n", 
                    "        \"\"\"\n", 
                    "        Return the suggested default page index to show to the user.\n", 
                    "\n", 
                    "        The value is either the page's index or the string \"all\" meaning that\n", 
                    "        all pages should be shown.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        if len(self.pages) > 1 and len(self.questions) > 30:\n", 
                    "\n", 
                    "            first_showable_page = self.get_first_showable_page()\n", 
                    "\n", 
                    "            if first_showable_page is None:\n", 
                    "                return self.pages[0].index\n", 
                    "\n", 
                    "            return first_showable_page.index\n", 
                    "\n", 
                    "        return \"all\"\n", 
                    "\n", 
                    "\n", 
                    "    @property\n", 
                    "    def questions(self):\n", 
                    "        self._populate_pages()\n", 
                    "        return self._question_list[:]  # return copy!\n", 
                    "    \n", 
                    "    @property\n", 
                    "    def has_random_assignment(self):\n", 
                    "        for q in self.questions:\n", 
                    "            if q.has_random_assignment:\n", 
                    "                return True\n", 
                    "        return False\n", 
                    "\n", 
                    "    @property\n", 
                    "    def random_assignment_questions(self):\n", 
                    "        random_assignment_questions = []\n", 
                    "        for q in self.questions:\n", 
                    "            if q.has_random_assignment:\n", 
                    "                random_assignment_questions.append(q)\n", 
                    "        return random_assignment_questions\n", 
                    "\n", 
                    "    @property\n", 
                    "    def summary_data_questions(self):\n", 
                    "        \"\"\"\n", 
                    "        random assignment presentation questions included because they have\n", 
                    "        summary data\n", 
                    "        \"\"\"\n", 
                    "        return [q for q in self.questions if not q.is_presentation() \\\n", 
                    "            or q.has_random_assignment]\n", 
                    "\n", 
                    "    def get_question_by_id(self, question_id):\n", 
                    "        self._populate_pages()\n", 
                    "        return self._question_map.get(question_id)\n", 
                    "\n", 
                    "    def get_page_by_id(self, page_id):\n", 
                    "        self._populate_pages()\n", 
                    "        return self._page_map.get(page_id)\n", 
                    "\n", 
                    "    @property\n", 
                    "    def export_jobs(self):\n", 
                    "        try:\n", 
                    "            self._populate_export_jobs()\n", 
                    "        except ServiceError:\n", 
                    "            return\n", 
                    "        return self._export_job_list[:]  # return copy!\n", 
                    "\n", 
                    "    def get_exportjob_by_id(self, job_id):\n", 
                    "        try:\n", 
                    "            self._populate_export_jobs()\n", 
                    "        except ServiceError:\n", 
                    "            return\n", 
                    "        return self._export_job_map.get(job_id)\n", 
                    "\n", 
                    "    @property\n", 
                    "    def theme(self):\n", 
                    "        self._populate_theme()\n", 
                    "        return self._theme\n", 
                    "\n", 
                    "    @property\n", 
                    "    def design_settings(self):\n", 
                    "        self._populate_design_settings()\n", 
                    "        return self._design_settings\n", 
                    "\n", 
                    "    def _populate_theme(self):\n", 
                    "        if self._populated_theme:\n", 
                    "            return\n", 
                    "\n", 
                    "        self._populate_pages()\n", 
                    "        #self._populate_structure()  # required for the theme ID\n", 
                    "        theme_id = self.design_settings['theme_id']\n", 
                    "        theme_data = self.request.svysvc.get_theme(theme_id)\n", 
                    "        self._populated_theme = True\n", 
                    "\n", 
                    "        self._theme = theme_data\n", 
                    "\n", 
                    "    def _populate_design_settings(self):\n", 
                    "        if self._populated_design_settings:\n", 
                    "            return\n", 
                    "\n", 
                    "        # only include panel if there is a configured audience\n", 
                    "        survey_data = self.request.svysvc.get_survey(\n", 
                    "            self.id,\n", 
                    "            self.owner.id,\n", 
                    "            include_design_settings=True,\n", 
                    "            include_panel=self.has_configured_audience\n", 
                    "        )\n", 
                    "\n", 
                    "        self._design_settings = survey_data['design_settings']\n", 
                    "\n", 
                    "    @property\n", 
                    "    def question_logic(self):\n", 
                    "        self._populate_logic()\n", 
                    "        return self._question_logic\n", 
                    "\n", 
                    "    @property\n", 
                    "    def page_logic(self):\n", 
                    "        self._populate_logic()\n", 
                    "        return self._page_logic\n", 
                    "\n", 
                    "    def _populate_logic(self):\n", 
                    "        if self._populated_logic:\n", 
                    "            return\n", 
                    "\n", 
                    "        survey_data = self.request.svysvc.get_survey(\n", 
                    "            self.id,\n", 
                    "            self.owner.id,\n", 
                    "            include_logic=True\n", 
                    "        )\n", 
                    "\n", 
                    "        self._question_logic = survey_data['logic'].get('question_logic')\n", 
                    "        self._page_logic = survey_data['logic'].get('page_logic')\n", 
                    "\n", 
                    "        self._populated_logic = True\n", 
                    "\n", 
                    "    def _populate_export_jobs(self):\n", 
                    "        if self._populated_export_jobs:\n", 
                    "            return\n", 
                    "\n", 
                    "        export_jobs_data = self.request.jobsvc.get_export_jobs(self.id)\n", 
                    "        for job_data in export_jobs_data['export_jobs']:\n", 
                    "            export_job = ViewExportJob(self.request)\n", 
                    "            export_job.load(job_data)\n", 
                    "            self.add_export_job(export_job)\n", 
                    "\n", 
                    "        self._populated_export_jobs = True\n", 
                    "\n", 
                    "    def get_page_by_index(self, index):\n", 
                    "        self._populate_pages()\n", 
                    "        return self._page_map_by_index.get(index)\n", 
                    "\n", 
                    "    @property\n", 
                    "    def language(self):\n", 
                    "        self._populate_survey()\n", 
                    "        for lang in self.language_options:\n", 
                    "            if lang['id'] == self._language_id:\n", 
                    "                return lang\n", 
                    "\n", 
                    "    def _get_owner_language(self):\n", 
                    "        ''' returns the english name of the current user's language '''\n", 
                    "        language = get_language_from_country_code(self.owner.language_code)\n", 
                    "        return language.name.lower()\n", 
                    "\n", 
                    "    def _get_ta_question_rollups(self, questions, filter_data=None,\n", 
                    "                                compare_data=None, expand_all=None):\n", 
                    "        '''\n", 
                    "        expand_all determines whether we will expand all the possible text items\n", 
                    "        or just the essay questions.\n", 
                    "\n", 
                    "        '''\n", 
                    "        rollups = {}\n", 
                    "\n", 
                    "        # compared questions are only expanded by the user\n", 
                    "        # or if expand_all == True\n", 
                    "        if (\n", 
                    "            expand_all is None and\n", 
                    "            compare_data is not None and\n", 
                    "            'right' in compare_data\n", 
                    "            ):\n", 
                    "            return rollups\n", 
                    "\n", 
                    "        # prepare a default set of parameters for each question\n", 
                    "        default_params = self._prepare_ta_rollup(filter_data,\n", 
                    "                                                compare_data, expand_all)\n", 
                    "\n", 
                    "        if self.owner.has_respondent_limit():\n", 
                    "            response_limit = self.owner.response_limit\n", 
                    "            default_params['common']['response_limitation'] = response_limit\n", 
                    "\n", 
                    "        for question in questions:\n", 
                    "            rollups[question.id] = question.ta_preget_rollup_by_question(\n", 
                    "                                    default_params, expand_all)\n", 
                    "\n", 
                    "        return rollups\n", 
                    "\n", 
                    "    def _get_random_assignment_ta_rollup(self, question, variation_id_list,\n", 
                    "                                        filter_data=None, compare_data=None,\n", 
                    "                                        expand_all=None, option_id=0):\n", 
                    "        \"\"\"\n", 
                    "        random assignment ta rollups need a different structure\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        rollups = {}\n", 
                    "\n", 
                    "        # compared questions are only expanded by the user\n", 
                    "        # or if expand_all == True\n", 
                    "        if (\n", 
                    "            expand_all is None and\n", 
                    "            compare_data is not None and\n", 
                    "            'right' in compare_data\n", 
                    "            ):\n", 
                    "            return rollups\n", 
                    "\n", 
                    "        # prepare a default set of parameters for each question\n", 
                    "        for variation in variation_id_list:\n", 
                    "            default_params = self._prepare_ta_rollup(filter_data, compare_data,\n", 
                    "                expand_all, variation)\n", 
                    "            if self.owner.has_respondent_limit():\n", 
                    "                response_limit = self.owner.response_limit\n", 
                    "                default_params['common']['response_limitation'] = response_limit\n", 
                    "            ta_rollup = question.ta_preget_rollup_by_question(\n", 
                    "                            default_params, expand_all, option_id, variation)\n", 
                    "\n", 
                    "        return ta_rollup\n", 
                    "\n", 
                    "    def _prepare_ta_rollup(self, filter_data=None, compare_data=None,\n", 
                    "                            expand_all=None, option_id=0, variation_id=0):\n", 
                    "        \"\"\"\n", 
                    "        prepares rollups for all questions having text responses\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "\n", 
                    "        return {\n", 
                    "            'common': {\n", 
                    "                'option_id': option_id,\n", 
                    "                'variation_id': variation_id,\n", 
                    "                'crosstab_option_id': None,\n", 
                    "                'matrix_crosstab': None,\n", 
                    "                'filter': filter_data,\n", 
                    "                'crosstab': compare_data\n", 
                    "            },\n", 
                    "            'response': {\n", 
                    "                'language': self._get_owner_language(),\n", 
                    "                # should get this from the client as well\n", 
                    "                #'page_size': data['page_size']\n", 
                    "                'page_size': 50,\n", 
                    "                'offset': 0,\n", 
                    "                'include_question_response_count': 1,\n", 
                    "                'include_question_tags': 1,\n", 
                    "                'restrict_by_tag_ids': None,\n", 
                    "            },\n", 
                    "            'analysis': {\n", 
                    "                'hide_ids': 1\n", 
                    "            }\n", 
                    "        }\n", 
                    "\n", 
                    "    @prof(depth=5)#, include_variables=['questions', 'rollups'])\n", 
                    "    def get_question_rollups(self, questions, filter_data=None,\n", 
                    "                             compare_data=None, expand_all=None,\n", 
                    "                             include_openended=True):\n", 
                    "        \"\"\"\n", 
                    "        Return a dictionary of question rollup data for the currently showing\n", 
                    "        page. Filters and compare data will be applied if they exist on the\n", 
                    "        current view.\n", 
                    "\n", 
                    "        A list of Question instances may be passed as ``questions``, then only\n", 
                    "        the rollup data for these questions will be returned.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        rollups = {}  # returned data\n", 
                    "        input_question_list = []  # input for ansvc\n", 
                    "        ta_question_list = []  # input for tasvc\n", 
                    "        random_assignment_ta_list = []  # input for tasvc\n", 
                    "\n", 
                    "        for question in questions:\n", 
                    "            if question.is_presentation() and \\\n", 
                    "                not question.has_random_assignment:\n", 
                    "                # skip \"presentation\" questions that don't have summary data\n", 
                    "                continue\n", 
                    "\n", 
                    "            # We always return a dict of rollups that have all the requested\n", 
                    "            # questions. If the question doesn't have rollup data, it rollup\n", 
                    "            # value will be None.\n", 
                    "            rollups[question.id] = None\n", 
                    "            input_question_list.append(question)\n", 
                    "            if (\n", 
                    "                include_openended and\n", 
                    "                question.has_text and not\n", 
                    "                question.random_assignment_list\n", 
                    "            ):\n", 
                    "                ta_question_list.append(question)\n", 
                    "\n", 
                    "        if not input_question_list:\n", 
                    "            # If the survey doesn't have any questions, return an empty rollup\n", 
                    "            # dictionary\n", 
                    "            return rollups\n", 
                    "\n", 
                    "        questions_data = []\n", 
                    "\n", 
                    "        for question in input_question_list:\n", 
                    "            q_data = {\n", 
                    "                'question_id': question.id,\n", 
                    "                'question_type': {\n", 
                    "                    'family': question.type,\n", 
                    "                    'subtype': question.subtype\n", 
                    "                },\n", 
                    "            }\n", 
                    "            if question.random_assignment_list:\n", 
                    "                q_data['random_assignment_vars'] = [str(ra['variable_id']) for ra in question.random_assignment_list]\n", 
                    "                if include_openended and question.has_text:\n", 
                    "                    random_assignment_ta_list.append(question)\n", 
                    "            questions_data.append(q_data)\n", 
                    "\n", 
                    "        is_ra_compare = False\n", 
                    "        is_ra_filter = False\n", 
                    "\n", 
                    "        if compare_data is not None:\n", 
                    "            if compare_data['type'] == 'random_assignment':\n", 
                    "                is_ra_compare = True\n", 
                    "        elif filter_data is not None:\n", 
                    "            if filter_data['left'] == 'question.ra':\n", 
                    "                is_ra_filter = True\n", 
                    "\n", 
                    "        if is_ra_compare:\n", 
                    "            response = self.request.ansvc.get_compare_rollups(\n", 
                    "                self.id,\n", 
                    "                self.owner.id,\n", 
                    "                questions_data,\n", 
                    "                filter_data,\n", 
                    "                compare_data,\n", 
                    "                self.owner.response_limit\n", 
                    "            )\n", 
                    "        elif False:  # is_ra_filter:\n", 
                    "            response = self.request.ansvc.get_questions_rollups_v2(\n", 
                    "                self.id,\n", 
                    "                self.owner.id,\n", 
                    "                questions_data,\n", 
                    "                filter_data,\n", 
                    "                compare_data,\n", 
                    "                self.owner.response_limit\n", 
                    "            )\n", 
                    "        else:\n", 
                    "            response = self.request.ansvc.get_questions_rollups(\n", 
                    "                self.id,\n", 
                    "                self.owner.id,\n", 
                    "                questions_data,\n", 
                    "                filter_data,\n", 
                    "                compare_data,\n", 
                    "                self.owner.response_limit\n", 
                    "            )\n", 
                    "\n", 
                    "        # unwrap rollups to the top-level of the dict\n", 
                    "        response = response[self.id]\n", 
                    "\n", 
                    "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
                    "        rollups.update(response)\n", 
                    "\n", 
                    "        ta_rollups = self._get_ta_question_rollups(\n", 
                    "            ta_question_list,\n", 
                    "            filter_data,\n", 
                    "            compare_data,\n", 
                    "            expand_all\n", 
                    "        )\n", 
                    "\n", 
                    "        for question_id in ta_rollups:\n", 
                    "            rollups[question_id]['summary']['ta_data'] = ta_rollups[question_id]\n", 
                    "\n", 
                    "        # Puts the TA data into questions that have random assignment in them\n", 
                    "        for question in random_assignment_ta_list:\n", 
                    "            for variable in question.random_assignment_list:\n", 
                    "                variable_id = str(variable['variable_id'])\n", 
                    "\n", 
                    "                # This is needed because on random_assignment compares, we\n", 
                    "                #   merge the question that is the source of the compare, thus we\n", 
                    "                #   don't seperate it by variation_id\n", 
                    "                if variable_id in rollups[question.id]:\n", 
                    "                    question_variable_rollup = rollups[question.id][variable_id]\n", 
                    "                else:\n", 
                    "                    variable_id == '0'\n", 
                    "                    question_variable_rollup = rollups[question.id]\n", 
                    "\n", 
                    "                if question.other_option:\n", 
                    "                    option_id = str(question.other_option['id'])\n", 
                    "                else:\n", 
                    "                    option_id = '0'\n", 
                    "\n", 
                    "                ta_rollup_data = self._get_random_assignment_ta_rollup(\n", 
                    "                                question, [variable_id],\n", 
                    "                                filter_data, compare_data,\n", 
                    "                                expand_all, option_id)\n", 
                    "\n", 
                    "                question_variable_rollup['summary']['ta_data'] = ta_rollup_data\n", 
                    "        \n", 
                    "        return rollups\n", 
                    "    \n", 
                    "\n", 
                    "    @property\n", 
                    "    def resource_path(self):\n", 
                    "        # taken from smlib.webmodels\n", 
                    "        if self.id is None:\n", 
                    "            raise Exception(\"survey id required\")\n", 
                    "\n", 
                    "        resource_path_prefix = self.request.registry.settings['dotnet.resource_path_prefix']\n", 
                    "        resource_host = self.request.registry.settings['dotnet.resource_host']\n", 
                    "        survey_id_modded = int(self.id) % 30000\n", 
                    "        return \"//%s/%s/%s/%s/\" % (resource_host, resource_path_prefix, survey_id_modded, self.id)\n", 
                    "\n", 
                    "\n", 
                    "    def get_questions_responses_trends(\n", 
                    "        self, first_respondent, last_respondent, default_trend_by, questions,\n", 
                    "        filter_data=None, compare_data=None\n", 
                    "    ):\n", 
                    "        \"\"\"\n", 
                    "        Return a dictionary of question rollup data for the currently showing\n", 
                    "        page. Filters and compare data will be applied if they exist on the\n", 
                    "        current view.\n", 
                    "\n", 
                    "        A list of Question instances may be passed as ``questions``, then only\n", 
                    "        the rollup data for these questions will be returned.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        rollups = {}  # returned data\n", 
                    "        input_question_list = []  # input for ansvc\n", 
                    "\n", 
                    "        for question in questions:\n", 
                    "            if not question.is_trendable():\n", 
                    "                continue\n", 
                    "            input_question_list.append(question)\n", 
                    "\n", 
                    "            # if the question has no data (no answers), we want to keep track\n", 
                    "            # that the rollup for this question was at least requested\n", 
                    "            rollups[question.id] = None\n", 
                    "\n", 
                    "        if not input_question_list:\n", 
                    "            # If the survey doesn't have any questions, return an empty rollup\n", 
                    "            # dictionary\n", 
                    "            return rollups\n", 
                    "\n", 
                    "        questions_data = []\n", 
                    "        for question in input_question_list:\n", 
                    "            q_data = {\n", 
                    "                'question_id': question.id,\n", 
                    "                'question_type': {\n", 
                    "                    'family': question.type,\n", 
                    "                    'subtype': question.subtype\n", 
                    "                },\n", 
                    "                'trend_data': {\n", 
                    "                    'trend_by': question.trend_by or default_trend_by,\n", 
                    "                    'first_respondent': first_respondent.id,\n", 
                    "                    'last_respondent': last_respondent.id,\n", 
                    "                    'utc_offset': self.owner.utc_offset\n", 
                    "                }\n", 
                    "            }\n", 
                    "\n", 
                    "            questions_data.append(q_data)\n", 
                    "\n", 
                    "        response = self.request.ansvc.get_questions_responses_trends(\n", 
                    "            self.id,\n", 
                    "            self.owner.id,\n", 
                    "            questions_data,\n", 
                    "            filter_data,\n", 
                    "            compare_data\n", 
                    "        )\n", 
                    "        response = response[self.id]  # unwrap rollups to the top-level of the dict\n", 
                    "\n", 
                    "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
                    "        rollups.update(response)\n", 
                    "\n", 
                    "        return rollups\n", 
                    "\n", 
                    "    def to_dict(self, include_collectors=False, include_theme=False):\n", 
                    "        \"\"\"\n", 
                    "        Return the whole survey structure.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        survey_data = {\n", 
                    "            'id': self.id,\n", 
                    "            'date_created': self.date_created,\n", 
                    "            'date_modified': self.date_modified,\n", 
                    "            'date_deleted': self.date_deleted,\n", 
                    "            'title': self.title,\n", 
                    "            'nickname': self.nickname,\n", 
                    "            'version': self.version,\n", 
                    "            'num_responses': self.num_responses,\n", 
                    "            'language': self.language,\n", 
                    "            'user_id': self.owner.id,\n", 
                    "            'answers': self._answer_map,\n", 
                    "            'has_panel_page': self.has_panel_page,\n", 
                    "            'question_count': self.question_count,\n", 
                    "            'design_settings': self.design_settings,\n", 
                    "            'theme_settings': self.theme if include_theme else None,\n", 
                    "            'quotas': self.quotas,\n", 
                    "            'page_logic': self.page_logic,\n", 
                    "            'question_logic': self.question_logic,\n", 
                    "            'has_logic': True if (\n", 
                    "                self.page_logic or self.question_logic\n", 
                    "            ) else False,\n", 
                    "            'has_randomization': True if (\n", 
                    "                self.has_page_randomization or\n", 
                    "                self.has_question_randomization\n", 
                    "            ) else False,\n", 
                    "            'mangled_id': self.mangled_id,\n", 
                    "            'preview_link': self.preview_link,\n", 
                    "            'resource_path': self.resource_path\n", 
                    "        }\n", 
                    "\n", 
                    "        if self._populated_pages:\n", 
                    "            survey_data.update({\n", 
                    "                'page_ids': [page.id for page in self.pages],\n", 
                    "                'questions': dict((q.id, q.to_dict()) for q in self.questions),\n", 
                    "                'pages': dict((p.id, p.to_dict()) for p in self.pages)\n", 
                    "            })\n", 
                    "        if self._populated_collectors or include_collectors:\n", 
                    "            survey_data.update({\n", 
                    "                'collectors': [c.to_dict() for c in self.collectors],\n", 
                    "                'has_collector': self.has_collector,\n", 
                    "                'has_email_collector': self.has_email_collector,\n", 
                    "                'has_open_collector': self.has_open_collector,\n", 
                    "                'has_all_closed_collectors': self.has_all_closed_collectors,\n", 
                    "                'has_unconfigured_collector': self.has_unconfigured_collector\n", 
                    "            })\n", 
                    "\n", 
                    "        return survey_data\n", 
                    "\n", 
                    "\n"
                ], 
                "name": "Survey", 
                "obj_type": "class", 
                "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                "returns": [], 
                "variables": [
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2565f50>, 'target': '_populated_collectors', 'line_index_start': 33, 'value': 'False', 'line_index_end': 33, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1050>, 'target': '_populated_export_jobs', 'line_index_start': 34, 'value': 'False', 'line_index_end': 34, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1110>, 'target': '_populated_export_views', 'line_index_start': 35, 'value': 'False', 'line_index_end': 35, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c11d0>, 'target': '_populated_owners', 'line_index_start': 36, 'value': 'False', 'line_index_end': 36, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1290>, 'target': '_populated_theme', 'line_index_start': 37, 'value': 'False', 'line_index_end': 37, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1350>, 'target': '_populated_pages', 'line_index_start': 38, 'value': 'False', 'line_index_end': 38, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1410>, 'target': '_populated_survey', 'line_index_start': 39, 'value': 'False', 'line_index_end': 39, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c14d0>, 'target': '_populated_user_features', 'line_index_start': 40, 'value': 'False', 'line_index_end': 40, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1590>, 'target': '_populated_views', 'line_index_start': 41, 'value': 'False', 'line_index_end': 41, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1650>, 'target': '_populated_design_settings', 'line_index_start': 42, 'value': 'False', 'line_index_end': 42, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1710>, 'target': '_populated_logic', 'line_index_start': 43, 'value': 'False', 'line_index_end': 43, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c17d0>, 'target': '_populated_shared_views', 'line_index_start': 44, 'value': 'False', 'line_index_end': 45, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1890>, 'target': '_current_view', 'line_index_start': 46, 'value': 'None', 'line_index_end': 46, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1950>, 'target': '_default_view', 'line_index_start': 47, 'value': 'None', 'line_index_end': 48, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1a10>, 'target': '_date_created', 'line_index_start': 49, 'value': 'None', 'line_index_end': 49, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1ad0>, 'target': '_date_modified', 'line_index_start': 50, 'value': 'None', 'line_index_end': 50, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1b90>, 'target': '_date_deleted', 'line_index_start': 51, 'value': 'None', 'line_index_end': 51, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1c50>, 'target': '_title', 'line_index_start': 52, 'value': 'None', 'line_index_end': 52, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1d10>, 'target': 'version', 'line_index_start': 53, 'value': 'None', 'line_index_end': 53, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1dd0>, 'target': 'nickname', 'line_index_start': 54, 'value': 'None', 'line_index_end': 54, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1e90>, 'target': 'num_responses', 'line_index_start': 55, 'value': 'None', 'line_index_end': 55, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1f50>, 'target': '_language_id', 'line_index_start': 56, 'value': 'None', 'line_index_end': 56, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c2050>, 'target': '_theme', 'line_index_start': 57, 'value': 'None', 'line_index_end': 58, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c2110>, 'target': 'language_options', 'line_index_start': 59, 'line_index_end': 119, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}"
                ]
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1707, 
                        "line_index_start": 1703, 
                        "lines": [
                            "    def __init__(self, request):\n", 
                            "        self.request = request\n", 
                            "        self._question_list = []\n", 
                            "        self._question_map = {}\n", 
                            "\n"
                        ], 
                        "name": "__init__", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236bd10>, 'line_index_start': 1704, 'value': 'request', 'line_index_end': 1704, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad450>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236be10>, 'line_index_start': 1705, 'line_index_end': 1705, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad450>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236bf10>, 'line_index_start': 1706, 'line_index_end': 1707, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad450>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236d710>, 'name': 'property', 'line_index_start': 1708, 'line_index_end': 1709, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad550>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1721, 
                        "line_index_start": 1708, 
                        "lines": [
                            "    @property\n", 
                            "    def edit_link(self):\n", 
                            "        #/MySurvey_EditorPage.aspx?sm=ALFEvPW9xjVqGpg5j9RNK4p1LERFeyh15O4IyBL9YkgpxQj1bS0JB%2f1t8uOA6gji\n", 
                            "        if self.survey_id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        mangled = encrypt_mangled(\n", 
                            "            \"SurveyID=%s&SectionID=%s&\" % (self.survey_id, self.id)\n", 
                            "        )\n", 
                            "\n", 
                            "        return \"/MySurvey_EditorPage.aspx?sm=%s\" % mangled\n", 
                            "\n"
                        ], 
                        "name": "edit_link", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1720, 'ast_node': <_ast.Return object at 0x236d610>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad550>, 'obj_type': 'return', 'line_index_end': 1721}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236d350>, 'target': 'mangled', 'line_index_start': 1716, 'line_index_end': 1719, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad550>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236d950>, 'name': 'property', 'line_index_start': 1722, 'line_index_end': 1723, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad650>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1725, 
                        "line_index_start": 1722, 
                        "lines": [
                            "    @property\n", 
                            "    def index(self):\n", 
                            "        return self.position - 1\n", 
                            "\n"
                        ], 
                        "name": "index", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1724, 'ast_node': <_ast.Return object at 0x236d810>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad650>, 'obj_type': 'return', 'line_index_end': 1725}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236db90>, 'name': 'property', 'line_index_start': 1726, 'line_index_end': 1727, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad710>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1729, 
                        "line_index_start": 1726, 
                        "lines": [
                            "    @property\n", 
                            "    def questions(self):\n", 
                            "        return self._question_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1728, 'ast_node': <_ast.Return object at 0x236da50>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad710>, 'obj_type': 'return', 'line_index_end': 1729}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236df50>, 'name': 'property', 'line_index_start': 1730, 'line_index_end': 1731, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad7d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1736, 
                        "line_index_start": 1730, 
                        "lines": [
                            "    @property\n", 
                            "    def has_random_assignment(self):\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                return True\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_random_assignment", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x236ded0>, 'line_index_start': 1735, 'value': 'False', 'line_index_end': 1736, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad7d0>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1739, 
                        "line_index_start": 1737, 
                        "lines": [
                            "    def has_question(self, question):\n", 
                            "        return self._question_map.get(question.id)\n", 
                            "\n"
                        ], 
                        "name": "has_question", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1738, 'ast_node': <_ast.Return object at 0x236e0d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad890>, 'obj_type': 'return', 'line_index_end': 1739}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1744, 
                        "line_index_start": 1740, 
                        "lines": [
                            "    def add_question(self, question):\n", 
                            "        self._question_list.append(question)\n", 
                            "        self._question_map[question.id] = question\n", 
                            "        question.page = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_question", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236e510>, 'line_index_start': 1742, 'value': 'question', 'line_index_end': 1742, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236e710>, 'line_index_start': 1743, 'value': 'self', 'line_index_end': 1744, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad910>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1760, 
                        "line_index_start": 1745, 
                        "lines": [
                            "    def load(self, page_data):\n", 
                            "        questions = page_data['questions']\n", 
                            "        self.question_ids = []\n", 
                            "        self.heading = page_data['heading']\n", 
                            "        self.id = str(page_data['page_id'])\n", 
                            "        self.position = page_data['position']\n", 
                            "        self.question_ids = []\n", 
                            "        self.has_question_randomization = page_data['question_randomization']['enabled']\n", 
                            "        for q in questions:\n", 
                            "            question = Question(self.request)\n", 
                            "            question.load(q)\n", 
                            "            self.add_question(question)\n", 
                            "            self.question_ids.append(question.id)\n", 
                            "        self.sub_heading = page_data['sub_heading']\n", 
                            "        self.survey_id = page_data['survey_id']\n", 
                            "\n"
                        ], 
                        "name": "load", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236e910>, 'target': 'questions', 'line_index_start': 1746, 'line_index_end': 1746, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ea90>, 'line_index_start': 1747, 'line_index_end': 1747, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236eb90>, 'line_index_start': 1748, 'line_index_end': 1748, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ed50>, 'line_index_start': 1749, 'line_index_end': 1749, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ef90>, 'line_index_start': 1750, 'line_index_end': 1750, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370190>, 'line_index_start': 1751, 'line_index_end': 1751, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370290>, 'line_index_start': 1752, 'line_index_end': 1752, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370b90>, 'line_index_start': 1758, 'line_index_end': 1758, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370d50>, 'line_index_start': 1759, 'line_index_end': 1760, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1772, 
                        "line_index_start": 1761, 
                        "lines": [
                            "    def to_dict(self):\n", 
                            "        question_ids = [question.id for question in self.questions]\n", 
                            "\n", 
                            "        return {\n", 
                            "            'heading': self.heading,\n", 
                            "            'sub_heading': self.sub_heading,\n", 
                            "            'id': self.id,\n", 
                            "            'position': self.position,\n", 
                            "            'question_ids': question_ids,\n", 
                            "            'survey_id': self.survey_id,\n", 
                            "            'edit_link': self.edit_link\n", 
                            "        }\n"
                        ], 
                        "name": "to_dict", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1764, 'ast_node': <_ast.Return object at 0x2371250>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27adc50>, 'obj_type': 'return', 'line_index_end': 1772}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370fd0>, 'target': 'question_ids', 'line_index_start': 1762, 'line_index_end': 1763, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27adc50>, 'targets': []}"
                        ]
                    }
                ], 
                "classes": [], 
                "comments": [], 
                "decorators": [], 
                "docstring": "A page. Also referred as a survey page.", 
                "functions": [
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1707, 
                        "line_index_start": 1703, 
                        "lines": [
                            "    def __init__(self, request):\n", 
                            "        self.request = request\n", 
                            "        self._question_list = []\n", 
                            "        self._question_map = {}\n", 
                            "\n"
                        ], 
                        "name": "__init__", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236bd10>, 'line_index_start': 1704, 'value': 'request', 'line_index_end': 1704, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad450>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236be10>, 'line_index_start': 1705, 'line_index_end': 1705, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad450>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236bf10>, 'line_index_start': 1706, 'line_index_end': 1707, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad450>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236d710>, 'name': 'property', 'line_index_start': 1708, 'line_index_end': 1709, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad550>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1721, 
                        "line_index_start": 1708, 
                        "lines": [
                            "    @property\n", 
                            "    def edit_link(self):\n", 
                            "        #/MySurvey_EditorPage.aspx?sm=ALFEvPW9xjVqGpg5j9RNK4p1LERFeyh15O4IyBL9YkgpxQj1bS0JB%2f1t8uOA6gji\n", 
                            "        if self.survey_id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        mangled = encrypt_mangled(\n", 
                            "            \"SurveyID=%s&SectionID=%s&\" % (self.survey_id, self.id)\n", 
                            "        )\n", 
                            "\n", 
                            "        return \"/MySurvey_EditorPage.aspx?sm=%s\" % mangled\n", 
                            "\n"
                        ], 
                        "name": "edit_link", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1720, 'ast_node': <_ast.Return object at 0x236d610>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad550>, 'obj_type': 'return', 'line_index_end': 1721}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236d350>, 'target': 'mangled', 'line_index_start': 1716, 'line_index_end': 1719, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad550>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236d950>, 'name': 'property', 'line_index_start': 1722, 'line_index_end': 1723, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad650>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1725, 
                        "line_index_start": 1722, 
                        "lines": [
                            "    @property\n", 
                            "    def index(self):\n", 
                            "        return self.position - 1\n", 
                            "\n"
                        ], 
                        "name": "index", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1724, 'ast_node': <_ast.Return object at 0x236d810>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad650>, 'obj_type': 'return', 'line_index_end': 1725}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236db90>, 'name': 'property', 'line_index_start': 1726, 'line_index_end': 1727, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad710>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1729, 
                        "line_index_start": 1726, 
                        "lines": [
                            "    @property\n", 
                            "    def questions(self):\n", 
                            "        return self._question_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1728, 'ast_node': <_ast.Return object at 0x236da50>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad710>, 'obj_type': 'return', 'line_index_end': 1729}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236df50>, 'name': 'property', 'line_index_start': 1730, 'line_index_end': 1731, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad7d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1736, 
                        "line_index_start": 1730, 
                        "lines": [
                            "    @property\n", 
                            "    def has_random_assignment(self):\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                return True\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_random_assignment", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x236ded0>, 'line_index_start': 1735, 'value': 'False', 'line_index_end': 1736, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad7d0>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1739, 
                        "line_index_start": 1737, 
                        "lines": [
                            "    def has_question(self, question):\n", 
                            "        return self._question_map.get(question.id)\n", 
                            "\n"
                        ], 
                        "name": "has_question", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1738, 'ast_node': <_ast.Return object at 0x236e0d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad890>, 'obj_type': 'return', 'line_index_end': 1739}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1744, 
                        "line_index_start": 1740, 
                        "lines": [
                            "    def add_question(self, question):\n", 
                            "        self._question_list.append(question)\n", 
                            "        self._question_map[question.id] = question\n", 
                            "        question.page = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_question", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236e510>, 'line_index_start': 1742, 'value': 'question', 'line_index_end': 1742, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236e710>, 'line_index_start': 1743, 'value': 'self', 'line_index_end': 1744, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad910>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1760, 
                        "line_index_start": 1745, 
                        "lines": [
                            "    def load(self, page_data):\n", 
                            "        questions = page_data['questions']\n", 
                            "        self.question_ids = []\n", 
                            "        self.heading = page_data['heading']\n", 
                            "        self.id = str(page_data['page_id'])\n", 
                            "        self.position = page_data['position']\n", 
                            "        self.question_ids = []\n", 
                            "        self.has_question_randomization = page_data['question_randomization']['enabled']\n", 
                            "        for q in questions:\n", 
                            "            question = Question(self.request)\n", 
                            "            question.load(q)\n", 
                            "            self.add_question(question)\n", 
                            "            self.question_ids.append(question.id)\n", 
                            "        self.sub_heading = page_data['sub_heading']\n", 
                            "        self.survey_id = page_data['survey_id']\n", 
                            "\n"
                        ], 
                        "name": "load", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236e910>, 'target': 'questions', 'line_index_start': 1746, 'line_index_end': 1746, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ea90>, 'line_index_start': 1747, 'line_index_end': 1747, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236eb90>, 'line_index_start': 1748, 'line_index_end': 1748, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ed50>, 'line_index_start': 1749, 'line_index_end': 1749, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ef90>, 'line_index_start': 1750, 'line_index_end': 1750, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370190>, 'line_index_start': 1751, 'line_index_end': 1751, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370290>, 'line_index_start': 1752, 'line_index_end': 1752, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370b90>, 'line_index_start': 1758, 'line_index_end': 1758, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370d50>, 'line_index_start': 1759, 'line_index_end': 1760, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1772, 
                        "line_index_start": 1761, 
                        "lines": [
                            "    def to_dict(self):\n", 
                            "        question_ids = [question.id for question in self.questions]\n", 
                            "\n", 
                            "        return {\n", 
                            "            'heading': self.heading,\n", 
                            "            'sub_heading': self.sub_heading,\n", 
                            "            'id': self.id,\n", 
                            "            'position': self.position,\n", 
                            "            'question_ids': question_ids,\n", 
                            "            'survey_id': self.survey_id,\n", 
                            "            'edit_link': self.edit_link\n", 
                            "        }\n"
                        ], 
                        "name": "to_dict", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1764, 'ast_node': <_ast.Return object at 0x2371250>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27adc50>, 'obj_type': 'return', 'line_index_end': 1772}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370fd0>, 'target': 'question_ids', 'line_index_start': 1762, 'line_index_end': 1763, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27adc50>, 'targets': []}"
                        ]
                    }
                ], 
                "imports": [], 
                "indent": 0, 
                "is_class": true, 
                "is_function": false, 
                "line_index_end": 1772, 
                "line_index_start": 1691, 
                "lines": [
                    "class Page(object):\n", 
                    "    \"\"\"A page. Also referred as a survey page.\"\"\"\n", 
                    "\n", 
                    "    heading = None\n", 
                    "    sub_heading = None\n", 
                    "    id = None\n", 
                    "    position = None\n", 
                    "    question_ids = None\n", 
                    "    survey_id = None\n", 
                    "\n", 
                    "    survey = None  # backref\n", 
                    "\n", 
                    "    def __init__(self, request):\n", 
                    "        self.request = request\n", 
                    "        self._question_list = []\n", 
                    "        self._question_map = {}\n", 
                    "\n", 
                    "    @property\n", 
                    "    def edit_link(self):\n", 
                    "        #/MySurvey_EditorPage.aspx?sm=ALFEvPW9xjVqGpg5j9RNK4p1LERFeyh15O4IyBL9YkgpxQj1bS0JB%2f1t8uOA6gji\n", 
                    "        if self.survey_id is None:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
                    "            )\n", 
                    "\n", 
                    "        mangled = encrypt_mangled(\n", 
                    "            \"SurveyID=%s&SectionID=%s&\" % (self.survey_id, self.id)\n", 
                    "        )\n", 
                    "\n", 
                    "        return \"/MySurvey_EditorPage.aspx?sm=%s\" % mangled\n", 
                    "\n", 
                    "    @property\n", 
                    "    def index(self):\n", 
                    "        return self.position - 1\n", 
                    "\n", 
                    "    @property\n", 
                    "    def questions(self):\n", 
                    "        return self._question_list[:]  # return copy!\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_random_assignment(self):\n", 
                    "        for q in self.questions:\n", 
                    "            if q.has_random_assignment:\n", 
                    "                return True\n", 
                    "        return False\n", 
                    "\n", 
                    "    def has_question(self, question):\n", 
                    "        return self._question_map.get(question.id)\n", 
                    "\n", 
                    "    def add_question(self, question):\n", 
                    "        self._question_list.append(question)\n", 
                    "        self._question_map[question.id] = question\n", 
                    "        question.page = self  # backref\n", 
                    "\n", 
                    "    def load(self, page_data):\n", 
                    "        questions = page_data['questions']\n", 
                    "        self.question_ids = []\n", 
                    "        self.heading = page_data['heading']\n", 
                    "        self.id = str(page_data['page_id'])\n", 
                    "        self.position = page_data['position']\n", 
                    "        self.question_ids = []\n", 
                    "        self.has_question_randomization = page_data['question_randomization']['enabled']\n", 
                    "        for q in questions:\n", 
                    "            question = Question(self.request)\n", 
                    "            question.load(q)\n", 
                    "            self.add_question(question)\n", 
                    "            self.question_ids.append(question.id)\n", 
                    "        self.sub_heading = page_data['sub_heading']\n", 
                    "        self.survey_id = page_data['survey_id']\n", 
                    "\n", 
                    "    def to_dict(self):\n", 
                    "        question_ids = [question.id for question in self.questions]\n", 
                    "\n", 
                    "        return {\n", 
                    "            'heading': self.heading,\n", 
                    "            'sub_heading': self.sub_heading,\n", 
                    "            'id': self.id,\n", 
                    "            'position': self.position,\n", 
                    "            'question_ids': question_ids,\n", 
                    "            'survey_id': self.survey_id,\n", 
                    "            'edit_link': self.edit_link\n", 
                    "        }\n"
                ], 
                "name": "Page", 
                "obj_type": "class", 
                "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                "returns": [], 
                "variables": [
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236b6d0>, 'target': 'heading', 'line_index_start': 1694, 'value': 'None', 'line_index_end': 1694, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236b790>, 'target': 'sub_heading', 'line_index_start': 1695, 'value': 'None', 'line_index_end': 1695, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236b850>, 'target': 'id', 'line_index_start': 1696, 'value': 'None', 'line_index_end': 1696, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236b910>, 'target': 'position', 'line_index_start': 1697, 'value': 'None', 'line_index_end': 1697, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236b9d0>, 'target': 'question_ids', 'line_index_start': 1698, 'value': 'None', 'line_index_end': 1698, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ba90>, 'target': 'survey_id', 'line_index_start': 1699, 'value': 'None', 'line_index_end': 1700, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236bb50>, 'target': 'survey', 'line_index_start': 1701, 'value': 'None', 'line_index_end': 1702, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}"
                ]
            }
        ], 
        "classes": [
            {
                "children": [], 
                "classes": [], 
                "comments": [], 
                "decorators": [], 
                "docstring": null, 
                "functions": [], 
                "imports": [], 
                "indent": 0, 
                "is_class": true, 
                "is_function": false, 
                "line_index_end": 26, 
                "line_index_start": 23, 
                "lines": [
                    "class CurrentViewAlreadyExistsError(Exception):\n", 
                    "    pass\n", 
                    "\n", 
                    "\n"
                ], 
                "name": "CurrentViewAlreadyExistsError", 
                "obj_type": "class", 
                "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                "returns": [], 
                "variables": []
            }, 
            {
                "children": [], 
                "classes": [], 
                "comments": [], 
                "decorators": [], 
                "docstring": null, 
                "functions": [], 
                "imports": [], 
                "indent": 0, 
                "is_class": true, 
                "is_function": false, 
                "line_index_end": 30, 
                "line_index_start": 27, 
                "lines": [
                    "class DefaultViewAlreadyExistsError(Exception):\n", 
                    "    pass\n", 
                    "\n", 
                    "\n"
                ], 
                "name": "DefaultViewAlreadyExistsError", 
                "obj_type": "class", 
                "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                "returns": [], 
                "variables": []
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 158, 
                        "line_index_start": 120, 
                        "lines": [
                            "    def __init__(self, request, survey_id):\n", 
                            "        self.request = request\n", 
                            "        self.id = str(survey_id)\n", 
                            "\n", 
                            "        # Holds the survey's dictionary structure\n", 
                            "        self._structure = {}\n", 
                            "\n", 
                            "        self._user_list = []\n", 
                            "        self._user_map = {}\n", 
                            "\n", 
                            "        self._views_list = []\n", 
                            "        self._views_map = {}\n", 
                            "\n", 
                            "        self._export_views_list = []\n", 
                            "        self._export_views_map = {}\n", 
                            "\n", 
                            "        self._page_list = []\n", 
                            "        self._page_map = {}\n", 
                            "        self._page_map_by_index = {}\n", 
                            "\n", 
                            "        self._question_list = []\n", 
                            "        self._question_map = {}\n", 
                            "\n", 
                            "        self._answer_map = {}\n", 
                            "\n", 
                            "        self._export_job_list = []\n", 
                            "        self._export_job_map = {}\n", 
                            "\n", 
                            "        self._collector_list = []\n", 
                            "        self._has_email_collector = False\n", 
                            "        self._has_collector = False\n", 
                            "        self._has_open_collector = False\n", 
                            "        self._has_unconfigured_collector = False\n", 
                            "        self._has_all_closed_collectors = False\n", 
                            "        self._has_configured_audience = False\n", 
                            "\n", 
                            "        self._question_logic = None\n", 
                            "        self._page_logic = None\n", 
                            "\n"
                        ], 
                        "name": "__init__", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22caa10>, 'line_index_start': 121, 'value': 'request', 'line_index_end': 121, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cab10>, 'line_index_start': 122, 'line_index_end': 124, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cac90>, 'line_index_start': 125, 'line_index_end': 126, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cad90>, 'line_index_start': 127, 'line_index_end': 127, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cae90>, 'line_index_start': 128, 'line_index_end': 129, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22caf90>, 'line_index_start': 130, 'line_index_end': 130, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb0d0>, 'line_index_start': 131, 'line_index_end': 132, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb1d0>, 'line_index_start': 133, 'line_index_end': 133, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb2d0>, 'line_index_start': 134, 'line_index_end': 135, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb3d0>, 'line_index_start': 136, 'line_index_end': 136, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb4d0>, 'line_index_start': 137, 'line_index_end': 137, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb5d0>, 'line_index_start': 138, 'line_index_end': 139, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb6d0>, 'line_index_start': 140, 'line_index_end': 140, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb7d0>, 'line_index_start': 141, 'line_index_end': 142, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb8d0>, 'line_index_start': 143, 'line_index_end': 144, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb9d0>, 'line_index_start': 145, 'line_index_end': 145, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbad0>, 'line_index_start': 146, 'line_index_end': 147, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbbd0>, 'line_index_start': 148, 'line_index_end': 148, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbcd0>, 'line_index_start': 149, 'value': 'False', 'line_index_end': 149, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbdd0>, 'line_index_start': 150, 'value': 'False', 'line_index_end': 150, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbed0>, 'line_index_start': 151, 'value': 'False', 'line_index_end': 151, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbfd0>, 'line_index_start': 152, 'value': 'False', 'line_index_end': 152, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc110>, 'line_index_start': 153, 'value': 'False', 'line_index_end': 153, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc210>, 'line_index_start': 154, 'value': 'False', 'line_index_end': 155, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc310>, 'line_index_start': 156, 'value': 'None', 'line_index_end': 156, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc410>, 'line_index_start': 157, 'value': 'None', 'line_index_end': 158, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 165, 
                        "line_index_start": 159, 
                        "lines": [
                            "    def __repr__(self):\n", 
                            "        return \"<%(class)s=%(id)s at 0x%(mem)x>\" % {\n", 
                            "            \"class\": self.__class__.__name__,\n", 
                            "            \"id\": self.id,\n", 
                            "            \"mem\": id(self)\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "__repr__", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 160, 'ast_node': <_ast.Return object at 0x22cc5d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371f50>, 'obj_type': 'return', 'line_index_end': 165}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 180, 
                        "line_index_start": 166, 
                        "lines": [
                            "    def _load_survey(self, survey_data):\n", 
                            "        self._date_created = survey_data['date_created']\n", 
                            "        self._date_modified = survey_data['date_modified']\n", 
                            "        self._date_deleted = survey_data['date_deleted']\n", 
                            "        self._title = survey_data['title']['text']\n", 
                            "        self._nickname = survey_data.get('nickname')\n", 
                            "        self._language_id = survey_data['language_id']\n", 
                            "        self.version = survey_data['version']\n", 
                            "        self.num_responses = survey_data['num_responses']\n", 
                            "        self.question_count = survey_data['question_count']\n", 
                            "        self.has_panel_page = survey_data.get('has_panel_page', False)\n", 
                            "        self._quotas = survey_data.get('quota')\n", 
                            "        self.has_page_randomization = survey_data['page_randomization']['enabled']\n", 
                            "        self._answer_map = {}\n", 
                            "    \n"
                        ], 
                        "name": "_load_survey", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cca90>, 'line_index_start': 167, 'line_index_end': 167, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ccc50>, 'line_index_start': 168, 'line_index_end': 168, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cce10>, 'line_index_start': 169, 'line_index_end': 169, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ccfd0>, 'line_index_start': 170, 'line_index_end': 170, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce290>, 'line_index_start': 171, 'line_index_end': 171, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce450>, 'line_index_start': 172, 'line_index_end': 172, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce610>, 'line_index_start': 173, 'line_index_end': 173, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce7d0>, 'line_index_start': 174, 'line_index_end': 174, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce990>, 'line_index_start': 175, 'line_index_end': 175, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ceb50>, 'line_index_start': 176, 'line_index_end': 176, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ced50>, 'line_index_start': 177, 'line_index_end': 177, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cef10>, 'line_index_start': 178, 'line_index_end': 178, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x254e1d0>, 'line_index_start': 179, 'line_index_end': 180, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 207, 
                        "line_index_start": 181, 
                        "lines": [
                            "    def _set_benchmarkable_flags(self, survey_data):\n", 
                            "        if self.owner.has_benchmarking_feature():\n", 
                            "            # get benchmarkable data. we'll do this per page to minimize the bmsvc calls\n", 
                            "            for page in survey_data['pages']:\n", 
                            "                # get a dict of logical id by question id\n", 
                            "                #   we'll use this dict to update the page data\n", 
                            "                # get the list of logical ids\n", 
                            "                #   we'll use this list to get the benchmarkable info\n", 
                            "                qb_questions = {}\n", 
                            "                logical_ids = []\n", 
                            "                for question in page['questions']:\n", 
                            "                    if question['question_bank']['is_banked']:\n", 
                            "                        qb_questions[question['question_id']] = question['question_bank']['logical_bank_id']\n", 
                            "                        logical_ids.append(qb_questions[question['question_id']])\n", 
                            "                benchmarkable_ids = self.request.bmsvc.is_benchmarkable(logical_ids)\n", 
                            "                # now update the questions\n", 
                            "                for question in page['questions']:\n", 
                            "                    question['is_benchmarkable'] = True if question['question_id'] in qb_questions and\\\n", 
                            "                                                           qb_questions[question['question_id']] in benchmarkable_ids\\\n", 
                            "                                                        else False\n", 
                            "        else:\n", 
                            "            # set all questions as not benchmarkable\n", 
                            "            for page in survey_data['pages']:\n", 
                            "                for question in page['questions']:\n", 
                            "                    question['is_benchmarkable'] = False\n", 
                            "\n", 
                            "    #@prof(depth=1, include_variables=['survey_data'])\n"
                        ], 
                        "name": "_set_benchmarkable_flags", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 230, 
                        "line_index_start": 208, 
                        "lines": [
                            "    def _populate_pages(self):\n", 
                            "        if self._populated_pages:\n", 
                            "            return\n", 
                            "\n", 
                            "        # FIXME: Maybe create Option objects as well?\n", 
                            "        # only include panel if there has been a configured audience\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            load_pages=True,\n", 
                            "            include_panel=self.has_configured_audience\n", 
                            "        )\n", 
                            "        \n", 
                            "        # if the user has benchmarking available, we will set the benchmarking flag for each question as appropriate\n", 
                            "        self._set_benchmarkable_flags(survey_data)\n", 
                            "        \n", 
                            "        if not self._populated_survey:\n", 
                            "            self._populated_survey = True\n", 
                            "            self._load_survey(survey_data)\n", 
                            "\n", 
                            "        self._populated_pages = True\n", 
                            "        self._load_pages(survey_data['pages'])\n", 
                            "\n"
                        ], 
                        "name": "_populate_pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2551250>, 'target': 'survey_data', 'line_index_start': 214, 'line_index_end': 221, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23733d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2551b10>, 'line_index_start': 228, 'value': 'True', 'line_index_end': 228, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23733d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 251, 
                        "line_index_start": 231, 
                        "lines": [
                            "    def _populate_survey(self):\n", 
                            "        if self._populated_survey:\n", 
                            "            return\n", 
                            "\n", 
                            "        # FIXME: Maybe create Option objects as well?\n", 
                            "        # only include panel if there has abeen a configured audience\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            load_pages=False,\n", 
                            "            include_panel=self.has_configured_audience\n", 
                            "        )\n", 
                            "\n", 
                            "        if 'quota' in survey_data:\n", 
                            "            survey_data['quota'] = self.request.ansvc.quota_list(\n", 
                            "                survey_data['survey_id']\n", 
                            "            )['quota']\n", 
                            "\n", 
                            "        self._populated_survey = True\n", 
                            "        self._load_survey(survey_data)\n", 
                            "\n"
                        ], 
                        "name": "_populate_survey", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2551fd0>, 'target': 'survey_data', 'line_index_start': 237, 'line_index_end': 243, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373490>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2552990>, 'line_index_start': 249, 'value': 'True', 'line_index_end': 249, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373490>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2552e50>, 'name': 'property', 'line_index_start': 252, 'line_index_end': 253, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373550>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 257, 
                        "line_index_start": 252, 
                        "lines": [
                            "    @property\n", 
                            "    def title(self):\n", 
                            "        self._populate_survey()\n", 
                            "        return self._title\n", 
                            "\n", 
                            "    #dates appear to be stored in seconds\n"
                        ], 
                        "name": "title", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 255, 'ast_node': <_ast.Return object at 0x2552d90>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373550>, 'obj_type': 'return', 'line_index_end': 257}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2554290>, 'name': 'property', 'line_index_start': 258, 'line_index_end': 259, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373610>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 263, 
                        "line_index_start": 258, 
                        "lines": [
                            "    @property\n", 
                            "    def date_deleted(self):\n", 
                            "        self._populate_survey()\n", 
                            "        if self._date_deleted:\n", 
                            "            return self._date_deleted * 1000\n", 
                            "\n"
                        ], 
                        "name": "date_deleted", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25545d0>, 'name': 'property', 'line_index_start': 264, 'line_index_end': 265, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373690>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 268, 
                        "line_index_start": 264, 
                        "lines": [
                            "    @property\n", 
                            "    def date_created(self):\n", 
                            "        self._populate_survey()\n", 
                            "        return self._date_created * 1000\n", 
                            "\n"
                        ], 
                        "name": "date_created", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 267, 'ast_node': <_ast.Return object at 0x2554490>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373690>, 'obj_type': 'return', 'line_index_end': 268}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25549d0>, 'name': 'property', 'line_index_start': 269, 'line_index_end': 270, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373750>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 274, 
                        "line_index_start": 269, 
                        "lines": [
                            "    @property\n", 
                            "    def date_modified(self):\n", 
                            "        self._populate_survey()\n", 
                            "        if self._date_modified:\n", 
                            "            return self._date_modified * 1000\n", 
                            "\n"
                        ], 
                        "name": "date_modified", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2554c90>, 'name': 'property', 'line_index_start': 275, 'line_index_end': 276, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23737d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 279, 
                        "line_index_start": 275, 
                        "lines": [
                            "    @property\n", 
                            "    def quotas(self):\n", 
                            "        self._populate_survey()\n", 
                            "        return self._quotas\n", 
                            "\n"
                        ], 
                        "name": "quotas", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 278, 'ast_node': <_ast.Return object at 0x2554bd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23737d0>, 'obj_type': 'return', 'line_index_end': 279}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2556110>, 'name': 'property', 'line_index_start': 280, 'line_index_end': 281, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373890>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 287, 
                        "line_index_start": 280, 
                        "lines": [
                            "    @property\n", 
                            "    def nickname(self):\n", 
                            "        self._populate_survey()\n", 
                            "        if self._nickname:\n", 
                            "            return self._nickname\n", 
                            "\n", 
                            "        return self._title\n", 
                            "\n"
                        ], 
                        "name": "nickname", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 286, 'ast_node': <_ast.Return object at 0x2556050>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373890>, 'obj_type': 'return', 'line_index_end': 287}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2556610>, 'name': 'property', 'line_index_start': 288, 'line_index_end': 289, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373950>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 295, 
                        "line_index_start": 288, 
                        "lines": [
                            "    @property\n", 
                            "    def mangled_id(self):\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
                            "            )\n", 
                            "        return encrypt_mangled(\"SurveyID=%s&\" % self.id)\n", 
                            "\n"
                        ], 
                        "name": "mangled_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 294, 'ast_node': <_ast.Return object at 0x2556450>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373950>, 'obj_type': 'return', 'line_index_end': 295}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2556f10>, 'name': 'property', 'line_index_start': 296, 'line_index_end': 297, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 312, 
                        "line_index_start": 296, 
                        "lines": [
                            "    @property\n", 
                            "    def preview_link(self):\n", 
                            "        query_string = {\n", 
                            "            's': self.id,\n", 
                            "            'mode': 3\n", 
                            "        }\n", 
                            "        query_string = urlencode(query_string)\n", 
                            "        query_string = urlencode({\n", 
                            "            'sm': encrypt_mangled(query_string),\n", 
                            "            'PREVIEW_MODE': 'DO_NOT_USE_THIS_LINK_FOR_COLLECTION',\n", 
                            "        })\n", 
                            "\n", 
                            "        return \"%(path)s?%(qs)s\" % {\n", 
                            "            \"path\": '/s.aspx',\n", 
                            "            \"qs\": query_string\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "preview_link", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 308, 'ast_node': <_ast.Return object at 0x2556d10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'obj_type': 'return', 'line_index_end': 312}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2556710>, 'target': 'query_string', 'line_index_start': 298, 'line_index_end': 301, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2556910>, 'target': 'query_string', 'line_index_start': 302, 'line_index_end': 302, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2556a50>, 'target': 'query_string', 'line_index_start': 303, 'line_index_end': 307, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2558310>, 'name': 'property', 'line_index_start': 313, 'line_index_end': 314, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373b90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 320, 
                        "line_index_start": 313, 
                        "lines": [
                            "    @property\n", 
                            "    def has_question_randomization(self):\n", 
                            "        for page in self.pages:\n", 
                            "            if page.has_question_randomization:\n", 
                            "                return True\n", 
                            "\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_question_randomization", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2558290>, 'line_index_start': 319, 'value': 'False', 'line_index_end': 320, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373b90>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25586d0>, 'name': 'property', 'line_index_start': 321, 'line_index_end': 322, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373c50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 327, 
                        "line_index_start": 321, 
                        "lines": [
                            "    @property\n", 
                            "    def has_random_assignment(self):\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                return True\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_random_assignment", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2558650>, 'line_index_start': 326, 'value': 'False', 'line_index_end': 327, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373c50>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 363, 
                        "line_index_start": 328, 
                        "lines": [
                            "    def _populate_collectors(self):\n", 
                            "        if self._populated_collectors:\n", 
                            "            return\n", 
                            "\n", 
                            "        collector_list = self.request.collectorsvc.get_collector_list(\n", 
                            "            int(self.owner.id),\n", 
                            "            int(self.id)\n", 
                            "        )\n", 
                            "\n", 
                            "        self._has_all_closed_collectors = True\n", 
                            "        for collector_data in collector_list:\n", 
                            "            collector = Collector(self.request)\n", 
                            "            collector.load(collector_data)\n", 
                            "            if collector.is_email:\n", 
                            "                self._has_email_collector = True\n", 
                            "\n", 
                            "            if collector.is_open or collector.is_clearing_responses:\n", 
                            "                self._has_open_collector = True\n", 
                            "\n", 
                            "            if collector.is_new:\n", 
                            "                self._has_unconfigured_collector = True\n", 
                            "            elif collector.is_audience:\n", 
                            "                self._has_configured_audience = True\n", 
                            "\n", 
                            "            if not (collector.is_closed or collector.is_archived):\n", 
                            "                self._has_all_closed_collectors = False\n", 
                            "\n", 
                            "            self._collector_list.append(collector)\n", 
                            "\n", 
                            "        if self._collector_list:\n", 
                            "            self._has_collector = True\n", 
                            "        else:\n", 
                            "            self._has_all_closed_collectors = False\n", 
                            "\n", 
                            "        self._populated_collectors = True\n", 
                            "\n"
                        ], 
                        "name": "_populate_collectors", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25588d0>, 'target': 'collector_list', 'line_index_start': 332, 'line_index_end': 336, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2558cd0>, 'line_index_start': 337, 'value': 'True', 'line_index_end': 337, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2569090>, 'line_index_start': 362, 'value': 'True', 'line_index_end': 363, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373d10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569410>, 'name': 'property', 'line_index_start': 364, 'line_index_end': 365, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373e10>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 368, 
                        "line_index_start": 364, 
                        "lines": [
                            "    @property\n", 
                            "    def has_email_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_email_collector\n", 
                            "\n"
                        ], 
                        "name": "has_email_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 367, 'ast_node': <_ast.Return object at 0x2569350>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373e10>, 'obj_type': 'return', 'line_index_end': 368}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25696d0>, 'name': 'property', 'line_index_start': 369, 'line_index_end': 370, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373ed0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 373, 
                        "line_index_start": 369, 
                        "lines": [
                            "    @property\n", 
                            "    def has_open_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_open_collector\n", 
                            "\n"
                        ], 
                        "name": "has_open_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 372, 'ast_node': <_ast.Return object at 0x2569610>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373ed0>, 'obj_type': 'return', 'line_index_end': 373}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569990>, 'name': 'property', 'line_index_start': 374, 'line_index_end': 375, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373f90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 378, 
                        "line_index_start": 374, 
                        "lines": [
                            "    @property\n", 
                            "    def has_all_closed_collectors(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_all_closed_collectors\n", 
                            "\n"
                        ], 
                        "name": "has_all_closed_collectors", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 377, 'ast_node': <_ast.Return object at 0x25698d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373f90>, 'obj_type': 'return', 'line_index_end': 378}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569c50>, 'name': 'property', 'line_index_start': 379, 'line_index_end': 380, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379090>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 383, 
                        "line_index_start": 379, 
                        "lines": [
                            "    @property\n", 
                            "    def has_unconfigured_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_unconfigured_collector\n", 
                            "\n"
                        ], 
                        "name": "has_unconfigured_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 382, 'ast_node': <_ast.Return object at 0x2569b90>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379090>, 'obj_type': 'return', 'line_index_end': 383}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569f10>, 'name': 'property', 'line_index_start': 384, 'line_index_end': 385, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379150>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 388, 
                        "line_index_start": 384, 
                        "lines": [
                            "    @property\n", 
                            "    def has_configured_audience(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_configured_audience\n", 
                            "\n"
                        ], 
                        "name": "has_configured_audience", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 387, 'ast_node': <_ast.Return object at 0x2569e50>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379150>, 'obj_type': 'return', 'line_index_end': 388}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256a210>, 'name': 'property', 'line_index_start': 389, 'line_index_end': 390, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379210>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 393, 
                        "line_index_start": 389, 
                        "lines": [
                            "    @property\n", 
                            "    def has_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_collector\n", 
                            "\n"
                        ], 
                        "name": "has_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 392, 'ast_node': <_ast.Return object at 0x256a150>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379210>, 'obj_type': 'return', 'line_index_end': 393}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256a4d0>, 'name': 'property', 'line_index_start': 394, 'line_index_end': 395, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23792d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 398, 
                        "line_index_start": 394, 
                        "lines": [
                            "    @property\n", 
                            "    def collectors(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._collector_list\n", 
                            "\n"
                        ], 
                        "name": "collectors", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 397, 'ast_node': <_ast.Return object at 0x256a410>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23792d0>, 'obj_type': 'return', 'line_index_end': 398}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Get the owners (user IDs) for this survey.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 419, 
                        "line_index_start": 399, 
                        "lines": [
                            "    def _populate_owners(self):\n", 
                            "        \"\"\"\n", 
                            "        Get the owners (user IDs) for this survey.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if self._populated_owners:\n", 
                            "            return\n", 
                            "\n", 
                            "        try:\n", 
                            "            access_list = self.request.svysvc.survey_access_list(self.id)\n", 
                            "            self._populated_owners = True\n", 
                            "        except ServiceResponseError:\n", 
                            "            # Survey might not be found\n", 
                            "            return\n", 
                            "\n", 
                            "        for user_id in access_list['users']:\n", 
                            "            user = User(self.request, user_id)\n", 
                            "            self._user_list.append(user)\n", 
                            "            self._user_map[user.id] = user\n", 
                            "            user.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "_populate_owners", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 423, 
                        "line_index_start": 420, 
                        "lines": [
                            "    def is_owner(self, user):\n", 
                            "        self._populate_owners()\n", 
                            "        return str(user.id) in self._user_map\n", 
                            "\n"
                        ], 
                        "name": "is_owner", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 422, 'ast_node': <_ast.Return object at 0x256c590>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23793d0>, 'obj_type': 'return', 'line_index_end': 423}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256c9d0>, 'name': 'property', 'line_index_start': 424, 'line_index_end': 425, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379450>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 427, 
                        "line_index_start": 424, 
                        "lines": [
                            "    @property\n", 
                            "    def owner(self):\n", 
                            "        return self.owners[0]\n", 
                            "\n"
                        ], 
                        "name": "owner", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 426, 'ast_node': <_ast.Return object at 0x256c850>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379450>, 'obj_type': 'return', 'line_index_end': 427}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256cc90>, 'name': 'property', 'line_index_start': 428, 'line_index_end': 429, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379510>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 432, 
                        "line_index_start": 428, 
                        "lines": [
                            "    @property\n", 
                            "    def owners(self):\n", 
                            "        self._populate_owners()\n", 
                            "        return self._user_list\n", 
                            "\n"
                        ], 
                        "name": "owners", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 431, 'ast_node': <_ast.Return object at 0x256cbd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379510>, 'obj_type': 'return', 'line_index_end': 432}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 451, 
                        "line_index_start": 433, 
                        "lines": [
                            "    def _load_pages(self, pages):\n", 
                            "        question_position = 1\n", 
                            "        page_position = 1\n", 
                            "        for page_data in pages:\n", 
                            "            page = Page(self.request)\n", 
                            "            page.load(page_data)\n", 
                            "            page.position = page_position\n", 
                            "            page_position += 1\n", 
                            "            self.add_page(page)\n", 
                            "            for question in page.questions:\n", 
                            "                # Question numbers aren't stored with presentation context\n", 
                            "                # in the DB, we have to correct for this.\n", 
                            "                question.position = question_position\n", 
                            "                if not question.is_presentation() or \\\n", 
                            "                    question.has_random_assignment:\n", 
                            "                        question_position += 1\n", 
                            "                self.add_question(question)\n", 
                            "                self._load_answers(question.answers)\n", 
                            "\n"
                        ], 
                        "name": "_load_pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x256cdd0>, 'target': 'question_position', 'line_index_start': 434, 'value': 1, 'line_index_end': 434, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23795d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x256ce90>, 'target': 'page_position', 'line_index_start': 435, 'value': 1, 'line_index_end': 435, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23795d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 463, 
                        "line_index_start": 452, 
                        "lines": [
                            "    def _load_answers(self, answers):\n", 
                            "        for dim, dim_answers in iteritems(answers):\n", 
                            "            for answer in dim_answers:\n", 
                            "                self._answer_map[answer['answer_id']] = answer\n", 
                            "                answer['id'] = str(answer['answer_id'])\n", 
                            "                del answer['answer_id']\n", 
                            "                if 'items' in answer:\n", 
                            "                    for menu_item in answer['items']:\n", 
                            "                        self._answer_map[menu_item['answer_id']] = menu_item\n", 
                            "                        menu_item['id'] = str(menu_item['answer_id'])\n", 
                            "                        del menu_item['answer_id']\n", 
                            "\n"
                        ], 
                        "name": "_load_answers", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Get the views for this survey.\n\nIf no view exists, create default and current views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 570, 
                        "line_index_start": 464, 
                        "lines": [
                            "    def _populate_views(self):\n", 
                            "        \"\"\"\n", 
                            "        Get the views for this survey.\n", 
                            "\n", 
                            "        If no view exists, create default and current views.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if self._populated_views:\n", 
                            "            return\n", 
                            "\n", 
                            "        # Can't get data if ID is None\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to get views: survey has no ID.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        data = self.request.ansvc.list_views(self.id)\n", 
                            "        views = data['view_schemas']\n", 
                            "\n", 
                            "        # WARNING: This must be set before ``add_view()`` and\n", 
                            "        # ``get_views_by_id()`` gets called again lower down\n", 
                            "        self._populated_views = True\n", 
                            "\n", 
                            "        # Build view objects\n", 
                            "        self._views_list = []\n", 
                            "        self._views_map = {}\n", 
                            "        for view_id, view_data in iteritems(views):\n", 
                            "            view_type = view_data['view_type']\n", 
                            "            view_data = json.loads(view_data['view_schema'])\n", 
                            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                            "            # None when created the first time as we don't yet have an ID from\n", 
                            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                            "            # the view_id inside the view_schema is still None and wasn't\n", 
                            "            # assigned with its ID. For this to be fixed, we should not store\n", 
                            "            # the view_id within the view_schema. Or we can augment the dict\n", 
                            "            # such as here. This should be fixed when the view schema will be\n", 
                            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                            "            view_data['view_id'] = view_id\n", 
                            "            view_data['type'] = view_type\n", 
                            "\n", 
                            "            view = View(self.request, self)\n", 
                            "            view.load(view_data)\n", 
                            "            try:\n", 
                            "                self.add_view(view)\n", 
                            "            except (\n", 
                            "                CurrentViewAlreadyExistsError,\n", 
                            "                DefaultViewAlreadyExistsError\n", 
                            "            ):\n", 
                            "                log.warning(\n", 
                            "                    \"Name=DuplicateCurrentDefaultView\",\n", 
                            "                    \"ViewData=%s\" % view_data\n", 
                            "                )\n", 
                            "                # Force deletion because we normally can't delete a default or\n", 
                            "                # current view.\n", 
                            "                view.survey = self  # backref required for deletion\n", 
                            "                view.delete(force=True)\n", 
                            "\n", 
                            "        # Call .fix() only after all views have been loaded into the survey\n", 
                            "        # otherwise a view that depends on a not-yet-loaded view will\n", 
                            "        # provoke a traceback (GORILLA-2216).\n", 
                            "        for view in self.views:\n", 
                            "            if view.fix():\n", 
                            "                view.save()\n", 
                            "\n", 
                            "        if self.default_view is None:\n", 
                            "            log.info(\"Creating default view for survey=%s\", self.id)\n", 
                            "            default_view = self._create_default_view()\n", 
                            "            default_view.save()\n", 
                            "            self.add_view(default_view)\n", 
                            "\n", 
                            "        if self.current_view is None:\n", 
                            "            log.info(\"Creating current view for survey=%s\", self.id)\n", 
                            "            current_view = self._create_current_view()\n", 
                            "            current_view.selected_view = self.default_view\n", 
                            "            current_view.save()\n", 
                            "            self.add_view(current_view)\n", 
                            "\n", 
                            "        if self.quotas and self.default_view.quota_view_metadata is None:\n", 
                            "            log.info(\"Creating quota view for survey=%s\", self.id)\n", 
                            "            self._create_quota_views()\n", 
                            "        \n", 
                            "        if self.has_random_assignment and self.default_view.random_assignment_view_metadata is None:\n", 
                            "            log.info(\"Creating random assignment view for survey=%s\", self.id)\n", 
                            "            self._create_random_assignment_views()\n", 
                            "         \n", 
                            "        if self.has_configured_audience and \\\n", 
                            "            self.default_view.audience_view_metadata is None:\n", 
                            "                self._create_audience_view()\n", 
                            "\n", 
                            "        # Set the selected view on the current view.\n", 
                            "        selected_view_id = self.current_view.selected_view_id\n", 
                            "        selected_view = self.get_view_by_id(selected_view_id)\n", 
                            "        if selected_view is None:\n", 
                            "            # Make sure the current view has its selected view pointing to an\n", 
                            "            # existing view. If the selected view doesn't exist (see\n", 
                            "            # GORILLA-1198 for details), re-point the current view's selected\n", 
                            "            # view to be the default view.\n", 
                            "            log.warning(\n", 
                            "                \"Name=SelectedViewNotFound\",\n", 
                            "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
                            "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
                            "            )\n", 
                            "            selected_view = self.current_view.selected_view = self.default_view\n", 
                            "            self.current_view.save()\n", 
                            "        assert selected_view.id == self.current_view.selected_view_id\n", 
                            "        self.current_view.selected_view = selected_view\n", 
                            "\n"
                        ], 
                        "name": "_populate_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570590>, 'target': 'data', 'line_index_start': 480, 'line_index_end': 480, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25707d0>, 'target': 'views', 'line_index_start': 481, 'line_index_end': 484, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570950>, 'line_index_start': 485, 'value': 'True', 'line_index_end': 487, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570a50>, 'line_index_start': 488, 'line_index_end': 488, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570b50>, 'line_index_start': 489, 'line_index_end': 489, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2575e10>, 'target': 'selected_view_id', 'line_index_start': 554, 'line_index_end': 554, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2575f50>, 'target': 'selected_view', 'line_index_start': 555, 'line_index_end': 555, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2576a90>, 'line_index_start': 569, 'value': 'selected_view', 'line_index_end': 570, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Get the views for this survey.\n\nIf no view exists, create default and current views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 668, 
                        "line_index_start": 571, 
                        "lines": [
                            "    def _populate_shared_views(self):\n", 
                            "        \"\"\"\n", 
                            "        Get the views for this survey.\n", 
                            "\n", 
                            "        If no view exists, create default and current views.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if self._populated_shared_views:\n", 
                            "            return\n", 
                            "\n", 
                            "        # Can't get data if ID is None\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to get shared views: survey has no ID.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        data = self.request.ansvc.list_shared_views(self.id)\n", 
                            "        views = data['view_schemas']\n", 
                            "\n", 
                            "        # WARNING: This must be set before ``add_view()`` and\n", 
                            "        # ``get_views_by_id()`` gets called again lower down\n", 
                            "        self._populated_shared_views = True\n", 
                            "\n", 
                            "        # Build view objects\n", 
                            "        self._shared_views_list = []\n", 
                            "        self._shared_views_map = {}\n", 
                            "\n", 
                            "        for view_id, view_data in iteritems(views):\n", 
                            "            view_type = view_data['view_type']\n", 
                            "            view_data = json.loads(view_data['view_schema'])\n", 
                            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                            "            # None when created the first time as we don't yet have an ID from\n", 
                            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                            "            # the view_id inside the view_schema is still None and wasn't\n", 
                            "            # assigned with its ID. For this to be fixed, we should not store\n", 
                            "            # the view_id within the view_schema. Or we can augment the dict\n", 
                            "            # such as here. This should be fixed when the view schema will be\n", 
                            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                            "            view_data['view_id'] = view_id\n", 
                            "            view_data['type'] = view_type\n", 
                            "\n", 
                            "            view = View(self.request, self)\n", 
                            "            view.load(view_data)\n", 
                            "            view.survey = self\n", 
                            "\n", 
                            "            try:\n", 
                            "                self._shared_views_list.append(view)\n", 
                            "                self._shared_views_map[view_id] = view\n", 
                            "            except (\n", 
                            "                CurrentViewAlreadyExistsError,\n", 
                            "                DefaultViewAlreadyExistsError\n", 
                            "            ):\n", 
                            "                log.warning(\n", 
                            "                    \"Name=DuplicateCurrentDefaultView\",\n", 
                            "                    \"ViewData=%s\" % view_data\n", 
                            "                )\n", 
                            "                # Force deletion because we normally can't delete a default or\n", 
                            "                # current view.\n", 
                            "                view.delete(force=True)\n", 
                            "\n", 
                            "        # Call .fix() only after all views have been loaded into the survey\n", 
                            "        # otherwise a view that depends on a not-yet-loaded view will\n", 
                            "        # provoke a traceback (GORILLA-2216).\n", 
                            "        for view in self.views:\n", 
                            "            if view.fix():\n", 
                            "                view.save()\n", 
                            "\n", 
                            "        if self.default_view is None:\n", 
                            "            log.info(\"Creating default view for survey=%s\" % self.id)\n", 
                            "            default_view = self._create_default_view()\n", 
                            "            default_view.save()\n", 
                            "            self.add_view(default_view)\n", 
                            "\n", 
                            "        if self.current_view is None:\n", 
                            "            log.info(\"Creating current view for survey=%s\" % self.id)\n", 
                            "            current_view = self._create_current_view()\n", 
                            "            current_view.selected_view = self.default_view\n", 
                            "            current_view.save()\n", 
                            "            self.add_view(current_view)\n", 
                            "\n", 
                            "        # Set the selected view on the current view.\n", 
                            "        selected_view_id = self.current_view.selected_view_id\n", 
                            "        selected_view = self.get_view_by_id(selected_view_id)\n", 
                            "        if selected_view is None:\n", 
                            "            # Make sure the current view has its selected view pointing to an\n", 
                            "            # existing view. If the selected view doesn't exist (see\n", 
                            "            # GORILLA-1198 for details), re-point the current view's selected\n", 
                            "            # view to be the default view.\n", 
                            "            log.warning(\n", 
                            "                \"Name=SelectedViewNotFound\",\n", 
                            "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
                            "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
                            "            )\n", 
                            "            selected_view = self.current_view.selected_view = self.default_view\n", 
                            "            self.current_view.save()\n", 
                            "        assert selected_view.id == self.current_view.selected_view_id\n", 
                            "        self.current_view.selected_view = selected_view\n", 
                            "\n"
                        ], 
                        "name": "_populate_shared_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578090>, 'target': 'data', 'line_index_start': 587, 'line_index_end': 587, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25782d0>, 'target': 'views', 'line_index_start': 588, 'line_index_end': 591, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578450>, 'line_index_start': 592, 'value': 'True', 'line_index_end': 594, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578550>, 'line_index_start': 595, 'line_index_end': 595, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578650>, 'line_index_start': 596, 'line_index_end': 597, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257be10>, 'target': 'selected_view_id', 'line_index_start': 652, 'line_index_end': 652, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257bf50>, 'target': 'selected_view', 'line_index_start': 653, 'line_index_end': 653, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257ca90>, 'line_index_start': 667, 'value': 'selected_view', 'line_index_end': 668, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 709, 
                        "line_index_start": 669, 
                        "lines": [
                            "    def _populate_export_views(self):\n", 
                            "        if self._populated_export_views:\n", 
                            "            return\n", 
                            "\n", 
                            "        # Can't get data if ID is None\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to get views: survey has no ID.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        data = self.request.ansvc.list_export_views(self.id)\n", 
                            "        views = data['view_schemas']\n", 
                            "\n", 
                            "        # WARNING: This must be set before ``add_view()`` and\n", 
                            "        # ``get_views_by_id()`` gets called again lower down\n", 
                            "        self._populated_export_views = True\n", 
                            "\n", 
                            "        # Build view objects\n", 
                            "        self._export_views_list = []\n", 
                            "        self._export_views_map = {}\n", 
                            "        for view_id, view_data in iteritems(views):\n", 
                            "            view_type = view_data['view_type']\n", 
                            "            view_data = json.loads(view_data['view_schema'])\n", 
                            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                            "            # None when created the first time as we don't yet have an ID from\n", 
                            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                            "            # the view_id inside the view_schema is still None and wasn't\n", 
                            "            # assigned with its ID. For this to be fixed, we should not store\n", 
                            "            # the view_id within the view_schema. Or we can augment the dict\n", 
                            "            # such as here. This should be fixed when the view schema will be\n", 
                            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                            "            view_data['view_id'] = view_id\n", 
                            "            view_data['type'] = view_type\n", 
                            "\n", 
                            "            view = View(self.request, self)\n", 
                            "            view.load(view_data)\n", 
                            "            self.add_export_view(view)\n", 
                            "\n", 
                            "            if view.fix():\n", 
                            "                view.save()\n", 
                            "\n"
                        ], 
                        "name": "_populate_export_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257cfd0>, 'target': 'data', 'line_index_start': 679, 'line_index_end': 679, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e250>, 'target': 'views', 'line_index_start': 680, 'line_index_end': 683, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e3d0>, 'line_index_start': 684, 'value': 'True', 'line_index_end': 686, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e4d0>, 'line_index_start': 687, 'line_index_end': 687, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e5d0>, 'line_index_start': 688, 'line_index_end': 688, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 721, 
                        "line_index_start": 710, 
                        "lines": [
                            "    def _create_current_view(self):\n", 
                            "        view = View(self.request, self)\n", 
                            "        view_data = view.to_dict()\n", 
                            "        view_data['is_current'] = True\n", 
                            "        view_data['is_default'] = False\n", 
                            "        view_data['name'] = \"Current View\"\n", 
                            "        view_data['survey_id'] = self.id\n", 
                            "        view_data['type'] = 'standard'\n", 
                            "        view.load(view_data)\n", 
                            "        self.add_view(view)\n", 
                            "        return view\n", 
                            "\n"
                        ], 
                        "name": "_create_current_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2581410>, 'line_index_start': 720, 'value': 'view', 'line_index_end': 721, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257f690>, 'target': 'view', 'line_index_start': 711, 'line_index_end': 711, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257f850>, 'target': 'view_data', 'line_index_start': 712, 'line_index_end': 712, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257f990>, 'line_index_start': 713, 'value': 'True', 'line_index_end': 713, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257fb10>, 'line_index_start': 714, 'value': 'False', 'line_index_end': 714, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257fc90>, 'line_index_start': 715, 'value': 'Current View', 'line_index_end': 715, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257fe10>, 'line_index_start': 716, 'line_index_end': 716, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257ffd0>, 'line_index_start': 717, 'value': 'standard', 'line_index_end': 717, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 735, 
                        "line_index_start": 722, 
                        "lines": [
                            "    def _create_default_view(self):\n", 
                            "        view = View(self.request, self)\n", 
                            "        view_data = view.to_dict()\n", 
                            "        view_data['is_current'] = False\n", 
                            "        view_data['is_default'] = True\n", 
                            "        view_data['name'] = View.DEFAULT_VIEW_NAME\n", 
                            "        view_data['survey_id'] = self.id\n", 
                            "        view_data['type'] = 'standard'\n", 
                            "        view_data['page'] = 'all'\n", 
                            "\n", 
                            "        view.load(view_data)\n", 
                            "        self.add_view(view)\n", 
                            "        return view\n", 
                            "\n"
                        ], 
                        "name": "_create_default_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2582490>, 'line_index_start': 734, 'value': 'view', 'line_index_end': 735, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581550>, 'target': 'view', 'line_index_start': 723, 'line_index_end': 723, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581710>, 'target': 'view_data', 'line_index_start': 724, 'line_index_end': 724, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581850>, 'line_index_start': 725, 'value': 'False', 'line_index_end': 725, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25819d0>, 'line_index_start': 726, 'value': 'True', 'line_index_end': 726, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581b50>, 'line_index_start': 727, 'line_index_end': 727, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581d10>, 'line_index_start': 728, 'line_index_end': 728, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581ed0>, 'line_index_start': 729, 'value': 'standard', 'line_index_end': 729, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2582090>, 'line_index_start': 730, 'value': 'all', 'line_index_end': 731, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 798, 
                        "line_index_start": 736, 
                        "lines": [
                            "    def _create_quota_views(self):\n", 
                            "        if 'equations' not in self.quotas:\n", 
                            "            # A user can create part of a quota and not implement it so the\n", 
                            "            # survey has quotas but no equations. If so, we don't want to create\n", 
                            "            # the quota views until they finish creating the quota.\n", 
                            "            return\n", 
                            "        quota_question_map = self._translate_quotas()\n", 
                            "        for quota_group in self.quotas['equations']:\n", 
                            "            # each quota group has it's own view, and each quota groupd can have\n", 
                            "            # multiple questions and/or question answer option. The metadata,\n", 
                            "            # qna rules and completeness rule, are added to their quota view.\n", 
                            "            quota_view = View(self.request, self)\n", 
                            "            quota_view.survey = self\n", 
                            "            quota_view_data = quota_view.to_dict()\n", 
                            "            quota_view_data['name'] = quota_group['display_label']\n", 
                            "            quota_view_data['is_current'] = False\n", 
                            "            quota_view_data['is_default'] = False\n", 
                            "            quota_view_data['survey_id'] = self.id\n", 
                            "            quota_view_data['type'] = 'standard'\n", 
                            "            quota_view.load(quota_view_data)\n", 
                            "            quota_view.save()\n", 
                            "            self.add_view(quota_view)\n", 
                            "            for rules in quota_group['variables']:\n", 
                            "                # iterating through the the equation groups and using our map\n", 
                            "                # to get the question ids\n", 
                            "                question_option_group = rules['quota_question_option_group_id']\n", 
                            "                question_info = quota_question_map[question_option_group]\n", 
                            "                metadata_item = {\n", 
                            "                    'key': 'rule_filter_qna',\n", 
                            "                    'metadata_id': None,\n", 
                            "                    'option_id': None,\n", 
                            "                    'question_id': None,\n", 
                            "                    'view_id': quota_view.id,\n", 
                            "                    'value': {\n", 
                            "                        'rule_type': 'qna',\n", 
                            "                        'selected': True,\n", 
                            "                        'secondary_id': str(question_info['question_id']),\n", 
                            "                        'rows': {}\n", 
                            "                    }\n", 
                            "                }\n", 
                            "                for row in question_info['question_option_ids']:\n", 
                            "                    #this is for the answer options that are selected\n", 
                            "                    metadata_item['value'][\"rows\"][str(row)] = True\n", 
                            "                quota_view.add_or_update_metadata_item(metadata_item)\n", 
                            "            # completeness rule so we don't include overquota and disqualified\n", 
                            "            completeness_metadata = {\n", 
                            "                'key': 'rule_filter_completeness',\n", 
                            "                'value': {\n", 
                            "                    'rule_type': 'completeness',\n", 
                            "                    'rows': {\n", 
                            "                        'completely': True\n", 
                            "                    },\n", 
                            "                    'selected': True\n", 
                            "                },\n", 
                            "                'view_id': quota_view.id,\n", 
                            "                'metadata_id': None,\n", 
                            "                'option_id': None,\n", 
                            "                'question_id': None\n", 
                            "            }\n", 
                            "            quota_view.add_or_update_metadata_item(completeness_metadata)\n", 
                            "            quota_view.save_metadata()\n", 
                            "        self._add_autocreated_view_metadata(\"quota_views_created\")\n", 
                            "\n"
                        ], 
                        "name": "_create_quota_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2582750>, 'target': 'quota_question_map', 'line_index_start': 742, 'line_index_end': 742, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a11d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 855, 
                        "line_index_start": 799, 
                        "lines": [
                            "    def _create_random_assignment_views(self):\n", 
                            "        for ra in self.random_assignment_questions:\n", 
                            "            # each quota group has it's own view, and each quota groupd can have\n", 
                            "            # multiple questions and/or question answer option. The metadata,\n", 
                            "            # qna rules and completeness rule, are added to their quota view.\n", 
                            "\n", 
                            "            # We currently don't allow for compares on open_ended questions\n", 
                            "            if ra.type == 'open_ended' or \\\n", 
                            "               ra.type == 'demographic' or \\\n", 
                            "               ra.type == 'datetime':\n", 
                            "                continue\n", 
                            "            random_assignment_view = View(self.request, self)\n", 
                            "            random_assignment_view.survey = self\n", 
                            "            random_assignment_view_data = random_assignment_view.to_dict()\n", 
                            "\n", 
                            "            if len(ra.heading) > 0: \n", 
                            "                random_assignment_view_data['name'] = ra.heading\n", 
                            "            else:\n", 
                            "                random_assignment_view_data['name'] = \"Q%s A/B Test\" % (ra.position)\n", 
                            "\n", 
                            "            random_assignment_view_data['is_current'] = False\n", 
                            "            random_assignment_view_data['is_default'] = False\n", 
                            "            random_assignment_view_data['survey_id'] = self.id\n", 
                            "            random_assignment_view_data['type'] = 'standard'\n", 
                            "            random_assignment_view.load(random_assignment_view_data)\n", 
                            "            random_assignment_view.save()\n", 
                            "            self.add_view(random_assignment_view)\n", 
                            "            rows = {}\n", 
                            "            for rule in ra.random_assignment_list:\n", 
                            "                variable_id = rule['variable_id']\n", 
                            "                rows[str(variable_id)] = True\n", 
                            "                \n", 
                            "            # iterating through the the equation groups and using our map\n", 
                            "            # to get the question ids\n", 
                            "            metadata_item = {\n", 
                            "                'key': 'rule_compare_random_assignment',\n", 
                            "                'metadata_id': None,\n", 
                            "                'option_id': None,\n", 
                            "                'question_id': None,\n", 
                            "                'request': self.request,\n", 
                            "                'value': {\n", 
                            "                    'custom_heading': None,#rule['heading'],\n", 
                            "                    'family': ra.type,\n", 
                            "                    'subtype': ra.subtype,\n", 
                            "                    'question_id': int(ra.id),\n", 
                            "                    'rule_type': 'random_assignment',\n", 
                            "                    'selected': True,\n", 
                            "                    'rows': rows,\n", 
                            "                    'is_compare_rule': True,\n", 
                            "                },\n", 
                            "                'view_id': random_assignment_view.id,\n", 
                            "                'view': random_assignment_view,\n", 
                            "            }\n", 
                            "            random_assignment_view.add_or_update_metadata_item(metadata_item)\n", 
                            "            random_assignment_view.save_metadata()\n", 
                            "        self._add_autocreated_view_metadata(\"random_assignment_views_created\")\n", 
                            "\n"
                        ], 
                        "name": "_create_random_assignment_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 876, 
                        "line_index_start": 856, 
                        "lines": [
                            "    def _translate_quotas(self):\n", 
                            "        # must only be called on surveys with quotas!!\n", 
                            "        # AnSvc seperates the question option ids and question ids from the\n", 
                            "        # equations. We need to create a map for the equation group ids\n", 
                            "        # to the question ids, and selected question option ids.\n", 
                            "        quotas_questions = self.quotas['questions']\n", 
                            "        quota_question_map = {}\n", 
                            "        for question in quotas_questions:\n", 
                            "            question_id = question['question_id']\n", 
                            "            for options in question['option_groups']:\n", 
                            "                option_group_id = options['quota_question_option_group_id']\n", 
                            "                quota_question_map[option_group_id] = {\n", 
                            "                    'question_id': question_id,\n", 
                            "                    'question_option_ids': []\n", 
                            "                }\n", 
                            "                quota_question = quota_question_map[option_group_id]\n", 
                            "                question_option_ids = quota_question['question_option_ids']\n", 
                            "                for option in options['options']:\n", 
                            "                    question_option_ids.append(option['question_option_id'])\n", 
                            "        return quota_question_map\n", 
                            "\n"
                        ], 
                        "name": "_translate_quotas", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x258c550>, 'line_index_start': 875, 'value': 'quota_question_map', 'line_index_end': 876, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1290>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258a450>, 'target': 'quotas_questions', 'line_index_start': 861, 'line_index_end': 861, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1290>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258a610>, 'target': 'quota_question_map', 'line_index_start': 862, 'line_index_end': 862, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1290>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 927, 
                        "line_index_start": 877, 
                        "lines": [
                            "    def _create_audience_view(self):\n", 
                            "        # creating audience view\n", 
                            "        log.info(\"Creating audience view for survey=%s\", self.id)\n", 
                            "        audience_view = View(self.request, self)\n", 
                            "        audience_view.survey = self\n", 
                            "        audience_view_data = audience_view.to_dict()\n", 
                            "        audience_view_data['name'] = \"View complete responses only\"\n", 
                            "        audience_view_data['is_current'] = False\n", 
                            "        audience_view_data['is_default'] = False\n", 
                            "        audience_view_data['survey_id'] = self.id\n", 
                            "        audience_view_data['type'] = 'standard'\n", 
                            "        audience_view.load(audience_view_data)\n", 
                            "        audience_view.save()\n", 
                            "        self.add_view(audience_view)\n", 
                            "\n", 
                            "        #add completeness rule to audience view\n", 
                            "        completeness_metadata = {\n", 
                            "            'key': 'rule_filter_completeness',\n", 
                            "            'value': {\n", 
                            "                'rule_type': 'completeness',\n", 
                            "                'rows': {\n", 
                            "                    'completely': True\n", 
                            "                },\n", 
                            "                'selected': True\n", 
                            "            },\n", 
                            "            'view_id': audience_view.id,\n", 
                            "            'metadata_id': None,\n", 
                            "            'option_id': None,\n", 
                            "            'question_id': None\n", 
                            "        }\n", 
                            "        audience_view.add_or_update_metadata_item(completeness_metadata)\n", 
                            "        audience_view.save_metadata()\n", 
                            "\n", 
                            "        # testing to see how many people buying audiences have unsaved\n", 
                            "        # rules to see if this step is even necessary\n", 
                            "        # check if current view is dirty\n", 
                            "\n", 
                            "        if not self.current_view.is_dirty:\n", 
                            "            if self.owner.package_type != 'BASIC':\n", 
                            "                log.info(\"switching from current view to audience view \"\n", 
                            "                \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                            "                self.switch_view(audience_view)\n", 
                            "            else:\n", 
                            "                log.info(\"cannot switch to audience view views because user \"\n", 
                            "                \"is basic for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                            "        else:\n", 
                            "            log.info(\"has unsaved rules, cannot switch to audience view \"\n", 
                            "                 \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                            "\n", 
                            "        self._add_autocreated_view_metadata(\"audience_views_created\")\n", 
                            "\n"
                        ], 
                        "name": "_create_audience_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258c850>, 'target': 'audience_view', 'line_index_start': 880, 'line_index_end': 880, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258ca10>, 'line_index_start': 881, 'value': 'self', 'line_index_end': 881, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cb10>, 'target': 'audience_view_data', 'line_index_start': 882, 'line_index_end': 882, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cc50>, 'line_index_start': 883, 'value': 'View complete responses only', 'line_index_end': 883, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cdd0>, 'line_index_start': 884, 'value': 'False', 'line_index_end': 884, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cf50>, 'line_index_start': 885, 'value': 'False', 'line_index_end': 885, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2378110>, 'line_index_start': 886, 'line_index_end': 886, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23782d0>, 'line_index_start': 887, 'value': 'standard', 'line_index_end': 887, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23787d0>, 'target': 'completeness_metadata', 'line_index_start': 893, 'line_index_end': 906, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 943, 
                        "line_index_start": 928, 
                        "lines": [
                            "    def _add_autocreated_view_metadata(self, key):\n", 
                            "        # set metadata on the default view so we only create autocreated views\n", 
                            "        # once\n", 
                            "        autocreated_metadata = {\n", 
                            "            'key': key,\n", 
                            "            'value': {\n", 
                            "                'created': True\n", 
                            "            },\n", 
                            "            'view_id': self.default_view.id,\n", 
                            "            'metadata_id': None,\n", 
                            "            'option_id': None,\n", 
                            "            'question_id': None\n", 
                            "        }\n", 
                            "        self.default_view.add_or_update_metadata_item(autocreated_metadata)\n", 
                            "        self.default_view.save_metadata()\n", 
                            "\n"
                        ], 
                        "name": "_add_autocreated_view_metadata", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x233ce10>, 'target': 'autocreated_metadata', 'line_index_start': 931, 'line_index_end': 940, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1610>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x233d950>, 'name': 'property', 'line_index_start': 944, 'line_index_end': 945, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1690>}"
                        ], 
                        "docstring": "Return a list of views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 949, 
                        "line_index_start": 944, 
                        "lines": [
                            "    @property\n", 
                            "    def views(self):\n", 
                            "        \"\"\"Return a list of views.\"\"\"\n", 
                            "        self._populate_views()\n", 
                            "        return self._views_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 948, 'ast_node': <_ast.Return object at 0x233d810>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1690>, 'obj_type': 'return', 'line_index_end': 949}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x233dd10>, 'name': 'property', 'line_index_start': 950, 'line_index_end': 951, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1790>}"
                        ], 
                        "docstring": "Return a list of views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 955, 
                        "line_index_start": 950, 
                        "lines": [
                            "    @property\n", 
                            "    def export_views(self):\n", 
                            "        \"\"\"Return a list of views.\"\"\"\n", 
                            "        self._populate_export_views()\n", 
                            "        return self._export_views_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "export_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 954, 'ast_node': <_ast.Return object at 0x233dbd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1790>, 'obj_type': 'return', 'line_index_end': 955}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 993, 
                        "line_index_start": 956, 
                        "lines": [
                            "    def add_view(self, view):\n", 
                            "        self._populate_views()\n", 
                            "        if str(view.survey_id) != str(self.id):\n", 
                            "            raise RuntimeError(\n", 
                            "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
                            "                \"to survey %(other_survey_id)s\" % {\n", 
                            "                    \"view_id\": view.id,\n", 
                            "                    \"survey_id\": self.id,\n", 
                            "                    \"other_survey_id\": view.survey_id\n", 
                            "                }\n", 
                            "            )\n", 
                            "\n", 
                            "        if view.is_current:\n", 
                            "            if self._current_view is None:\n", 
                            "                self._current_view = view\n", 
                            "            elif self._current_view != view:\n", 
                            "                raise CurrentViewAlreadyExistsError(\n", 
                            "                    \"survey=%s already has current_view=%s\" % (\n", 
                            "                        self.id,\n", 
                            "                        self._current_view.id\n", 
                            "                    )\n", 
                            "                )\n", 
                            "        elif view.is_default:\n", 
                            "            if self._default_view is None:\n", 
                            "                self._default_view = view\n", 
                            "            elif self._default_view != view:\n", 
                            "                raise DefaultViewAlreadyExistsError(\n", 
                            "                    \"survey=%s already has default_view=%s\" % (\n", 
                            "                        self.id,\n", 
                            "                        self._default_view.id\n", 
                            "                    )\n", 
                            "                )\n", 
                            "            self._default_view = view\n", 
                            "\n", 
                            "        self._views_list.append(view)\n", 
                            "        self._views_map[view.id] = view\n", 
                            "        view.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2341690>, 'line_index_start': 991, 'value': 'view', 'line_index_end': 991, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2341890>, 'line_index_start': 992, 'value': 'self', 'line_index_end': 993, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1890>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Set the given selected view ``selected_view`` as the current view and\nreturn the current view.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1011, 
                        "line_index_start": 994, 
                        "lines": [
                            "    def switch_view(self, selected_view):\n", 
                            "        \"\"\"\n", 
                            "        Set the given selected view ``selected_view`` as the current view and\n", 
                            "        return the current view.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        self.current_view.copy(selected_view)\n", 
                            "        self.current_view.selected_view = selected_view\n", 
                            "\n", 
                            "        self.current_view.clear_metadata()\n", 
                            "\n", 
                            "        # Only copy metadata over if the selected view is not the default view\n", 
                            "        # because the default view should not have any rules saved on it.\n", 
                            "        if not selected_view.is_default and selected_view.has_metadata():\n", 
                            "            self.current_view.copy_metadata(selected_view)\n", 
                            "\n", 
                            "        return self.current_view\n", 
                            "\n"
                        ], 
                        "name": "switch_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1010, 'ast_node': <_ast.Return object at 0x23422d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1950>, 'obj_type': 'return', 'line_index_end': 1011}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2341c90>, 'line_index_start': 1001, 'value': 'selected_view', 'line_index_end': 1002, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1950>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1027, 
                        "line_index_start": 1012, 
                        "lines": [
                            "    def add_export_view(self, view):\n", 
                            "        self._populate_export_views()\n", 
                            "        if view.survey_id != self.id:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
                            "                \"to survey %(other_survey_id)s\" % {\n", 
                            "                    \"view_id\": view.id,\n", 
                            "                    \"survey_id\": self.id,\n", 
                            "                    \"other_survey_id\": view.survey_id\n", 
                            "                }\n", 
                            "            )\n", 
                            "\n", 
                            "        self._export_views_list.append(view)\n", 
                            "        self._export_views_map[view.id] = view\n", 
                            "        view.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_export_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2342c50>, 'line_index_start': 1025, 'value': 'view', 'line_index_end': 1025, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1a10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2342e50>, 'line_index_start': 1026, 'value': 'self', 'line_index_end': 1027, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1a10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1032, 
                        "line_index_start": 1028, 
                        "lines": [
                            "    def add_export_job(self, export_job):\n", 
                            "        self._export_job_list.append(export_job)\n", 
                            "        self._export_job_map[export_job.id] = export_job\n", 
                            "        export_job.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_export_job", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2345210>, 'line_index_start': 1030, 'value': 'export_job', 'line_index_end': 1030, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1ad0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2345410>, 'line_index_start': 1031, 'value': 'self', 'line_index_end': 1032, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1ad0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1041, 
                        "line_index_start": 1033, 
                        "lines": [
                            "    def delete_export_job(self, export_id):\n", 
                            "        self._populate_export_jobs()\n", 
                            "        job = self._export_job_map.get(export_id)\n", 
                            "        if job is None:\n", 
                            "            return\n", 
                            "        job.delete()\n", 
                            "        self._export_job_list.remove(job)\n", 
                            "        del self._export_job_map[export_id]\n", 
                            "\n"
                        ], 
                        "name": "delete_export_job", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2345710>, 'target': 'job', 'line_index_start': 1035, 'line_index_end': 1035, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1b90>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return a view given a ``view_id``.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1046, 
                        "line_index_start": 1042, 
                        "lines": [
                            "    def get_view_by_id(self, view_id):\n", 
                            "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
                            "        self._populate_views()\n", 
                            "        return self._views_map.get(view_id)\n", 
                            "\n"
                        ], 
                        "name": "get_view_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1045, 'ast_node': <_ast.Return object at 0x23460d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1c10>, 'obj_type': 'return', 'line_index_end': 1046}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return a view given a ``view_id``.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1051, 
                        "line_index_start": 1047, 
                        "lines": [
                            "    def get_shared_view_by_id(self, view_id):\n", 
                            "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
                            "        self._populate_shared_views()\n", 
                            "        return self._shared_views_map.get(view_id)\n", 
                            "\n"
                        ], 
                        "name": "get_shared_view_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1050, 'ast_node': <_ast.Return object at 0x23464d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1c90>, 'obj_type': 'return', 'line_index_end': 1051}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return an export view given a ``view_id``", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1056, 
                        "line_index_start": 1052, 
                        "lines": [
                            "    def get_export_view_by_id(self, view_id):\n", 
                            "        \"\"\"Return an export view given a ``view_id``\"\"\"\n", 
                            "        self._populate_export_views()\n", 
                            "        return self._export_views_map.get(view_id)\n", 
                            "\n"
                        ], 
                        "name": "get_export_view_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1055, 'ast_node': <_ast.Return object at 0x23468d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1d10>, 'obj_type': 'return', 'line_index_end': 1056}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2346cd0>, 'name': 'property', 'line_index_start': 1057, 'line_index_end': 1058, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1d90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1061, 
                        "line_index_start": 1057, 
                        "lines": [
                            "    @property\n", 
                            "    def current_view(self):\n", 
                            "        self._populate_views()\n", 
                            "        return self._current_view\n", 
                            "\n"
                        ], 
                        "name": "current_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1060, 'ast_node': <_ast.Return object at 0x2346c10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1d90>, 'obj_type': 'return', 'line_index_end': 1061}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2346f90>, 'name': 'property', 'line_index_start': 1062, 'line_index_end': 1063, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1e50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1066, 
                        "line_index_start": 1062, 
                        "lines": [
                            "    @property\n", 
                            "    def default_view(self):\n", 
                            "        self._populate_views()\n", 
                            "        return self._default_view\n", 
                            "\n"
                        ], 
                        "name": "default_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1065, 'ast_node': <_ast.Return object at 0x2346ed0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1e50>, 'obj_type': 'return', 'line_index_end': 1066}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1085, 
                        "line_index_start": 1067, 
                        "lines": [
                            "    def get_respondent_trends(\n", 
                            "        self, first_respondent, last_respondent, trend_by,\n", 
                            "        filter_data=None, compare_data=None\n", 
                            "    ):\n", 
                            "        counts = self.request.ansvc.get_survey_respondent_trends(\n", 
                            "            self.id,\n", 
                            "            first_respondent.id,\n", 
                            "            last_respondent.id,\n", 
                            "            trend_by,\n", 
                            "            self.owner.utc_offset,\n", 
                            "            filter_data=filter_data,\n", 
                            "            compare_data=compare_data\n", 
                            "        )\n", 
                            "\n", 
                            "        return {\n", 
                            "            'respondent_count': counts['respondent_count'],\n", 
                            "            'trend_by': trend_by\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "get_respondent_trends", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1081, 'ast_node': <_ast.Return object at 0x23497d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1f10>, 'obj_type': 'return', 'line_index_end': 1085}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2349290>, 'target': 'counts', 'line_index_start': 1071, 'line_index_end': 1080, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1f10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1095, 
                        "line_index_start": 1086, 
                        "lines": [
                            "    def respondent_counts(self, filter_data=None, compare_data=None):\n", 
                            "        counts = self.request.ansvc.get_respondent_counts(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            filter_data,\n", 
                            "            compare_data,\n", 
                            "            self.owner.response_limit\n", 
                            "        )\n", 
                            "        return counts['respondent_count']\n", 
                            "\n"
                        ], 
                        "name": "respondent_counts", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1094, 'ast_node': <_ast.Return object at 0x234a050>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1fd0>, 'obj_type': 'return', 'line_index_end': 1095}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2349bd0>, 'target': 'counts', 'line_index_start': 1087, 'line_index_end': 1093, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1fd0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1106, 
                        "line_index_start": 1096, 
                        "lines": [
                            "    def num_of_respondents(self, respondent_counts):\n", 
                            "        num_of_respondents = respondent_counts['total_context']\n", 
                            "\n", 
                            "        if (\n", 
                            "            self.owner.has_respondent_limit() and\n", 
                            "            num_of_respondents >= self.owner.response_limit\n", 
                            "        ):\n", 
                            "            num_of_respondents = self.owner.response_limit\n", 
                            "\n", 
                            "        return num_of_respondents\n", 
                            "\n"
                        ], 
                        "name": "num_of_respondents", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234a810>, 'line_index_start': 1105, 'value': 'num_of_respondents', 'line_index_end': 1106, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a50d0>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234a290>, 'target': 'num_of_respondents', 'line_index_start': 1097, 'line_index_end': 1098, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a50d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1118, 
                        "line_index_start": 1107, 
                        "lines": [
                            "    def add_page(self, page):\n", 
                            "        # Remove str() when this gets fixed:\n", 
                            "        # https://monkeys.jira.com/browse/GORILLA-922\n", 
                            "        if str(page.survey_id) != self.id:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to add page which survey ID differs\"\n", 
                            "            )\n", 
                            "        page.survey = self  # backref\n", 
                            "        self._page_list.append(page)\n", 
                            "        self._page_map[page.id] = page\n", 
                            "        self._page_map_by_index[page.index] = page\n", 
                            "\n"
                        ], 
                        "name": "add_page", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234ac90>, 'line_index_start': 1114, 'value': 'self', 'line_index_end': 1114, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5190>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234af10>, 'line_index_start': 1116, 'value': 'page', 'line_index_end': 1116, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5190>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234b150>, 'line_index_start': 1117, 'value': 'page', 'line_index_end': 1118, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5190>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1130, 
                        "line_index_start": 1119, 
                        "lines": [
                            "    def add_question(self, question):\n", 
                            "        # FIXME: Check that the question belongs to the survey (via the page)\n", 
                            "        # when this \"surveyservice\" ticket is fixed:\n", 
                            "        # https://monkeys.jira.com/browse/GORILLA-923\n", 
                            "        if question.page.survey.id != self.id:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to add question which page's ID differs\"\n", 
                            "            )\n", 
                            "        question.survey = self  # backref\n", 
                            "        self._question_list.append(question)\n", 
                            "        self._question_map[question.id] = question\n", 
                            "\n"
                        ], 
                        "name": "add_question", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234b750>, 'line_index_start': 1127, 'value': 'self', 'line_index_end': 1127, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5290>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234b9d0>, 'line_index_start': 1129, 'value': 'question', 'line_index_end': 1130, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5290>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234bf50>, 'name': 'property', 'line_index_start': 1131, 'line_index_end': 1132, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5350>}"
                        ], 
                        "docstring": "Return a list of pages.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1136, 
                        "line_index_start": 1131, 
                        "lines": [
                            "    @property\n", 
                            "    def pages(self):\n", 
                            "        \"\"\"Return a list of pages.\"\"\"\n", 
                            "        self._populate_pages()\n", 
                            "        return self._page_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1135, 'ast_node': <_ast.Return object at 0x234be10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5350>, 'obj_type': 'return', 'line_index_end': 1136}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234d610>, 'name': 'property', 'line_index_start': 1137, 'line_index_end': 1138, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5450>}"
                        ], 
                        "docstring": "Return a list of pages that shown by the show rule.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1145, 
                        "line_index_start": 1137, 
                        "lines": [
                            "    @property\n", 
                            "    def shown_pages(self):\n", 
                            "        \"\"\"Return a list of pages that shown by the show rule.\"\"\"\n", 
                            "        pages = []\n", 
                            "        for page in self.pages:\n", 
                            "            if self.current_view.shows_page(page):\n", 
                            "                pages.append(page)\n", 
                            "        return pages\n", 
                            "\n"
                        ], 
                        "name": "shown_pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234d590>, 'line_index_start': 1144, 'value': 'pages', 'line_index_end': 1145, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5450>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234d110>, 'target': 'pages', 'line_index_start': 1140, 'line_index_end': 1140, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5450>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return the first showable (analyzable) page. If no page is\nconsidered showable, return None. The show rule on the current view is\nalso taken into consideration to decide whether or not the page is\nshowable.\n\nIn analyze terms, a page is considered to be showable if the page\ncontains at least one \"real\" question that can be answered by a\nrespondent.\n\nE.g., \"presentation\" questions are not considered to be showable.\nUnless they are random assignment presentation questions.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1167, 
                        "line_index_start": 1146, 
                        "lines": [
                            "    def get_first_showable_page(self):\n", 
                            "        \"\"\"\n", 
                            "        Return the first showable (analyzable) page. If no page is\n", 
                            "        considered showable, return None. The show rule on the current view is\n", 
                            "        also taken into consideration to decide whether or not the page is\n", 
                            "        showable.\n", 
                            "\n", 
                            "        In analyze terms, a page is considered to be showable if the page\n", 
                            "        contains at least one \"real\" question that can be answered by a\n", 
                            "        respondent.\n", 
                            "\n", 
                            "        E.g., \"presentation\" questions are not considered to be showable.\n", 
                            "        Unless they are random assignment presentation questions.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        for page in self.shown_pages:\n", 
                            "            for question in page.questions:\n", 
                            "                if not question.is_presentation():\n", 
                            "                    return page\n", 
                            "                elif question.has_random_assignment:\n", 
                            "                    return page\n", 
                            "\n"
                        ], 
                        "name": "get_first_showable_page", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return the suggested default page index to show to the user.\n\nThe value is either the page's index or the string \"all\" meaning that\nall pages should be shown.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1187, 
                        "line_index_start": 1168, 
                        "lines": [
                            "    def get_suggested_default_page_index(self):\n", 
                            "        \"\"\"\n", 
                            "        Return the suggested default page index to show to the user.\n", 
                            "\n", 
                            "        The value is either the page's index or the string \"all\" meaning that\n", 
                            "        all pages should be shown.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if len(self.pages) > 1 and len(self.questions) > 30:\n", 
                            "\n", 
                            "            first_showable_page = self.get_first_showable_page()\n", 
                            "\n", 
                            "            if first_showable_page is None:\n", 
                            "                return self.pages[0].index\n", 
                            "\n", 
                            "            return first_showable_page.index\n", 
                            "\n", 
                            "        return \"all\"\n", 
                            "\n", 
                            "\n"
                        ], 
                        "name": "get_suggested_default_page_index", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234f650>, 'line_index_start': 1185, 'value': 'all', 'line_index_end': 1187, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5590>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234f9d0>, 'name': 'property', 'line_index_start': 1188, 'line_index_end': 1189, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a55d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1192, 
                        "line_index_start": 1188, 
                        "lines": [
                            "    @property\n", 
                            "    def questions(self):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._question_list[:]  # return copy!\n", 
                            "    \n"
                        ], 
                        "name": "questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1191, 'ast_node': <_ast.Return object at 0x234f890>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a55d0>, 'obj_type': 'return', 'line_index_end': 1192}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234fd90>, 'name': 'property', 'line_index_start': 1193, 'line_index_end': 1194, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a56d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1199, 
                        "line_index_start": 1193, 
                        "lines": [
                            "    @property\n", 
                            "    def has_random_assignment(self):\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                return True\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_random_assignment", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234fd10>, 'line_index_start': 1198, 'value': 'False', 'line_index_end': 1199, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a56d0>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2350310>, 'name': 'property', 'line_index_start': 1200, 'line_index_end': 1201, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5790>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1207, 
                        "line_index_start": 1200, 
                        "lines": [
                            "    @property\n", 
                            "    def random_assignment_questions(self):\n", 
                            "        random_assignment_questions = []\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                random_assignment_questions.append(q)\n", 
                            "        return random_assignment_questions\n", 
                            "\n"
                        ], 
                        "name": "random_assignment_questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2350290>, 'line_index_start': 1206, 'value': 'random_assignment_questions', 'line_index_end': 1207, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5790>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234fe90>, 'target': 'random_assignment_questions', 'line_index_start': 1202, 'line_index_end': 1202, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5790>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2350810>, 'name': 'property', 'line_index_start': 1208, 'line_index_end': 1209, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5890>}"
                        ], 
                        "docstring": "random assignment presentation questions included because they have\nsummary data", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1216, 
                        "line_index_start": 1208, 
                        "lines": [
                            "    @property\n", 
                            "    def summary_data_questions(self):\n", 
                            "        \"\"\"\n", 
                            "        random assignment presentation questions included because they have\n", 
                            "        summary data\n", 
                            "        \"\"\"\n", 
                            "        return [q for q in self.questions if not q.is_presentation() \\\n", 
                            "            or q.has_random_assignment]\n", 
                            "\n"
                        ], 
                        "name": "summary_data_questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1214, 'ast_node': <_ast.Return object at 0x2350490>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5890>, 'obj_type': 'return', 'line_index_end': 1216}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1220, 
                        "line_index_start": 1217, 
                        "lines": [
                            "    def get_question_by_id(self, question_id):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._question_map.get(question_id)\n", 
                            "\n"
                        ], 
                        "name": "get_question_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1219, 'ast_node': <_ast.Return object at 0x2350a50>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5910>, 'obj_type': 'return', 'line_index_end': 1220}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1224, 
                        "line_index_start": 1221, 
                        "lines": [
                            "    def get_page_by_id(self, page_id):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._page_map.get(page_id)\n", 
                            "\n"
                        ], 
                        "name": "get_page_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1223, 'ast_node': <_ast.Return object at 0x2350dd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a59d0>, 'obj_type': 'return', 'line_index_end': 1224}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2352390>, 'name': 'property', 'line_index_start': 1225, 'line_index_end': 1226, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5a50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1232, 
                        "line_index_start": 1225, 
                        "lines": [
                            "    @property\n", 
                            "    def export_jobs(self):\n", 
                            "        try:\n", 
                            "            self._populate_export_jobs()\n", 
                            "        except ServiceError:\n", 
                            "            return\n", 
                            "        return self._export_job_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "export_jobs", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1231, 'ast_node': <_ast.Return object at 0x2352250>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5a50>, 'obj_type': 'return', 'line_index_end': 1232}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1239, 
                        "line_index_start": 1233, 
                        "lines": [
                            "    def get_exportjob_by_id(self, job_id):\n", 
                            "        try:\n", 
                            "            self._populate_export_jobs()\n", 
                            "        except ServiceError:\n", 
                            "            return\n", 
                            "        return self._export_job_map.get(job_id)\n", 
                            "\n"
                        ], 
                        "name": "get_exportjob_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1238, 'ast_node': <_ast.Return object at 0x23526d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5b10>, 'obj_type': 'return', 'line_index_end': 1239}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2352ad0>, 'name': 'property', 'line_index_start': 1240, 'line_index_end': 1241, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5b90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1244, 
                        "line_index_start": 1240, 
                        "lines": [
                            "    @property\n", 
                            "    def theme(self):\n", 
                            "        self._populate_theme()\n", 
                            "        return self._theme\n", 
                            "\n"
                        ], 
                        "name": "theme", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1243, 'ast_node': <_ast.Return object at 0x2352a10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5b90>, 'obj_type': 'return', 'line_index_end': 1244}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2352d90>, 'name': 'property', 'line_index_start': 1245, 'line_index_end': 1246, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5c50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1249, 
                        "line_index_start": 1245, 
                        "lines": [
                            "    @property\n", 
                            "    def design_settings(self):\n", 
                            "        self._populate_design_settings()\n", 
                            "        return self._design_settings\n", 
                            "\n"
                        ], 
                        "name": "design_settings", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1248, 'ast_node': <_ast.Return object at 0x2352cd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5c50>, 'obj_type': 'return', 'line_index_end': 1249}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1261, 
                        "line_index_start": 1250, 
                        "lines": [
                            "    def _populate_theme(self):\n", 
                            "        if self._populated_theme:\n", 
                            "            return\n", 
                            "\n", 
                            "        self._populate_pages()\n", 
                            "        #self._populate_structure()  # required for the theme ID\n", 
                            "        theme_id = self.design_settings['theme_id']\n", 
                            "        theme_data = self.request.svysvc.get_theme(theme_id)\n", 
                            "        self._populated_theme = True\n", 
                            "\n", 
                            "        self._theme = theme_data\n", 
                            "\n"
                        ], 
                        "name": "_populate_theme", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23530d0>, 'target': 'theme_id', 'line_index_start': 1256, 'line_index_end': 1256, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353290>, 'target': 'theme_data', 'line_index_start': 1257, 'line_index_end': 1257, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353490>, 'line_index_start': 1258, 'value': 'True', 'line_index_end': 1259, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353590>, 'line_index_start': 1260, 'value': 'theme_data', 'line_index_end': 1261, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1275, 
                        "line_index_start": 1262, 
                        "lines": [
                            "    def _populate_design_settings(self):\n", 
                            "        if self._populated_design_settings:\n", 
                            "            return\n", 
                            "\n", 
                            "        # only include panel if there is a configured audience\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            include_design_settings=True,\n", 
                            "            include_panel=self.has_configured_audience\n", 
                            "        )\n", 
                            "\n", 
                            "        self._design_settings = survey_data['design_settings']\n", 
                            "\n"
                        ], 
                        "name": "_populate_design_settings", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353850>, 'target': 'survey_data', 'line_index_start': 1267, 'line_index_end': 1273, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5e50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353c90>, 'line_index_start': 1274, 'line_index_end': 1275, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5e50>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2355110>, 'name': 'property', 'line_index_start': 1276, 'line_index_end': 1277, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5f10>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1280, 
                        "line_index_start": 1276, 
                        "lines": [
                            "    @property\n", 
                            "    def question_logic(self):\n", 
                            "        self._populate_logic()\n", 
                            "        return self._question_logic\n", 
                            "\n"
                        ], 
                        "name": "question_logic", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1279, 'ast_node': <_ast.Return object at 0x2355050>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5f10>, 'obj_type': 'return', 'line_index_end': 1280}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x23553d0>, 'name': 'property', 'line_index_start': 1281, 'line_index_end': 1282, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5fd0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1285, 
                        "line_index_start": 1281, 
                        "lines": [
                            "    @property\n", 
                            "    def page_logic(self):\n", 
                            "        self._populate_logic()\n", 
                            "        return self._page_logic\n", 
                            "\n"
                        ], 
                        "name": "page_logic", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1284, 'ast_node': <_ast.Return object at 0x2355310>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5fd0>, 'obj_type': 'return', 'line_index_end': 1285}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1300, 
                        "line_index_start": 1286, 
                        "lines": [
                            "    def _populate_logic(self):\n", 
                            "        if self._populated_logic:\n", 
                            "            return\n", 
                            "\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            include_logic=True\n", 
                            "        )\n", 
                            "\n", 
                            "        self._question_logic = survey_data['logic'].get('question_logic')\n", 
                            "        self._page_logic = survey_data['logic'].get('page_logic')\n", 
                            "\n", 
                            "        self._populated_logic = True\n", 
                            "\n"
                        ], 
                        "name": "_populate_logic", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23555d0>, 'target': 'survey_data', 'line_index_start': 1290, 'line_index_end': 1295, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2355950>, 'line_index_start': 1296, 'line_index_end': 1296, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2355bd0>, 'line_index_start': 1297, 'line_index_end': 1298, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2355e50>, 'line_index_start': 1299, 'value': 'True', 'line_index_end': 1300, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1312, 
                        "line_index_start": 1301, 
                        "lines": [
                            "    def _populate_export_jobs(self):\n", 
                            "        if self._populated_export_jobs:\n", 
                            "            return\n", 
                            "\n", 
                            "        export_jobs_data = self.request.jobsvc.get_export_jobs(self.id)\n", 
                            "        for job_data in export_jobs_data['export_jobs']:\n", 
                            "            export_job = ViewExportJob(self.request)\n", 
                            "            export_job.load(job_data)\n", 
                            "            self.add_export_job(export_job)\n", 
                            "\n", 
                            "        self._populated_export_jobs = True\n", 
                            "\n"
                        ], 
                        "name": "_populate_export_jobs", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2356150>, 'target': 'export_jobs_data', 'line_index_start': 1305, 'line_index_end': 1305, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9210>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2356910>, 'line_index_start': 1311, 'value': 'True', 'line_index_end': 1312, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9210>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1316, 
                        "line_index_start": 1313, 
                        "lines": [
                            "    def get_page_by_index(self, index):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._page_map_by_index.get(index)\n", 
                            "\n"
                        ], 
                        "name": "get_page_by_index", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1315, 'ast_node': <_ast.Return object at 0x2356c10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a92d0>, 'obj_type': 'return', 'line_index_end': 1316}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2358310>, 'name': 'property', 'line_index_start': 1317, 'line_index_end': 1318, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9350>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1323, 
                        "line_index_start": 1317, 
                        "lines": [
                            "    @property\n", 
                            "    def language(self):\n", 
                            "        self._populate_survey()\n", 
                            "        for lang in self.language_options:\n", 
                            "            if lang['id'] == self._language_id:\n", 
                            "                return lang\n", 
                            "\n"
                        ], 
                        "name": "language", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "returns the english name of the current user's language ", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1328, 
                        "line_index_start": 1324, 
                        "lines": [
                            "    def _get_owner_language(self):\n", 
                            "        ''' returns the english name of the current user's language '''\n", 
                            "        language = get_language_from_country_code(self.owner.language_code)\n", 
                            "        return language.name.lower()\n", 
                            "\n"
                        ], 
                        "name": "_get_owner_language", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1327, 'ast_node': <_ast.Return object at 0x2358650>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a93d0>, 'obj_type': 'return', 'line_index_end': 1328}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2358490>, 'target': 'language', 'line_index_start': 1326, 'line_index_end': 1326, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a93d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "expand_all determines whether we will expand all the possible text items\nor just the essay questions.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1360, 
                        "line_index_start": 1329, 
                        "lines": [
                            "    def _get_ta_question_rollups(self, questions, filter_data=None,\n", 
                            "                                compare_data=None, expand_all=None):\n", 
                            "        '''\n", 
                            "        expand_all determines whether we will expand all the possible text items\n", 
                            "        or just the essay questions.\n", 
                            "\n", 
                            "        '''\n", 
                            "        rollups = {}\n", 
                            "\n", 
                            "        # compared questions are only expanded by the user\n", 
                            "        # or if expand_all == True\n", 
                            "        if (\n", 
                            "            expand_all is None and\n", 
                            "            compare_data is not None and\n", 
                            "            'right' in compare_data\n", 
                            "            ):\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        # prepare a default set of parameters for each question\n", 
                            "        default_params = self._prepare_ta_rollup(filter_data,\n", 
                            "                                                compare_data, expand_all)\n", 
                            "\n", 
                            "        if self.owner.has_respondent_limit():\n", 
                            "            response_limit = self.owner.response_limit\n", 
                            "            default_params['common']['response_limitation'] = response_limit\n", 
                            "\n", 
                            "        for question in questions:\n", 
                            "            rollups[question.id] = question.ta_preget_rollup_by_question(\n", 
                            "                                    default_params, expand_all)\n", 
                            "\n", 
                            "        return rollups\n", 
                            "\n"
                        ], 
                        "name": "_get_ta_question_rollups", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2359910>, 'line_index_start': 1359, 'value': 'rollups', 'line_index_end': 1360, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9490>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2358a90>, 'target': 'rollups', 'line_index_start': 1336, 'line_index_end': 1339, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9490>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2358e90>, 'target': 'default_params', 'line_index_start': 1348, 'line_index_end': 1350, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9490>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "random assignment ta rollups need a different structure", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1390, 
                        "line_index_start": 1361, 
                        "lines": [
                            "    def _get_random_assignment_ta_rollup(self, question, variation_id_list,\n", 
                            "                                        filter_data=None, compare_data=None,\n", 
                            "                                        expand_all=None, option_id=0):\n", 
                            "        \"\"\"\n", 
                            "        random assignment ta rollups need a different structure\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        rollups = {}\n", 
                            "\n", 
                            "        # compared questions are only expanded by the user\n", 
                            "        # or if expand_all == True\n", 
                            "        if (\n", 
                            "            expand_all is None and\n", 
                            "            compare_data is not None and\n", 
                            "            'right' in compare_data\n", 
                            "            ):\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        # prepare a default set of parameters for each question\n", 
                            "        for variation in variation_id_list:\n", 
                            "            default_params = self._prepare_ta_rollup(filter_data, compare_data,\n", 
                            "                expand_all, variation)\n", 
                            "            if self.owner.has_respondent_limit():\n", 
                            "                response_limit = self.owner.response_limit\n", 
                            "                default_params['common']['response_limitation'] = response_limit\n", 
                            "            ta_rollup = question.ta_preget_rollup_by_question(\n", 
                            "                            default_params, expand_all, option_id, variation)\n", 
                            "\n", 
                            "        return ta_rollup\n", 
                            "\n"
                        ], 
                        "name": "_get_random_assignment_ta_rollup", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x235bb90>, 'line_index_start': 1389, 'value': 'ta_rollup', 'line_index_end': 1390, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9590>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2359d50>, 'target': 'rollups', 'line_index_start': 1368, 'line_index_end': 1371, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9590>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "prepares rollups for all questions having text responses", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1421, 
                        "line_index_start": 1391, 
                        "lines": [
                            "    def _prepare_ta_rollup(self, filter_data=None, compare_data=None,\n", 
                            "                            expand_all=None, option_id=0, variation_id=0):\n", 
                            "        \"\"\"\n", 
                            "        prepares rollups for all questions having text responses\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "\n", 
                            "        return {\n", 
                            "            'common': {\n", 
                            "                'option_id': option_id,\n", 
                            "                'variation_id': variation_id,\n", 
                            "                'crosstab_option_id': None,\n", 
                            "                'matrix_crosstab': None,\n", 
                            "                'filter': filter_data,\n", 
                            "                'crosstab': compare_data\n", 
                            "            },\n", 
                            "            'response': {\n", 
                            "                'language': self._get_owner_language(),\n", 
                            "                # should get this from the client as well\n", 
                            "                #'page_size': data['page_size']\n", 
                            "                'page_size': 50,\n", 
                            "                'offset': 0,\n", 
                            "                'include_question_response_count': 1,\n", 
                            "                'include_question_tags': 1,\n", 
                            "                'restrict_by_tag_ids': None,\n", 
                            "            },\n", 
                            "            'analysis': {\n", 
                            "                'hide_ids': 1\n", 
                            "            }\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "_prepare_ta_rollup", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1398, 'ast_node': <_ast.Return object at 0x235bfd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9650>, 'obj_type': 'return', 'line_index_end': 1421}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Call object at 0x2363e10>, 'name': 'prof', 'starargs': None, 'kwargs': None, 'line_index_start': 1422, 'args': [], 'line_index_end': 1423, 'keywords': [<_ast.keyword object at 0x2363e90>], 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>}"
                        ], 
                        "docstring": "Return a dictionary of question rollup data for the currently showing\npage. Filters and compare data will be applied if they exist on the\ncurrent view.\n\nA list of Question instances may be passed as ``questions``, then only\nthe rollup data for these questions will be returned.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1561, 
                        "line_index_start": 1422, 
                        "lines": [
                            "    @prof(depth=5)#, include_variables=['questions', 'rollups'])\n", 
                            "    def get_question_rollups(self, questions, filter_data=None,\n", 
                            "                             compare_data=None, expand_all=None,\n", 
                            "                             include_openended=True):\n", 
                            "        \"\"\"\n", 
                            "        Return a dictionary of question rollup data for the currently showing\n", 
                            "        page. Filters and compare data will be applied if they exist on the\n", 
                            "        current view.\n", 
                            "\n", 
                            "        A list of Question instances may be passed as ``questions``, then only\n", 
                            "        the rollup data for these questions will be returned.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        rollups = {}  # returned data\n", 
                            "        input_question_list = []  # input for ansvc\n", 
                            "        ta_question_list = []  # input for tasvc\n", 
                            "        random_assignment_ta_list = []  # input for tasvc\n", 
                            "\n", 
                            "        for question in questions:\n", 
                            "            if question.is_presentation() and \\\n", 
                            "                not question.has_random_assignment:\n", 
                            "                # skip \"presentation\" questions that don't have summary data\n", 
                            "                continue\n", 
                            "\n", 
                            "            # We always return a dict of rollups that have all the requested\n", 
                            "            # questions. If the question doesn't have rollup data, it rollup\n", 
                            "            # value will be None.\n", 
                            "            rollups[question.id] = None\n", 
                            "            input_question_list.append(question)\n", 
                            "            if (\n", 
                            "                include_openended and\n", 
                            "                question.has_text and not\n", 
                            "                question.random_assignment_list\n", 
                            "            ):\n", 
                            "                ta_question_list.append(question)\n", 
                            "\n", 
                            "        if not input_question_list:\n", 
                            "            # If the survey doesn't have any questions, return an empty rollup\n", 
                            "            # dictionary\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        questions_data = []\n", 
                            "\n", 
                            "        for question in input_question_list:\n", 
                            "            q_data = {\n", 
                            "                'question_id': question.id,\n", 
                            "                'question_type': {\n", 
                            "                    'family': question.type,\n", 
                            "                    'subtype': question.subtype\n", 
                            "                },\n", 
                            "            }\n", 
                            "            if question.random_assignment_list:\n", 
                            "                q_data['random_assignment_vars'] = [str(ra['variable_id']) for ra in question.random_assignment_list]\n", 
                            "                if include_openended and question.has_text:\n", 
                            "                    random_assignment_ta_list.append(question)\n", 
                            "            questions_data.append(q_data)\n", 
                            "\n", 
                            "        is_ra_compare = False\n", 
                            "        is_ra_filter = False\n", 
                            "\n", 
                            "        if compare_data is not None:\n", 
                            "            if compare_data['type'] == 'random_assignment':\n", 
                            "                is_ra_compare = True\n", 
                            "        elif filter_data is not None:\n", 
                            "            if filter_data['left'] == 'question.ra':\n", 
                            "                is_ra_filter = True\n", 
                            "\n", 
                            "        if is_ra_compare:\n", 
                            "            response = self.request.ansvc.get_compare_rollups(\n", 
                            "                self.id,\n", 
                            "                self.owner.id,\n", 
                            "                questions_data,\n", 
                            "                filter_data,\n", 
                            "                compare_data,\n", 
                            "                self.owner.response_limit\n", 
                            "            )\n", 
                            "        elif False:  # is_ra_filter:\n", 
                            "            response = self.request.ansvc.get_questions_rollups_v2(\n", 
                            "                self.id,\n", 
                            "                self.owner.id,\n", 
                            "                questions_data,\n", 
                            "                filter_data,\n", 
                            "                compare_data,\n", 
                            "                self.owner.response_limit\n", 
                            "            )\n", 
                            "        else:\n", 
                            "            response = self.request.ansvc.get_questions_rollups(\n", 
                            "                self.id,\n", 
                            "                self.owner.id,\n", 
                            "                questions_data,\n", 
                            "                filter_data,\n", 
                            "                compare_data,\n", 
                            "                self.owner.response_limit\n", 
                            "            )\n", 
                            "\n", 
                            "        # unwrap rollups to the top-level of the dict\n", 
                            "        response = response[self.id]\n", 
                            "\n", 
                            "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
                            "        rollups.update(response)\n", 
                            "\n", 
                            "        ta_rollups = self._get_ta_question_rollups(\n", 
                            "            ta_question_list,\n", 
                            "            filter_data,\n", 
                            "            compare_data,\n", 
                            "            expand_all\n", 
                            "        )\n", 
                            "\n", 
                            "        for question_id in ta_rollups:\n", 
                            "            rollups[question_id]['summary']['ta_data'] = ta_rollups[question_id]\n", 
                            "\n", 
                            "        # Puts the TA data into questions that have random assignment in them\n", 
                            "        for question in random_assignment_ta_list:\n", 
                            "            for variable in question.random_assignment_list:\n", 
                            "                variable_id = str(variable['variable_id'])\n", 
                            "\n", 
                            "                # This is needed because on random_assignment compares, we\n", 
                            "                #   merge the question that is the source of the compare, thus we\n", 
                            "                #   don't seperate it by variation_id\n", 
                            "                if variable_id in rollups[question.id]:\n", 
                            "                    question_variable_rollup = rollups[question.id][variable_id]\n", 
                            "                else:\n", 
                            "                    variable_id == '0'\n", 
                            "                    question_variable_rollup = rollups[question.id]\n", 
                            "\n", 
                            "                if question.other_option:\n", 
                            "                    option_id = str(question.other_option['id'])\n", 
                            "                else:\n", 
                            "                    option_id = '0'\n", 
                            "\n", 
                            "                ta_rollup_data = self._get_random_assignment_ta_rollup(\n", 
                            "                                question, [variable_id],\n", 
                            "                                filter_data, compare_data,\n", 
                            "                                expand_all, option_id)\n", 
                            "\n", 
                            "                question_variable_rollup['summary']['ta_data'] = ta_rollup_data\n", 
                            "        \n", 
                            "        return rollups\n", 
                            "    \n", 
                            "\n"
                        ], 
                        "name": "get_question_rollups", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2363d90>, 'line_index_start': 1559, 'value': 'rollups', 'line_index_end': 1561, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235cc90>, 'target': 'rollups', 'line_index_start': 1435, 'line_index_end': 1435, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235cd50>, 'target': 'input_question_list', 'line_index_start': 1436, 'line_index_end': 1436, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235ce10>, 'target': 'ta_question_list', 'line_index_start': 1437, 'line_index_end': 1437, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235ced0>, 'target': 'random_assignment_ta_list', 'line_index_start': 1438, 'line_index_end': 1439, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235ea50>, 'target': 'questions_data', 'line_index_start': 1463, 'line_index_end': 1464, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235f810>, 'target': 'is_ra_compare', 'line_index_start': 1479, 'value': 'False', 'line_index_end': 1479, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235f8d0>, 'target': 'is_ra_filter', 'line_index_start': 1480, 'value': 'False', 'line_index_end': 1481, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2361f50>, 'target': 'response', 'line_index_start': 1518, 'line_index_end': 1520, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2362290>, 'target': 'ta_rollups', 'line_index_start': 1523, 'line_index_end': 1529, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2365b10>, 'name': 'property', 'line_index_start': 1562, 'line_index_end': 1563, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1573, 
                        "line_index_start": 1562, 
                        "lines": [
                            "    @property\n", 
                            "    def resource_path(self):\n", 
                            "        # taken from smlib.webmodels\n", 
                            "        if self.id is None:\n", 
                            "            raise Exception(\"survey id required\")\n", 
                            "\n", 
                            "        resource_path_prefix = self.request.registry.settings['dotnet.resource_path_prefix']\n", 
                            "        resource_host = self.request.registry.settings['dotnet.resource_host']\n", 
                            "        survey_id_modded = int(self.id) % 30000\n", 
                            "        return \"//%s/%s/%s/%s/\" % (resource_host, resource_path_prefix, survey_id_modded, self.id)\n", 
                            "\n", 
                            "\n"
                        ], 
                        "name": "resource_path", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1571, 'ast_node': <_ast.Return object at 0x23658d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'obj_type': 'return', 'line_index_end': 1573}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365250>, 'target': 'resource_path_prefix', 'line_index_start': 1568, 'line_index_end': 1568, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365490>, 'target': 'resource_host', 'line_index_start': 1569, 'line_index_end': 1569, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23656d0>, 'target': 'survey_id_modded', 'line_index_start': 1570, 'line_index_end': 1570, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return a dictionary of question rollup data for the currently showing\npage. Filters and compare data will be applied if they exist on the\ncurrent view.\n\nA list of Question instances may be passed as ``questions``, then only\nthe rollup data for these questions will be returned.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1635, 
                        "line_index_start": 1574, 
                        "lines": [
                            "    def get_questions_responses_trends(\n", 
                            "        self, first_respondent, last_respondent, default_trend_by, questions,\n", 
                            "        filter_data=None, compare_data=None\n", 
                            "    ):\n", 
                            "        \"\"\"\n", 
                            "        Return a dictionary of question rollup data for the currently showing\n", 
                            "        page. Filters and compare data will be applied if they exist on the\n", 
                            "        current view.\n", 
                            "\n", 
                            "        A list of Question instances may be passed as ``questions``, then only\n", 
                            "        the rollup data for these questions will be returned.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        rollups = {}  # returned data\n", 
                            "        input_question_list = []  # input for ansvc\n", 
                            "\n", 
                            "        for question in questions:\n", 
                            "            if not question.is_trendable():\n", 
                            "                continue\n", 
                            "            input_question_list.append(question)\n", 
                            "\n", 
                            "            # if the question has no data (no answers), we want to keep track\n", 
                            "            # that the rollup for this question was at least requested\n", 
                            "            rollups[question.id] = None\n", 
                            "\n", 
                            "        if not input_question_list:\n", 
                            "            # If the survey doesn't have any questions, return an empty rollup\n", 
                            "            # dictionary\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        questions_data = []\n", 
                            "        for question in input_question_list:\n", 
                            "            q_data = {\n", 
                            "                'question_id': question.id,\n", 
                            "                'question_type': {\n", 
                            "                    'family': question.type,\n", 
                            "                    'subtype': question.subtype\n", 
                            "                },\n", 
                            "                'trend_data': {\n", 
                            "                    'trend_by': question.trend_by or default_trend_by,\n", 
                            "                    'first_respondent': first_respondent.id,\n", 
                            "                    'last_respondent': last_respondent.id,\n", 
                            "                    'utc_offset': self.owner.utc_offset\n", 
                            "                }\n", 
                            "            }\n", 
                            "\n", 
                            "            questions_data.append(q_data)\n", 
                            "\n", 
                            "        response = self.request.ansvc.get_questions_responses_trends(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            questions_data,\n", 
                            "            filter_data,\n", 
                            "            compare_data\n", 
                            "        )\n", 
                            "        response = response[self.id]  # unwrap rollups to the top-level of the dict\n", 
                            "\n", 
                            "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
                            "        rollups.update(response)\n", 
                            "\n", 
                            "        return rollups\n", 
                            "\n"
                        ], 
                        "name": "get_questions_responses_trends", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2367850>, 'line_index_start': 1634, 'value': 'rollups', 'line_index_end': 1635, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365e90>, 'target': 'rollups', 'line_index_start': 1587, 'line_index_end': 1587, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365f50>, 'target': 'input_question_list', 'line_index_start': 1588, 'line_index_end': 1589, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23666d0>, 'target': 'questions_data', 'line_index_start': 1604, 'line_index_end': 1604, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2367190>, 'target': 'response', 'line_index_start': 1622, 'line_index_end': 1628, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2367550>, 'target': 'response', 'line_index_start': 1629, 'line_index_end': 1631, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return the whole survey structure.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1690, 
                        "line_index_start": 1636, 
                        "lines": [
                            "    def to_dict(self, include_collectors=False, include_theme=False):\n", 
                            "        \"\"\"\n", 
                            "        Return the whole survey structure.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        survey_data = {\n", 
                            "            'id': self.id,\n", 
                            "            'date_created': self.date_created,\n", 
                            "            'date_modified': self.date_modified,\n", 
                            "            'date_deleted': self.date_deleted,\n", 
                            "            'title': self.title,\n", 
                            "            'nickname': self.nickname,\n", 
                            "            'version': self.version,\n", 
                            "            'num_responses': self.num_responses,\n", 
                            "            'language': self.language,\n", 
                            "            'user_id': self.owner.id,\n", 
                            "            'answers': self._answer_map,\n", 
                            "            'has_panel_page': self.has_panel_page,\n", 
                            "            'question_count': self.question_count,\n", 
                            "            'design_settings': self.design_settings,\n", 
                            "            'theme_settings': self.theme if include_theme else None,\n", 
                            "            'quotas': self.quotas,\n", 
                            "            'page_logic': self.page_logic,\n", 
                            "            'question_logic': self.question_logic,\n", 
                            "            'has_logic': True if (\n", 
                            "                self.page_logic or self.question_logic\n", 
                            "            ) else False,\n", 
                            "            'has_randomization': True if (\n", 
                            "                self.has_page_randomization or\n", 
                            "                self.has_question_randomization\n", 
                            "            ) else False,\n", 
                            "            'mangled_id': self.mangled_id,\n", 
                            "            'preview_link': self.preview_link,\n", 
                            "            'resource_path': self.resource_path\n", 
                            "        }\n", 
                            "\n", 
                            "        if self._populated_pages:\n", 
                            "            survey_data.update({\n", 
                            "                'page_ids': [page.id for page in self.pages],\n", 
                            "                'questions': dict((q.id, q.to_dict()) for q in self.questions),\n", 
                            "                'pages': dict((p.id, p.to_dict()) for p in self.pages)\n", 
                            "            })\n", 
                            "        if self._populated_collectors or include_collectors:\n", 
                            "            survey_data.update({\n", 
                            "                'collectors': [c.to_dict() for c in self.collectors],\n", 
                            "                'has_collector': self.has_collector,\n", 
                            "                'has_email_collector': self.has_email_collector,\n", 
                            "                'has_open_collector': self.has_open_collector,\n", 
                            "                'has_all_closed_collectors': self.has_all_closed_collectors,\n", 
                            "                'has_unconfigured_collector': self.has_unconfigured_collector\n", 
                            "            })\n", 
                            "\n", 
                            "        return survey_data\n", 
                            "\n", 
                            "\n"
                        ], 
                        "name": "to_dict", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x236b550>, 'line_index_start': 1688, 'value': 'survey_data', 'line_index_end': 1690, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9d10>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2367b10>, 'target': 'survey_data', 'line_index_start': 1641, 'line_index_end': 1671, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9d10>, 'targets': []}"
                        ]
                    }
                ], 
                "classes": [], 
                "comments": [], 
                "decorators": [], 
                "docstring": null, 
                "functions": [
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 158, 
                        "line_index_start": 120, 
                        "lines": [
                            "    def __init__(self, request, survey_id):\n", 
                            "        self.request = request\n", 
                            "        self.id = str(survey_id)\n", 
                            "\n", 
                            "        # Holds the survey's dictionary structure\n", 
                            "        self._structure = {}\n", 
                            "\n", 
                            "        self._user_list = []\n", 
                            "        self._user_map = {}\n", 
                            "\n", 
                            "        self._views_list = []\n", 
                            "        self._views_map = {}\n", 
                            "\n", 
                            "        self._export_views_list = []\n", 
                            "        self._export_views_map = {}\n", 
                            "\n", 
                            "        self._page_list = []\n", 
                            "        self._page_map = {}\n", 
                            "        self._page_map_by_index = {}\n", 
                            "\n", 
                            "        self._question_list = []\n", 
                            "        self._question_map = {}\n", 
                            "\n", 
                            "        self._answer_map = {}\n", 
                            "\n", 
                            "        self._export_job_list = []\n", 
                            "        self._export_job_map = {}\n", 
                            "\n", 
                            "        self._collector_list = []\n", 
                            "        self._has_email_collector = False\n", 
                            "        self._has_collector = False\n", 
                            "        self._has_open_collector = False\n", 
                            "        self._has_unconfigured_collector = False\n", 
                            "        self._has_all_closed_collectors = False\n", 
                            "        self._has_configured_audience = False\n", 
                            "\n", 
                            "        self._question_logic = None\n", 
                            "        self._page_logic = None\n", 
                            "\n"
                        ], 
                        "name": "__init__", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22caa10>, 'line_index_start': 121, 'value': 'request', 'line_index_end': 121, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cab10>, 'line_index_start': 122, 'line_index_end': 124, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cac90>, 'line_index_start': 125, 'line_index_end': 126, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cad90>, 'line_index_start': 127, 'line_index_end': 127, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cae90>, 'line_index_start': 128, 'line_index_end': 129, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22caf90>, 'line_index_start': 130, 'line_index_end': 130, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb0d0>, 'line_index_start': 131, 'line_index_end': 132, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb1d0>, 'line_index_start': 133, 'line_index_end': 133, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb2d0>, 'line_index_start': 134, 'line_index_end': 135, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb3d0>, 'line_index_start': 136, 'line_index_end': 136, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb4d0>, 'line_index_start': 137, 'line_index_end': 137, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb5d0>, 'line_index_start': 138, 'line_index_end': 139, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb6d0>, 'line_index_start': 140, 'line_index_end': 140, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb7d0>, 'line_index_start': 141, 'line_index_end': 142, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb8d0>, 'line_index_start': 143, 'line_index_end': 144, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cb9d0>, 'line_index_start': 145, 'line_index_end': 145, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbad0>, 'line_index_start': 146, 'line_index_end': 147, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbbd0>, 'line_index_start': 148, 'line_index_end': 148, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbcd0>, 'line_index_start': 149, 'value': 'False', 'line_index_end': 149, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbdd0>, 'line_index_start': 150, 'value': 'False', 'line_index_end': 150, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbed0>, 'line_index_start': 151, 'value': 'False', 'line_index_end': 151, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cbfd0>, 'line_index_start': 152, 'value': 'False', 'line_index_end': 152, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc110>, 'line_index_start': 153, 'value': 'False', 'line_index_end': 153, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc210>, 'line_index_start': 154, 'value': 'False', 'line_index_end': 155, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc310>, 'line_index_start': 156, 'value': 'None', 'line_index_end': 156, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cc410>, 'line_index_start': 157, 'value': 'None', 'line_index_end': 158, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371890>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 165, 
                        "line_index_start": 159, 
                        "lines": [
                            "    def __repr__(self):\n", 
                            "        return \"<%(class)s=%(id)s at 0x%(mem)x>\" % {\n", 
                            "            \"class\": self.__class__.__name__,\n", 
                            "            \"id\": self.id,\n", 
                            "            \"mem\": id(self)\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "__repr__", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 160, 'ast_node': <_ast.Return object at 0x22cc5d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371f50>, 'obj_type': 'return', 'line_index_end': 165}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 180, 
                        "line_index_start": 166, 
                        "lines": [
                            "    def _load_survey(self, survey_data):\n", 
                            "        self._date_created = survey_data['date_created']\n", 
                            "        self._date_modified = survey_data['date_modified']\n", 
                            "        self._date_deleted = survey_data['date_deleted']\n", 
                            "        self._title = survey_data['title']['text']\n", 
                            "        self._nickname = survey_data.get('nickname')\n", 
                            "        self._language_id = survey_data['language_id']\n", 
                            "        self.version = survey_data['version']\n", 
                            "        self.num_responses = survey_data['num_responses']\n", 
                            "        self.question_count = survey_data['question_count']\n", 
                            "        self.has_panel_page = survey_data.get('has_panel_page', False)\n", 
                            "        self._quotas = survey_data.get('quota')\n", 
                            "        self.has_page_randomization = survey_data['page_randomization']['enabled']\n", 
                            "        self._answer_map = {}\n", 
                            "    \n"
                        ], 
                        "name": "_load_survey", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cca90>, 'line_index_start': 167, 'line_index_end': 167, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ccc50>, 'line_index_start': 168, 'line_index_end': 168, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cce10>, 'line_index_start': 169, 'line_index_end': 169, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ccfd0>, 'line_index_start': 170, 'line_index_end': 170, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce290>, 'line_index_start': 171, 'line_index_end': 171, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce450>, 'line_index_start': 172, 'line_index_end': 172, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce610>, 'line_index_start': 173, 'line_index_end': 173, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce7d0>, 'line_index_start': 174, 'line_index_end': 174, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ce990>, 'line_index_start': 175, 'line_index_end': 175, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ceb50>, 'line_index_start': 176, 'line_index_end': 176, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22ced50>, 'line_index_start': 177, 'line_index_end': 177, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22cef10>, 'line_index_start': 178, 'line_index_end': 178, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x254e1d0>, 'line_index_start': 179, 'line_index_end': 180, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371fd0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 207, 
                        "line_index_start": 181, 
                        "lines": [
                            "    def _set_benchmarkable_flags(self, survey_data):\n", 
                            "        if self.owner.has_benchmarking_feature():\n", 
                            "            # get benchmarkable data. we'll do this per page to minimize the bmsvc calls\n", 
                            "            for page in survey_data['pages']:\n", 
                            "                # get a dict of logical id by question id\n", 
                            "                #   we'll use this dict to update the page data\n", 
                            "                # get the list of logical ids\n", 
                            "                #   we'll use this list to get the benchmarkable info\n", 
                            "                qb_questions = {}\n", 
                            "                logical_ids = []\n", 
                            "                for question in page['questions']:\n", 
                            "                    if question['question_bank']['is_banked']:\n", 
                            "                        qb_questions[question['question_id']] = question['question_bank']['logical_bank_id']\n", 
                            "                        logical_ids.append(qb_questions[question['question_id']])\n", 
                            "                benchmarkable_ids = self.request.bmsvc.is_benchmarkable(logical_ids)\n", 
                            "                # now update the questions\n", 
                            "                for question in page['questions']:\n", 
                            "                    question['is_benchmarkable'] = True if question['question_id'] in qb_questions and\\\n", 
                            "                                                           qb_questions[question['question_id']] in benchmarkable_ids\\\n", 
                            "                                                        else False\n", 
                            "        else:\n", 
                            "            # set all questions as not benchmarkable\n", 
                            "            for page in survey_data['pages']:\n", 
                            "                for question in page['questions']:\n", 
                            "                    question['is_benchmarkable'] = False\n", 
                            "\n", 
                            "    #@prof(depth=1, include_variables=['survey_data'])\n"
                        ], 
                        "name": "_set_benchmarkable_flags", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 230, 
                        "line_index_start": 208, 
                        "lines": [
                            "    def _populate_pages(self):\n", 
                            "        if self._populated_pages:\n", 
                            "            return\n", 
                            "\n", 
                            "        # FIXME: Maybe create Option objects as well?\n", 
                            "        # only include panel if there has been a configured audience\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            load_pages=True,\n", 
                            "            include_panel=self.has_configured_audience\n", 
                            "        )\n", 
                            "        \n", 
                            "        # if the user has benchmarking available, we will set the benchmarking flag for each question as appropriate\n", 
                            "        self._set_benchmarkable_flags(survey_data)\n", 
                            "        \n", 
                            "        if not self._populated_survey:\n", 
                            "            self._populated_survey = True\n", 
                            "            self._load_survey(survey_data)\n", 
                            "\n", 
                            "        self._populated_pages = True\n", 
                            "        self._load_pages(survey_data['pages'])\n", 
                            "\n"
                        ], 
                        "name": "_populate_pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2551250>, 'target': 'survey_data', 'line_index_start': 214, 'line_index_end': 221, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23733d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2551b10>, 'line_index_start': 228, 'value': 'True', 'line_index_end': 228, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23733d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 251, 
                        "line_index_start": 231, 
                        "lines": [
                            "    def _populate_survey(self):\n", 
                            "        if self._populated_survey:\n", 
                            "            return\n", 
                            "\n", 
                            "        # FIXME: Maybe create Option objects as well?\n", 
                            "        # only include panel if there has abeen a configured audience\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            load_pages=False,\n", 
                            "            include_panel=self.has_configured_audience\n", 
                            "        )\n", 
                            "\n", 
                            "        if 'quota' in survey_data:\n", 
                            "            survey_data['quota'] = self.request.ansvc.quota_list(\n", 
                            "                survey_data['survey_id']\n", 
                            "            )['quota']\n", 
                            "\n", 
                            "        self._populated_survey = True\n", 
                            "        self._load_survey(survey_data)\n", 
                            "\n"
                        ], 
                        "name": "_populate_survey", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2551fd0>, 'target': 'survey_data', 'line_index_start': 237, 'line_index_end': 243, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373490>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2552990>, 'line_index_start': 249, 'value': 'True', 'line_index_end': 249, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373490>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2552e50>, 'name': 'property', 'line_index_start': 252, 'line_index_end': 253, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373550>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 257, 
                        "line_index_start": 252, 
                        "lines": [
                            "    @property\n", 
                            "    def title(self):\n", 
                            "        self._populate_survey()\n", 
                            "        return self._title\n", 
                            "\n", 
                            "    #dates appear to be stored in seconds\n"
                        ], 
                        "name": "title", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 255, 'ast_node': <_ast.Return object at 0x2552d90>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373550>, 'obj_type': 'return', 'line_index_end': 257}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2554290>, 'name': 'property', 'line_index_start': 258, 'line_index_end': 259, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373610>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 263, 
                        "line_index_start": 258, 
                        "lines": [
                            "    @property\n", 
                            "    def date_deleted(self):\n", 
                            "        self._populate_survey()\n", 
                            "        if self._date_deleted:\n", 
                            "            return self._date_deleted * 1000\n", 
                            "\n"
                        ], 
                        "name": "date_deleted", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25545d0>, 'name': 'property', 'line_index_start': 264, 'line_index_end': 265, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373690>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 268, 
                        "line_index_start": 264, 
                        "lines": [
                            "    @property\n", 
                            "    def date_created(self):\n", 
                            "        self._populate_survey()\n", 
                            "        return self._date_created * 1000\n", 
                            "\n"
                        ], 
                        "name": "date_created", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 267, 'ast_node': <_ast.Return object at 0x2554490>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373690>, 'obj_type': 'return', 'line_index_end': 268}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25549d0>, 'name': 'property', 'line_index_start': 269, 'line_index_end': 270, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373750>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 274, 
                        "line_index_start": 269, 
                        "lines": [
                            "    @property\n", 
                            "    def date_modified(self):\n", 
                            "        self._populate_survey()\n", 
                            "        if self._date_modified:\n", 
                            "            return self._date_modified * 1000\n", 
                            "\n"
                        ], 
                        "name": "date_modified", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2554c90>, 'name': 'property', 'line_index_start': 275, 'line_index_end': 276, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23737d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 279, 
                        "line_index_start": 275, 
                        "lines": [
                            "    @property\n", 
                            "    def quotas(self):\n", 
                            "        self._populate_survey()\n", 
                            "        return self._quotas\n", 
                            "\n"
                        ], 
                        "name": "quotas", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 278, 'ast_node': <_ast.Return object at 0x2554bd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23737d0>, 'obj_type': 'return', 'line_index_end': 279}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2556110>, 'name': 'property', 'line_index_start': 280, 'line_index_end': 281, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373890>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 287, 
                        "line_index_start": 280, 
                        "lines": [
                            "    @property\n", 
                            "    def nickname(self):\n", 
                            "        self._populate_survey()\n", 
                            "        if self._nickname:\n", 
                            "            return self._nickname\n", 
                            "\n", 
                            "        return self._title\n", 
                            "\n"
                        ], 
                        "name": "nickname", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 286, 'ast_node': <_ast.Return object at 0x2556050>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373890>, 'obj_type': 'return', 'line_index_end': 287}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2556610>, 'name': 'property', 'line_index_start': 288, 'line_index_end': 289, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373950>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 295, 
                        "line_index_start": 288, 
                        "lines": [
                            "    @property\n", 
                            "    def mangled_id(self):\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
                            "            )\n", 
                            "        return encrypt_mangled(\"SurveyID=%s&\" % self.id)\n", 
                            "\n"
                        ], 
                        "name": "mangled_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 294, 'ast_node': <_ast.Return object at 0x2556450>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373950>, 'obj_type': 'return', 'line_index_end': 295}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2556f10>, 'name': 'property', 'line_index_start': 296, 'line_index_end': 297, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 312, 
                        "line_index_start": 296, 
                        "lines": [
                            "    @property\n", 
                            "    def preview_link(self):\n", 
                            "        query_string = {\n", 
                            "            's': self.id,\n", 
                            "            'mode': 3\n", 
                            "        }\n", 
                            "        query_string = urlencode(query_string)\n", 
                            "        query_string = urlencode({\n", 
                            "            'sm': encrypt_mangled(query_string),\n", 
                            "            'PREVIEW_MODE': 'DO_NOT_USE_THIS_LINK_FOR_COLLECTION',\n", 
                            "        })\n", 
                            "\n", 
                            "        return \"%(path)s?%(qs)s\" % {\n", 
                            "            \"path\": '/s.aspx',\n", 
                            "            \"qs\": query_string\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "preview_link", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 308, 'ast_node': <_ast.Return object at 0x2556d10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'obj_type': 'return', 'line_index_end': 312}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2556710>, 'target': 'query_string', 'line_index_start': 298, 'line_index_end': 301, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2556910>, 'target': 'query_string', 'line_index_start': 302, 'line_index_end': 302, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2556a50>, 'target': 'query_string', 'line_index_start': 303, 'line_index_end': 307, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373a10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2558310>, 'name': 'property', 'line_index_start': 313, 'line_index_end': 314, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373b90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 320, 
                        "line_index_start": 313, 
                        "lines": [
                            "    @property\n", 
                            "    def has_question_randomization(self):\n", 
                            "        for page in self.pages:\n", 
                            "            if page.has_question_randomization:\n", 
                            "                return True\n", 
                            "\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_question_randomization", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2558290>, 'line_index_start': 319, 'value': 'False', 'line_index_end': 320, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373b90>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25586d0>, 'name': 'property', 'line_index_start': 321, 'line_index_end': 322, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373c50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 327, 
                        "line_index_start": 321, 
                        "lines": [
                            "    @property\n", 
                            "    def has_random_assignment(self):\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                return True\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_random_assignment", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2558650>, 'line_index_start': 326, 'value': 'False', 'line_index_end': 327, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373c50>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 363, 
                        "line_index_start": 328, 
                        "lines": [
                            "    def _populate_collectors(self):\n", 
                            "        if self._populated_collectors:\n", 
                            "            return\n", 
                            "\n", 
                            "        collector_list = self.request.collectorsvc.get_collector_list(\n", 
                            "            int(self.owner.id),\n", 
                            "            int(self.id)\n", 
                            "        )\n", 
                            "\n", 
                            "        self._has_all_closed_collectors = True\n", 
                            "        for collector_data in collector_list:\n", 
                            "            collector = Collector(self.request)\n", 
                            "            collector.load(collector_data)\n", 
                            "            if collector.is_email:\n", 
                            "                self._has_email_collector = True\n", 
                            "\n", 
                            "            if collector.is_open or collector.is_clearing_responses:\n", 
                            "                self._has_open_collector = True\n", 
                            "\n", 
                            "            if collector.is_new:\n", 
                            "                self._has_unconfigured_collector = True\n", 
                            "            elif collector.is_audience:\n", 
                            "                self._has_configured_audience = True\n", 
                            "\n", 
                            "            if not (collector.is_closed or collector.is_archived):\n", 
                            "                self._has_all_closed_collectors = False\n", 
                            "\n", 
                            "            self._collector_list.append(collector)\n", 
                            "\n", 
                            "        if self._collector_list:\n", 
                            "            self._has_collector = True\n", 
                            "        else:\n", 
                            "            self._has_all_closed_collectors = False\n", 
                            "\n", 
                            "        self._populated_collectors = True\n", 
                            "\n"
                        ], 
                        "name": "_populate_collectors", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25588d0>, 'target': 'collector_list', 'line_index_start': 332, 'line_index_end': 336, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2558cd0>, 'line_index_start': 337, 'value': 'True', 'line_index_end': 337, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2569090>, 'line_index_start': 362, 'value': 'True', 'line_index_end': 363, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373d10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569410>, 'name': 'property', 'line_index_start': 364, 'line_index_end': 365, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373e10>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 368, 
                        "line_index_start": 364, 
                        "lines": [
                            "    @property\n", 
                            "    def has_email_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_email_collector\n", 
                            "\n"
                        ], 
                        "name": "has_email_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 367, 'ast_node': <_ast.Return object at 0x2569350>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373e10>, 'obj_type': 'return', 'line_index_end': 368}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x25696d0>, 'name': 'property', 'line_index_start': 369, 'line_index_end': 370, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373ed0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 373, 
                        "line_index_start": 369, 
                        "lines": [
                            "    @property\n", 
                            "    def has_open_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_open_collector\n", 
                            "\n"
                        ], 
                        "name": "has_open_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 372, 'ast_node': <_ast.Return object at 0x2569610>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373ed0>, 'obj_type': 'return', 'line_index_end': 373}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569990>, 'name': 'property', 'line_index_start': 374, 'line_index_end': 375, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373f90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 378, 
                        "line_index_start": 374, 
                        "lines": [
                            "    @property\n", 
                            "    def has_all_closed_collectors(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_all_closed_collectors\n", 
                            "\n"
                        ], 
                        "name": "has_all_closed_collectors", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 377, 'ast_node': <_ast.Return object at 0x25698d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2373f90>, 'obj_type': 'return', 'line_index_end': 378}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569c50>, 'name': 'property', 'line_index_start': 379, 'line_index_end': 380, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379090>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 383, 
                        "line_index_start": 379, 
                        "lines": [
                            "    @property\n", 
                            "    def has_unconfigured_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_unconfigured_collector\n", 
                            "\n"
                        ], 
                        "name": "has_unconfigured_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 382, 'ast_node': <_ast.Return object at 0x2569b90>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379090>, 'obj_type': 'return', 'line_index_end': 383}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2569f10>, 'name': 'property', 'line_index_start': 384, 'line_index_end': 385, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379150>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 388, 
                        "line_index_start": 384, 
                        "lines": [
                            "    @property\n", 
                            "    def has_configured_audience(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_configured_audience\n", 
                            "\n"
                        ], 
                        "name": "has_configured_audience", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 387, 'ast_node': <_ast.Return object at 0x2569e50>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379150>, 'obj_type': 'return', 'line_index_end': 388}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256a210>, 'name': 'property', 'line_index_start': 389, 'line_index_end': 390, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379210>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 393, 
                        "line_index_start": 389, 
                        "lines": [
                            "    @property\n", 
                            "    def has_collector(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._has_collector\n", 
                            "\n"
                        ], 
                        "name": "has_collector", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 392, 'ast_node': <_ast.Return object at 0x256a150>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379210>, 'obj_type': 'return', 'line_index_end': 393}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256a4d0>, 'name': 'property', 'line_index_start': 394, 'line_index_end': 395, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23792d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 398, 
                        "line_index_start": 394, 
                        "lines": [
                            "    @property\n", 
                            "    def collectors(self):\n", 
                            "        self._populate_collectors()\n", 
                            "        return self._collector_list\n", 
                            "\n"
                        ], 
                        "name": "collectors", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 397, 'ast_node': <_ast.Return object at 0x256a410>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23792d0>, 'obj_type': 'return', 'line_index_end': 398}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Get the owners (user IDs) for this survey.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 419, 
                        "line_index_start": 399, 
                        "lines": [
                            "    def _populate_owners(self):\n", 
                            "        \"\"\"\n", 
                            "        Get the owners (user IDs) for this survey.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if self._populated_owners:\n", 
                            "            return\n", 
                            "\n", 
                            "        try:\n", 
                            "            access_list = self.request.svysvc.survey_access_list(self.id)\n", 
                            "            self._populated_owners = True\n", 
                            "        except ServiceResponseError:\n", 
                            "            # Survey might not be found\n", 
                            "            return\n", 
                            "\n", 
                            "        for user_id in access_list['users']:\n", 
                            "            user = User(self.request, user_id)\n", 
                            "            self._user_list.append(user)\n", 
                            "            self._user_map[user.id] = user\n", 
                            "            user.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "_populate_owners", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 423, 
                        "line_index_start": 420, 
                        "lines": [
                            "    def is_owner(self, user):\n", 
                            "        self._populate_owners()\n", 
                            "        return str(user.id) in self._user_map\n", 
                            "\n"
                        ], 
                        "name": "is_owner", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 422, 'ast_node': <_ast.Return object at 0x256c590>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23793d0>, 'obj_type': 'return', 'line_index_end': 423}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256c9d0>, 'name': 'property', 'line_index_start': 424, 'line_index_end': 425, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379450>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 427, 
                        "line_index_start": 424, 
                        "lines": [
                            "    @property\n", 
                            "    def owner(self):\n", 
                            "        return self.owners[0]\n", 
                            "\n"
                        ], 
                        "name": "owner", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 426, 'ast_node': <_ast.Return object at 0x256c850>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379450>, 'obj_type': 'return', 'line_index_end': 427}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x256cc90>, 'name': 'property', 'line_index_start': 428, 'line_index_end': 429, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379510>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 432, 
                        "line_index_start": 428, 
                        "lines": [
                            "    @property\n", 
                            "    def owners(self):\n", 
                            "        self._populate_owners()\n", 
                            "        return self._user_list\n", 
                            "\n"
                        ], 
                        "name": "owners", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 431, 'ast_node': <_ast.Return object at 0x256cbd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379510>, 'obj_type': 'return', 'line_index_end': 432}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 451, 
                        "line_index_start": 433, 
                        "lines": [
                            "    def _load_pages(self, pages):\n", 
                            "        question_position = 1\n", 
                            "        page_position = 1\n", 
                            "        for page_data in pages:\n", 
                            "            page = Page(self.request)\n", 
                            "            page.load(page_data)\n", 
                            "            page.position = page_position\n", 
                            "            page_position += 1\n", 
                            "            self.add_page(page)\n", 
                            "            for question in page.questions:\n", 
                            "                # Question numbers aren't stored with presentation context\n", 
                            "                # in the DB, we have to correct for this.\n", 
                            "                question.position = question_position\n", 
                            "                if not question.is_presentation() or \\\n", 
                            "                    question.has_random_assignment:\n", 
                            "                        question_position += 1\n", 
                            "                self.add_question(question)\n", 
                            "                self._load_answers(question.answers)\n", 
                            "\n"
                        ], 
                        "name": "_load_pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x256cdd0>, 'target': 'question_position', 'line_index_start': 434, 'value': 1, 'line_index_end': 434, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23795d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x256ce90>, 'target': 'page_position', 'line_index_start': 435, 'value': 1, 'line_index_end': 435, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23795d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 463, 
                        "line_index_start": 452, 
                        "lines": [
                            "    def _load_answers(self, answers):\n", 
                            "        for dim, dim_answers in iteritems(answers):\n", 
                            "            for answer in dim_answers:\n", 
                            "                self._answer_map[answer['answer_id']] = answer\n", 
                            "                answer['id'] = str(answer['answer_id'])\n", 
                            "                del answer['answer_id']\n", 
                            "                if 'items' in answer:\n", 
                            "                    for menu_item in answer['items']:\n", 
                            "                        self._answer_map[menu_item['answer_id']] = menu_item\n", 
                            "                        menu_item['id'] = str(menu_item['answer_id'])\n", 
                            "                        del menu_item['answer_id']\n", 
                            "\n"
                        ], 
                        "name": "_load_answers", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Get the views for this survey.\n\nIf no view exists, create default and current views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 570, 
                        "line_index_start": 464, 
                        "lines": [
                            "    def _populate_views(self):\n", 
                            "        \"\"\"\n", 
                            "        Get the views for this survey.\n", 
                            "\n", 
                            "        If no view exists, create default and current views.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if self._populated_views:\n", 
                            "            return\n", 
                            "\n", 
                            "        # Can't get data if ID is None\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to get views: survey has no ID.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        data = self.request.ansvc.list_views(self.id)\n", 
                            "        views = data['view_schemas']\n", 
                            "\n", 
                            "        # WARNING: This must be set before ``add_view()`` and\n", 
                            "        # ``get_views_by_id()`` gets called again lower down\n", 
                            "        self._populated_views = True\n", 
                            "\n", 
                            "        # Build view objects\n", 
                            "        self._views_list = []\n", 
                            "        self._views_map = {}\n", 
                            "        for view_id, view_data in iteritems(views):\n", 
                            "            view_type = view_data['view_type']\n", 
                            "            view_data = json.loads(view_data['view_schema'])\n", 
                            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                            "            # None when created the first time as we don't yet have an ID from\n", 
                            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                            "            # the view_id inside the view_schema is still None and wasn't\n", 
                            "            # assigned with its ID. For this to be fixed, we should not store\n", 
                            "            # the view_id within the view_schema. Or we can augment the dict\n", 
                            "            # such as here. This should be fixed when the view schema will be\n", 
                            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                            "            view_data['view_id'] = view_id\n", 
                            "            view_data['type'] = view_type\n", 
                            "\n", 
                            "            view = View(self.request, self)\n", 
                            "            view.load(view_data)\n", 
                            "            try:\n", 
                            "                self.add_view(view)\n", 
                            "            except (\n", 
                            "                CurrentViewAlreadyExistsError,\n", 
                            "                DefaultViewAlreadyExistsError\n", 
                            "            ):\n", 
                            "                log.warning(\n", 
                            "                    \"Name=DuplicateCurrentDefaultView\",\n", 
                            "                    \"ViewData=%s\" % view_data\n", 
                            "                )\n", 
                            "                # Force deletion because we normally can't delete a default or\n", 
                            "                # current view.\n", 
                            "                view.survey = self  # backref required for deletion\n", 
                            "                view.delete(force=True)\n", 
                            "\n", 
                            "        # Call .fix() only after all views have been loaded into the survey\n", 
                            "        # otherwise a view that depends on a not-yet-loaded view will\n", 
                            "        # provoke a traceback (GORILLA-2216).\n", 
                            "        for view in self.views:\n", 
                            "            if view.fix():\n", 
                            "                view.save()\n", 
                            "\n", 
                            "        if self.default_view is None:\n", 
                            "            log.info(\"Creating default view for survey=%s\", self.id)\n", 
                            "            default_view = self._create_default_view()\n", 
                            "            default_view.save()\n", 
                            "            self.add_view(default_view)\n", 
                            "\n", 
                            "        if self.current_view is None:\n", 
                            "            log.info(\"Creating current view for survey=%s\", self.id)\n", 
                            "            current_view = self._create_current_view()\n", 
                            "            current_view.selected_view = self.default_view\n", 
                            "            current_view.save()\n", 
                            "            self.add_view(current_view)\n", 
                            "\n", 
                            "        if self.quotas and self.default_view.quota_view_metadata is None:\n", 
                            "            log.info(\"Creating quota view for survey=%s\", self.id)\n", 
                            "            self._create_quota_views()\n", 
                            "        \n", 
                            "        if self.has_random_assignment and self.default_view.random_assignment_view_metadata is None:\n", 
                            "            log.info(\"Creating random assignment view for survey=%s\", self.id)\n", 
                            "            self._create_random_assignment_views()\n", 
                            "         \n", 
                            "        if self.has_configured_audience and \\\n", 
                            "            self.default_view.audience_view_metadata is None:\n", 
                            "                self._create_audience_view()\n", 
                            "\n", 
                            "        # Set the selected view on the current view.\n", 
                            "        selected_view_id = self.current_view.selected_view_id\n", 
                            "        selected_view = self.get_view_by_id(selected_view_id)\n", 
                            "        if selected_view is None:\n", 
                            "            # Make sure the current view has its selected view pointing to an\n", 
                            "            # existing view. If the selected view doesn't exist (see\n", 
                            "            # GORILLA-1198 for details), re-point the current view's selected\n", 
                            "            # view to be the default view.\n", 
                            "            log.warning(\n", 
                            "                \"Name=SelectedViewNotFound\",\n", 
                            "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
                            "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
                            "            )\n", 
                            "            selected_view = self.current_view.selected_view = self.default_view\n", 
                            "            self.current_view.save()\n", 
                            "        assert selected_view.id == self.current_view.selected_view_id\n", 
                            "        self.current_view.selected_view = selected_view\n", 
                            "\n"
                        ], 
                        "name": "_populate_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570590>, 'target': 'data', 'line_index_start': 480, 'line_index_end': 480, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25707d0>, 'target': 'views', 'line_index_start': 481, 'line_index_end': 484, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570950>, 'line_index_start': 485, 'value': 'True', 'line_index_end': 487, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570a50>, 'line_index_start': 488, 'line_index_end': 488, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2570b50>, 'line_index_start': 489, 'line_index_end': 489, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2575e10>, 'target': 'selected_view_id', 'line_index_start': 554, 'line_index_end': 554, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2575f50>, 'target': 'selected_view', 'line_index_start': 555, 'line_index_end': 555, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2576a90>, 'line_index_start': 569, 'value': 'selected_view', 'line_index_end': 570, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x23796d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Get the views for this survey.\n\nIf no view exists, create default and current views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 668, 
                        "line_index_start": 571, 
                        "lines": [
                            "    def _populate_shared_views(self):\n", 
                            "        \"\"\"\n", 
                            "        Get the views for this survey.\n", 
                            "\n", 
                            "        If no view exists, create default and current views.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if self._populated_shared_views:\n", 
                            "            return\n", 
                            "\n", 
                            "        # Can't get data if ID is None\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to get shared views: survey has no ID.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        data = self.request.ansvc.list_shared_views(self.id)\n", 
                            "        views = data['view_schemas']\n", 
                            "\n", 
                            "        # WARNING: This must be set before ``add_view()`` and\n", 
                            "        # ``get_views_by_id()`` gets called again lower down\n", 
                            "        self._populated_shared_views = True\n", 
                            "\n", 
                            "        # Build view objects\n", 
                            "        self._shared_views_list = []\n", 
                            "        self._shared_views_map = {}\n", 
                            "\n", 
                            "        for view_id, view_data in iteritems(views):\n", 
                            "            view_type = view_data['view_type']\n", 
                            "            view_data = json.loads(view_data['view_schema'])\n", 
                            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                            "            # None when created the first time as we don't yet have an ID from\n", 
                            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                            "            # the view_id inside the view_schema is still None and wasn't\n", 
                            "            # assigned with its ID. For this to be fixed, we should not store\n", 
                            "            # the view_id within the view_schema. Or we can augment the dict\n", 
                            "            # such as here. This should be fixed when the view schema will be\n", 
                            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                            "            view_data['view_id'] = view_id\n", 
                            "            view_data['type'] = view_type\n", 
                            "\n", 
                            "            view = View(self.request, self)\n", 
                            "            view.load(view_data)\n", 
                            "            view.survey = self\n", 
                            "\n", 
                            "            try:\n", 
                            "                self._shared_views_list.append(view)\n", 
                            "                self._shared_views_map[view_id] = view\n", 
                            "            except (\n", 
                            "                CurrentViewAlreadyExistsError,\n", 
                            "                DefaultViewAlreadyExistsError\n", 
                            "            ):\n", 
                            "                log.warning(\n", 
                            "                    \"Name=DuplicateCurrentDefaultView\",\n", 
                            "                    \"ViewData=%s\" % view_data\n", 
                            "                )\n", 
                            "                # Force deletion because we normally can't delete a default or\n", 
                            "                # current view.\n", 
                            "                view.delete(force=True)\n", 
                            "\n", 
                            "        # Call .fix() only after all views have been loaded into the survey\n", 
                            "        # otherwise a view that depends on a not-yet-loaded view will\n", 
                            "        # provoke a traceback (GORILLA-2216).\n", 
                            "        for view in self.views:\n", 
                            "            if view.fix():\n", 
                            "                view.save()\n", 
                            "\n", 
                            "        if self.default_view is None:\n", 
                            "            log.info(\"Creating default view for survey=%s\" % self.id)\n", 
                            "            default_view = self._create_default_view()\n", 
                            "            default_view.save()\n", 
                            "            self.add_view(default_view)\n", 
                            "\n", 
                            "        if self.current_view is None:\n", 
                            "            log.info(\"Creating current view for survey=%s\" % self.id)\n", 
                            "            current_view = self._create_current_view()\n", 
                            "            current_view.selected_view = self.default_view\n", 
                            "            current_view.save()\n", 
                            "            self.add_view(current_view)\n", 
                            "\n", 
                            "        # Set the selected view on the current view.\n", 
                            "        selected_view_id = self.current_view.selected_view_id\n", 
                            "        selected_view = self.get_view_by_id(selected_view_id)\n", 
                            "        if selected_view is None:\n", 
                            "            # Make sure the current view has its selected view pointing to an\n", 
                            "            # existing view. If the selected view doesn't exist (see\n", 
                            "            # GORILLA-1198 for details), re-point the current view's selected\n", 
                            "            # view to be the default view.\n", 
                            "            log.warning(\n", 
                            "                \"Name=SelectedViewNotFound\",\n", 
                            "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
                            "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
                            "            )\n", 
                            "            selected_view = self.current_view.selected_view = self.default_view\n", 
                            "            self.current_view.save()\n", 
                            "        assert selected_view.id == self.current_view.selected_view_id\n", 
                            "        self.current_view.selected_view = selected_view\n", 
                            "\n"
                        ], 
                        "name": "_populate_shared_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578090>, 'target': 'data', 'line_index_start': 587, 'line_index_end': 587, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25782d0>, 'target': 'views', 'line_index_start': 588, 'line_index_end': 591, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578450>, 'line_index_start': 592, 'value': 'True', 'line_index_end': 594, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578550>, 'line_index_start': 595, 'line_index_end': 595, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2578650>, 'line_index_start': 596, 'line_index_end': 597, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257be10>, 'target': 'selected_view_id', 'line_index_start': 652, 'line_index_end': 652, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257bf50>, 'target': 'selected_view', 'line_index_start': 653, 'line_index_end': 653, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257ca90>, 'line_index_start': 667, 'value': 'selected_view', 'line_index_end': 668, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379910>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 709, 
                        "line_index_start": 669, 
                        "lines": [
                            "    def _populate_export_views(self):\n", 
                            "        if self._populated_export_views:\n", 
                            "            return\n", 
                            "\n", 
                            "        # Can't get data if ID is None\n", 
                            "        if self.id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to get views: survey has no ID.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        data = self.request.ansvc.list_export_views(self.id)\n", 
                            "        views = data['view_schemas']\n", 
                            "\n", 
                            "        # WARNING: This must be set before ``add_view()`` and\n", 
                            "        # ``get_views_by_id()`` gets called again lower down\n", 
                            "        self._populated_export_views = True\n", 
                            "\n", 
                            "        # Build view objects\n", 
                            "        self._export_views_list = []\n", 
                            "        self._export_views_map = {}\n", 
                            "        for view_id, view_data in iteritems(views):\n", 
                            "            view_type = view_data['view_type']\n", 
                            "            view_data = json.loads(view_data['view_schema'])\n", 
                            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                            "            # None when created the first time as we don't yet have an ID from\n", 
                            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                            "            # the view_id inside the view_schema is still None and wasn't\n", 
                            "            # assigned with its ID. For this to be fixed, we should not store\n", 
                            "            # the view_id within the view_schema. Or we can augment the dict\n", 
                            "            # such as here. This should be fixed when the view schema will be\n", 
                            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                            "            view_data['view_id'] = view_id\n", 
                            "            view_data['type'] = view_type\n", 
                            "\n", 
                            "            view = View(self.request, self)\n", 
                            "            view.load(view_data)\n", 
                            "            self.add_export_view(view)\n", 
                            "\n", 
                            "            if view.fix():\n", 
                            "                view.save()\n", 
                            "\n"
                        ], 
                        "name": "_populate_export_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257cfd0>, 'target': 'data', 'line_index_start': 679, 'line_index_end': 679, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e250>, 'target': 'views', 'line_index_start': 680, 'line_index_end': 683, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e3d0>, 'line_index_start': 684, 'value': 'True', 'line_index_end': 686, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e4d0>, 'line_index_start': 687, 'line_index_end': 687, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257e5d0>, 'line_index_start': 688, 'line_index_end': 688, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379b50>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 721, 
                        "line_index_start": 710, 
                        "lines": [
                            "    def _create_current_view(self):\n", 
                            "        view = View(self.request, self)\n", 
                            "        view_data = view.to_dict()\n", 
                            "        view_data['is_current'] = True\n", 
                            "        view_data['is_default'] = False\n", 
                            "        view_data['name'] = \"Current View\"\n", 
                            "        view_data['survey_id'] = self.id\n", 
                            "        view_data['type'] = 'standard'\n", 
                            "        view.load(view_data)\n", 
                            "        self.add_view(view)\n", 
                            "        return view\n", 
                            "\n"
                        ], 
                        "name": "_create_current_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2581410>, 'line_index_start': 720, 'value': 'view', 'line_index_end': 721, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257f690>, 'target': 'view', 'line_index_start': 711, 'line_index_end': 711, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257f850>, 'target': 'view_data', 'line_index_start': 712, 'line_index_end': 712, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257f990>, 'line_index_start': 713, 'value': 'True', 'line_index_end': 713, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257fb10>, 'line_index_start': 714, 'value': 'False', 'line_index_end': 714, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257fc90>, 'line_index_start': 715, 'value': 'Current View', 'line_index_end': 715, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257fe10>, 'line_index_start': 716, 'line_index_end': 716, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x257ffd0>, 'line_index_start': 717, 'value': 'standard', 'line_index_end': 717, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379cd0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 735, 
                        "line_index_start": 722, 
                        "lines": [
                            "    def _create_default_view(self):\n", 
                            "        view = View(self.request, self)\n", 
                            "        view_data = view.to_dict()\n", 
                            "        view_data['is_current'] = False\n", 
                            "        view_data['is_default'] = True\n", 
                            "        view_data['name'] = View.DEFAULT_VIEW_NAME\n", 
                            "        view_data['survey_id'] = self.id\n", 
                            "        view_data['type'] = 'standard'\n", 
                            "        view_data['page'] = 'all'\n", 
                            "\n", 
                            "        view.load(view_data)\n", 
                            "        self.add_view(view)\n", 
                            "        return view\n", 
                            "\n"
                        ], 
                        "name": "_create_default_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2582490>, 'line_index_start': 734, 'value': 'view', 'line_index_end': 735, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581550>, 'target': 'view', 'line_index_start': 723, 'line_index_end': 723, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581710>, 'target': 'view_data', 'line_index_start': 724, 'line_index_end': 724, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581850>, 'line_index_start': 725, 'value': 'False', 'line_index_end': 725, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x25819d0>, 'line_index_start': 726, 'value': 'True', 'line_index_end': 726, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581b50>, 'line_index_start': 727, 'line_index_end': 727, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581d10>, 'line_index_start': 728, 'line_index_end': 728, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2581ed0>, 'line_index_start': 729, 'value': 'standard', 'line_index_end': 729, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2582090>, 'line_index_start': 730, 'value': 'all', 'line_index_end': 731, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2379f10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 798, 
                        "line_index_start": 736, 
                        "lines": [
                            "    def _create_quota_views(self):\n", 
                            "        if 'equations' not in self.quotas:\n", 
                            "            # A user can create part of a quota and not implement it so the\n", 
                            "            # survey has quotas but no equations. If so, we don't want to create\n", 
                            "            # the quota views until they finish creating the quota.\n", 
                            "            return\n", 
                            "        quota_question_map = self._translate_quotas()\n", 
                            "        for quota_group in self.quotas['equations']:\n", 
                            "            # each quota group has it's own view, and each quota groupd can have\n", 
                            "            # multiple questions and/or question answer option. The metadata,\n", 
                            "            # qna rules and completeness rule, are added to their quota view.\n", 
                            "            quota_view = View(self.request, self)\n", 
                            "            quota_view.survey = self\n", 
                            "            quota_view_data = quota_view.to_dict()\n", 
                            "            quota_view_data['name'] = quota_group['display_label']\n", 
                            "            quota_view_data['is_current'] = False\n", 
                            "            quota_view_data['is_default'] = False\n", 
                            "            quota_view_data['survey_id'] = self.id\n", 
                            "            quota_view_data['type'] = 'standard'\n", 
                            "            quota_view.load(quota_view_data)\n", 
                            "            quota_view.save()\n", 
                            "            self.add_view(quota_view)\n", 
                            "            for rules in quota_group['variables']:\n", 
                            "                # iterating through the the equation groups and using our map\n", 
                            "                # to get the question ids\n", 
                            "                question_option_group = rules['quota_question_option_group_id']\n", 
                            "                question_info = quota_question_map[question_option_group]\n", 
                            "                metadata_item = {\n", 
                            "                    'key': 'rule_filter_qna',\n", 
                            "                    'metadata_id': None,\n", 
                            "                    'option_id': None,\n", 
                            "                    'question_id': None,\n", 
                            "                    'view_id': quota_view.id,\n", 
                            "                    'value': {\n", 
                            "                        'rule_type': 'qna',\n", 
                            "                        'selected': True,\n", 
                            "                        'secondary_id': str(question_info['question_id']),\n", 
                            "                        'rows': {}\n", 
                            "                    }\n", 
                            "                }\n", 
                            "                for row in question_info['question_option_ids']:\n", 
                            "                    #this is for the answer options that are selected\n", 
                            "                    metadata_item['value'][\"rows\"][str(row)] = True\n", 
                            "                quota_view.add_or_update_metadata_item(metadata_item)\n", 
                            "            # completeness rule so we don't include overquota and disqualified\n", 
                            "            completeness_metadata = {\n", 
                            "                'key': 'rule_filter_completeness',\n", 
                            "                'value': {\n", 
                            "                    'rule_type': 'completeness',\n", 
                            "                    'rows': {\n", 
                            "                        'completely': True\n", 
                            "                    },\n", 
                            "                    'selected': True\n", 
                            "                },\n", 
                            "                'view_id': quota_view.id,\n", 
                            "                'metadata_id': None,\n", 
                            "                'option_id': None,\n", 
                            "                'question_id': None\n", 
                            "            }\n", 
                            "            quota_view.add_or_update_metadata_item(completeness_metadata)\n", 
                            "            quota_view.save_metadata()\n", 
                            "        self._add_autocreated_view_metadata(\"quota_views_created\")\n", 
                            "\n"
                        ], 
                        "name": "_create_quota_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2582750>, 'target': 'quota_question_map', 'line_index_start': 742, 'line_index_end': 742, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a11d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 855, 
                        "line_index_start": 799, 
                        "lines": [
                            "    def _create_random_assignment_views(self):\n", 
                            "        for ra in self.random_assignment_questions:\n", 
                            "            # each quota group has it's own view, and each quota groupd can have\n", 
                            "            # multiple questions and/or question answer option. The metadata,\n", 
                            "            # qna rules and completeness rule, are added to their quota view.\n", 
                            "\n", 
                            "            # We currently don't allow for compares on open_ended questions\n", 
                            "            if ra.type == 'open_ended' or \\\n", 
                            "               ra.type == 'demographic' or \\\n", 
                            "               ra.type == 'datetime':\n", 
                            "                continue\n", 
                            "            random_assignment_view = View(self.request, self)\n", 
                            "            random_assignment_view.survey = self\n", 
                            "            random_assignment_view_data = random_assignment_view.to_dict()\n", 
                            "\n", 
                            "            if len(ra.heading) > 0: \n", 
                            "                random_assignment_view_data['name'] = ra.heading\n", 
                            "            else:\n", 
                            "                random_assignment_view_data['name'] = \"Q%s A/B Test\" % (ra.position)\n", 
                            "\n", 
                            "            random_assignment_view_data['is_current'] = False\n", 
                            "            random_assignment_view_data['is_default'] = False\n", 
                            "            random_assignment_view_data['survey_id'] = self.id\n", 
                            "            random_assignment_view_data['type'] = 'standard'\n", 
                            "            random_assignment_view.load(random_assignment_view_data)\n", 
                            "            random_assignment_view.save()\n", 
                            "            self.add_view(random_assignment_view)\n", 
                            "            rows = {}\n", 
                            "            for rule in ra.random_assignment_list:\n", 
                            "                variable_id = rule['variable_id']\n", 
                            "                rows[str(variable_id)] = True\n", 
                            "                \n", 
                            "            # iterating through the the equation groups and using our map\n", 
                            "            # to get the question ids\n", 
                            "            metadata_item = {\n", 
                            "                'key': 'rule_compare_random_assignment',\n", 
                            "                'metadata_id': None,\n", 
                            "                'option_id': None,\n", 
                            "                'question_id': None,\n", 
                            "                'request': self.request,\n", 
                            "                'value': {\n", 
                            "                    'custom_heading': None,#rule['heading'],\n", 
                            "                    'family': ra.type,\n", 
                            "                    'subtype': ra.subtype,\n", 
                            "                    'question_id': int(ra.id),\n", 
                            "                    'rule_type': 'random_assignment',\n", 
                            "                    'selected': True,\n", 
                            "                    'rows': rows,\n", 
                            "                    'is_compare_rule': True,\n", 
                            "                },\n", 
                            "                'view_id': random_assignment_view.id,\n", 
                            "                'view': random_assignment_view,\n", 
                            "            }\n", 
                            "            random_assignment_view.add_or_update_metadata_item(metadata_item)\n", 
                            "            random_assignment_view.save_metadata()\n", 
                            "        self._add_autocreated_view_metadata(\"random_assignment_views_created\")\n", 
                            "\n"
                        ], 
                        "name": "_create_random_assignment_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 876, 
                        "line_index_start": 856, 
                        "lines": [
                            "    def _translate_quotas(self):\n", 
                            "        # must only be called on surveys with quotas!!\n", 
                            "        # AnSvc seperates the question option ids and question ids from the\n", 
                            "        # equations. We need to create a map for the equation group ids\n", 
                            "        # to the question ids, and selected question option ids.\n", 
                            "        quotas_questions = self.quotas['questions']\n", 
                            "        quota_question_map = {}\n", 
                            "        for question in quotas_questions:\n", 
                            "            question_id = question['question_id']\n", 
                            "            for options in question['option_groups']:\n", 
                            "                option_group_id = options['quota_question_option_group_id']\n", 
                            "                quota_question_map[option_group_id] = {\n", 
                            "                    'question_id': question_id,\n", 
                            "                    'question_option_ids': []\n", 
                            "                }\n", 
                            "                quota_question = quota_question_map[option_group_id]\n", 
                            "                question_option_ids = quota_question['question_option_ids']\n", 
                            "                for option in options['options']:\n", 
                            "                    question_option_ids.append(option['question_option_id'])\n", 
                            "        return quota_question_map\n", 
                            "\n"
                        ], 
                        "name": "_translate_quotas", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x258c550>, 'line_index_start': 875, 'value': 'quota_question_map', 'line_index_end': 876, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1290>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258a450>, 'target': 'quotas_questions', 'line_index_start': 861, 'line_index_end': 861, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1290>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258a610>, 'target': 'quota_question_map', 'line_index_start': 862, 'line_index_end': 862, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1290>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 927, 
                        "line_index_start": 877, 
                        "lines": [
                            "    def _create_audience_view(self):\n", 
                            "        # creating audience view\n", 
                            "        log.info(\"Creating audience view for survey=%s\", self.id)\n", 
                            "        audience_view = View(self.request, self)\n", 
                            "        audience_view.survey = self\n", 
                            "        audience_view_data = audience_view.to_dict()\n", 
                            "        audience_view_data['name'] = \"View complete responses only\"\n", 
                            "        audience_view_data['is_current'] = False\n", 
                            "        audience_view_data['is_default'] = False\n", 
                            "        audience_view_data['survey_id'] = self.id\n", 
                            "        audience_view_data['type'] = 'standard'\n", 
                            "        audience_view.load(audience_view_data)\n", 
                            "        audience_view.save()\n", 
                            "        self.add_view(audience_view)\n", 
                            "\n", 
                            "        #add completeness rule to audience view\n", 
                            "        completeness_metadata = {\n", 
                            "            'key': 'rule_filter_completeness',\n", 
                            "            'value': {\n", 
                            "                'rule_type': 'completeness',\n", 
                            "                'rows': {\n", 
                            "                    'completely': True\n", 
                            "                },\n", 
                            "                'selected': True\n", 
                            "            },\n", 
                            "            'view_id': audience_view.id,\n", 
                            "            'metadata_id': None,\n", 
                            "            'option_id': None,\n", 
                            "            'question_id': None\n", 
                            "        }\n", 
                            "        audience_view.add_or_update_metadata_item(completeness_metadata)\n", 
                            "        audience_view.save_metadata()\n", 
                            "\n", 
                            "        # testing to see how many people buying audiences have unsaved\n", 
                            "        # rules to see if this step is even necessary\n", 
                            "        # check if current view is dirty\n", 
                            "\n", 
                            "        if not self.current_view.is_dirty:\n", 
                            "            if self.owner.package_type != 'BASIC':\n", 
                            "                log.info(\"switching from current view to audience view \"\n", 
                            "                \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                            "                self.switch_view(audience_view)\n", 
                            "            else:\n", 
                            "                log.info(\"cannot switch to audience view views because user \"\n", 
                            "                \"is basic for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                            "        else:\n", 
                            "            log.info(\"has unsaved rules, cannot switch to audience view \"\n", 
                            "                 \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                            "\n", 
                            "        self._add_autocreated_view_metadata(\"audience_views_created\")\n", 
                            "\n"
                        ], 
                        "name": "_create_audience_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258c850>, 'target': 'audience_view', 'line_index_start': 880, 'line_index_end': 880, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258ca10>, 'line_index_start': 881, 'value': 'self', 'line_index_end': 881, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cb10>, 'target': 'audience_view_data', 'line_index_start': 882, 'line_index_end': 882, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cc50>, 'line_index_start': 883, 'value': 'View complete responses only', 'line_index_end': 883, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cdd0>, 'line_index_start': 884, 'value': 'False', 'line_index_end': 884, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x258cf50>, 'line_index_start': 885, 'value': 'False', 'line_index_end': 885, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2378110>, 'line_index_start': 886, 'line_index_end': 886, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23782d0>, 'line_index_start': 887, 'value': 'standard', 'line_index_end': 887, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23787d0>, 'target': 'completeness_metadata', 'line_index_start': 893, 'line_index_end': 906, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1390>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 943, 
                        "line_index_start": 928, 
                        "lines": [
                            "    def _add_autocreated_view_metadata(self, key):\n", 
                            "        # set metadata on the default view so we only create autocreated views\n", 
                            "        # once\n", 
                            "        autocreated_metadata = {\n", 
                            "            'key': key,\n", 
                            "            'value': {\n", 
                            "                'created': True\n", 
                            "            },\n", 
                            "            'view_id': self.default_view.id,\n", 
                            "            'metadata_id': None,\n", 
                            "            'option_id': None,\n", 
                            "            'question_id': None\n", 
                            "        }\n", 
                            "        self.default_view.add_or_update_metadata_item(autocreated_metadata)\n", 
                            "        self.default_view.save_metadata()\n", 
                            "\n"
                        ], 
                        "name": "_add_autocreated_view_metadata", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x233ce10>, 'target': 'autocreated_metadata', 'line_index_start': 931, 'line_index_end': 940, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1610>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x233d950>, 'name': 'property', 'line_index_start': 944, 'line_index_end': 945, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1690>}"
                        ], 
                        "docstring": "Return a list of views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 949, 
                        "line_index_start": 944, 
                        "lines": [
                            "    @property\n", 
                            "    def views(self):\n", 
                            "        \"\"\"Return a list of views.\"\"\"\n", 
                            "        self._populate_views()\n", 
                            "        return self._views_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 948, 'ast_node': <_ast.Return object at 0x233d810>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1690>, 'obj_type': 'return', 'line_index_end': 949}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x233dd10>, 'name': 'property', 'line_index_start': 950, 'line_index_end': 951, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1790>}"
                        ], 
                        "docstring": "Return a list of views.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 955, 
                        "line_index_start": 950, 
                        "lines": [
                            "    @property\n", 
                            "    def export_views(self):\n", 
                            "        \"\"\"Return a list of views.\"\"\"\n", 
                            "        self._populate_export_views()\n", 
                            "        return self._export_views_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "export_views", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 954, 'ast_node': <_ast.Return object at 0x233dbd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1790>, 'obj_type': 'return', 'line_index_end': 955}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 993, 
                        "line_index_start": 956, 
                        "lines": [
                            "    def add_view(self, view):\n", 
                            "        self._populate_views()\n", 
                            "        if str(view.survey_id) != str(self.id):\n", 
                            "            raise RuntimeError(\n", 
                            "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
                            "                \"to survey %(other_survey_id)s\" % {\n", 
                            "                    \"view_id\": view.id,\n", 
                            "                    \"survey_id\": self.id,\n", 
                            "                    \"other_survey_id\": view.survey_id\n", 
                            "                }\n", 
                            "            )\n", 
                            "\n", 
                            "        if view.is_current:\n", 
                            "            if self._current_view is None:\n", 
                            "                self._current_view = view\n", 
                            "            elif self._current_view != view:\n", 
                            "                raise CurrentViewAlreadyExistsError(\n", 
                            "                    \"survey=%s already has current_view=%s\" % (\n", 
                            "                        self.id,\n", 
                            "                        self._current_view.id\n", 
                            "                    )\n", 
                            "                )\n", 
                            "        elif view.is_default:\n", 
                            "            if self._default_view is None:\n", 
                            "                self._default_view = view\n", 
                            "            elif self._default_view != view:\n", 
                            "                raise DefaultViewAlreadyExistsError(\n", 
                            "                    \"survey=%s already has default_view=%s\" % (\n", 
                            "                        self.id,\n", 
                            "                        self._default_view.id\n", 
                            "                    )\n", 
                            "                )\n", 
                            "            self._default_view = view\n", 
                            "\n", 
                            "        self._views_list.append(view)\n", 
                            "        self._views_map[view.id] = view\n", 
                            "        view.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2341690>, 'line_index_start': 991, 'value': 'view', 'line_index_end': 991, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1890>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2341890>, 'line_index_start': 992, 'value': 'self', 'line_index_end': 993, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1890>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Set the given selected view ``selected_view`` as the current view and\nreturn the current view.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1011, 
                        "line_index_start": 994, 
                        "lines": [
                            "    def switch_view(self, selected_view):\n", 
                            "        \"\"\"\n", 
                            "        Set the given selected view ``selected_view`` as the current view and\n", 
                            "        return the current view.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        self.current_view.copy(selected_view)\n", 
                            "        self.current_view.selected_view = selected_view\n", 
                            "\n", 
                            "        self.current_view.clear_metadata()\n", 
                            "\n", 
                            "        # Only copy metadata over if the selected view is not the default view\n", 
                            "        # because the default view should not have any rules saved on it.\n", 
                            "        if not selected_view.is_default and selected_view.has_metadata():\n", 
                            "            self.current_view.copy_metadata(selected_view)\n", 
                            "\n", 
                            "        return self.current_view\n", 
                            "\n"
                        ], 
                        "name": "switch_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1010, 'ast_node': <_ast.Return object at 0x23422d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1950>, 'obj_type': 'return', 'line_index_end': 1011}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2341c90>, 'line_index_start': 1001, 'value': 'selected_view', 'line_index_end': 1002, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1950>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1027, 
                        "line_index_start": 1012, 
                        "lines": [
                            "    def add_export_view(self, view):\n", 
                            "        self._populate_export_views()\n", 
                            "        if view.survey_id != self.id:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
                            "                \"to survey %(other_survey_id)s\" % {\n", 
                            "                    \"view_id\": view.id,\n", 
                            "                    \"survey_id\": self.id,\n", 
                            "                    \"other_survey_id\": view.survey_id\n", 
                            "                }\n", 
                            "            )\n", 
                            "\n", 
                            "        self._export_views_list.append(view)\n", 
                            "        self._export_views_map[view.id] = view\n", 
                            "        view.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_export_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2342c50>, 'line_index_start': 1025, 'value': 'view', 'line_index_end': 1025, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1a10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2342e50>, 'line_index_start': 1026, 'value': 'self', 'line_index_end': 1027, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1a10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1032, 
                        "line_index_start": 1028, 
                        "lines": [
                            "    def add_export_job(self, export_job):\n", 
                            "        self._export_job_list.append(export_job)\n", 
                            "        self._export_job_map[export_job.id] = export_job\n", 
                            "        export_job.survey = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_export_job", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2345210>, 'line_index_start': 1030, 'value': 'export_job', 'line_index_end': 1030, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1ad0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2345410>, 'line_index_start': 1031, 'value': 'self', 'line_index_end': 1032, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1ad0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1041, 
                        "line_index_start": 1033, 
                        "lines": [
                            "    def delete_export_job(self, export_id):\n", 
                            "        self._populate_export_jobs()\n", 
                            "        job = self._export_job_map.get(export_id)\n", 
                            "        if job is None:\n", 
                            "            return\n", 
                            "        job.delete()\n", 
                            "        self._export_job_list.remove(job)\n", 
                            "        del self._export_job_map[export_id]\n", 
                            "\n"
                        ], 
                        "name": "delete_export_job", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2345710>, 'target': 'job', 'line_index_start': 1035, 'line_index_end': 1035, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1b90>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return a view given a ``view_id``.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1046, 
                        "line_index_start": 1042, 
                        "lines": [
                            "    def get_view_by_id(self, view_id):\n", 
                            "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
                            "        self._populate_views()\n", 
                            "        return self._views_map.get(view_id)\n", 
                            "\n"
                        ], 
                        "name": "get_view_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1045, 'ast_node': <_ast.Return object at 0x23460d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1c10>, 'obj_type': 'return', 'line_index_end': 1046}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return a view given a ``view_id``.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1051, 
                        "line_index_start": 1047, 
                        "lines": [
                            "    def get_shared_view_by_id(self, view_id):\n", 
                            "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
                            "        self._populate_shared_views()\n", 
                            "        return self._shared_views_map.get(view_id)\n", 
                            "\n"
                        ], 
                        "name": "get_shared_view_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1050, 'ast_node': <_ast.Return object at 0x23464d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1c90>, 'obj_type': 'return', 'line_index_end': 1051}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return an export view given a ``view_id``", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1056, 
                        "line_index_start": 1052, 
                        "lines": [
                            "    def get_export_view_by_id(self, view_id):\n", 
                            "        \"\"\"Return an export view given a ``view_id``\"\"\"\n", 
                            "        self._populate_export_views()\n", 
                            "        return self._export_views_map.get(view_id)\n", 
                            "\n"
                        ], 
                        "name": "get_export_view_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1055, 'ast_node': <_ast.Return object at 0x23468d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1d10>, 'obj_type': 'return', 'line_index_end': 1056}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2346cd0>, 'name': 'property', 'line_index_start': 1057, 'line_index_end': 1058, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1d90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1061, 
                        "line_index_start": 1057, 
                        "lines": [
                            "    @property\n", 
                            "    def current_view(self):\n", 
                            "        self._populate_views()\n", 
                            "        return self._current_view\n", 
                            "\n"
                        ], 
                        "name": "current_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1060, 'ast_node': <_ast.Return object at 0x2346c10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1d90>, 'obj_type': 'return', 'line_index_end': 1061}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2346f90>, 'name': 'property', 'line_index_start': 1062, 'line_index_end': 1063, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1e50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1066, 
                        "line_index_start": 1062, 
                        "lines": [
                            "    @property\n", 
                            "    def default_view(self):\n", 
                            "        self._populate_views()\n", 
                            "        return self._default_view\n", 
                            "\n"
                        ], 
                        "name": "default_view", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1065, 'ast_node': <_ast.Return object at 0x2346ed0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1e50>, 'obj_type': 'return', 'line_index_end': 1066}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1085, 
                        "line_index_start": 1067, 
                        "lines": [
                            "    def get_respondent_trends(\n", 
                            "        self, first_respondent, last_respondent, trend_by,\n", 
                            "        filter_data=None, compare_data=None\n", 
                            "    ):\n", 
                            "        counts = self.request.ansvc.get_survey_respondent_trends(\n", 
                            "            self.id,\n", 
                            "            first_respondent.id,\n", 
                            "            last_respondent.id,\n", 
                            "            trend_by,\n", 
                            "            self.owner.utc_offset,\n", 
                            "            filter_data=filter_data,\n", 
                            "            compare_data=compare_data\n", 
                            "        )\n", 
                            "\n", 
                            "        return {\n", 
                            "            'respondent_count': counts['respondent_count'],\n", 
                            "            'trend_by': trend_by\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "get_respondent_trends", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1081, 'ast_node': <_ast.Return object at 0x23497d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1f10>, 'obj_type': 'return', 'line_index_end': 1085}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2349290>, 'target': 'counts', 'line_index_start': 1071, 'line_index_end': 1080, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1f10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1095, 
                        "line_index_start": 1086, 
                        "lines": [
                            "    def respondent_counts(self, filter_data=None, compare_data=None):\n", 
                            "        counts = self.request.ansvc.get_respondent_counts(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            filter_data,\n", 
                            "            compare_data,\n", 
                            "            self.owner.response_limit\n", 
                            "        )\n", 
                            "        return counts['respondent_count']\n", 
                            "\n"
                        ], 
                        "name": "respondent_counts", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1094, 'ast_node': <_ast.Return object at 0x234a050>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1fd0>, 'obj_type': 'return', 'line_index_end': 1095}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2349bd0>, 'target': 'counts', 'line_index_start': 1087, 'line_index_end': 1093, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a1fd0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1106, 
                        "line_index_start": 1096, 
                        "lines": [
                            "    def num_of_respondents(self, respondent_counts):\n", 
                            "        num_of_respondents = respondent_counts['total_context']\n", 
                            "\n", 
                            "        if (\n", 
                            "            self.owner.has_respondent_limit() and\n", 
                            "            num_of_respondents >= self.owner.response_limit\n", 
                            "        ):\n", 
                            "            num_of_respondents = self.owner.response_limit\n", 
                            "\n", 
                            "        return num_of_respondents\n", 
                            "\n"
                        ], 
                        "name": "num_of_respondents", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234a810>, 'line_index_start': 1105, 'value': 'num_of_respondents', 'line_index_end': 1106, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a50d0>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234a290>, 'target': 'num_of_respondents', 'line_index_start': 1097, 'line_index_end': 1098, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a50d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1118, 
                        "line_index_start": 1107, 
                        "lines": [
                            "    def add_page(self, page):\n", 
                            "        # Remove str() when this gets fixed:\n", 
                            "        # https://monkeys.jira.com/browse/GORILLA-922\n", 
                            "        if str(page.survey_id) != self.id:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to add page which survey ID differs\"\n", 
                            "            )\n", 
                            "        page.survey = self  # backref\n", 
                            "        self._page_list.append(page)\n", 
                            "        self._page_map[page.id] = page\n", 
                            "        self._page_map_by_index[page.index] = page\n", 
                            "\n"
                        ], 
                        "name": "add_page", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234ac90>, 'line_index_start': 1114, 'value': 'self', 'line_index_end': 1114, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5190>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234af10>, 'line_index_start': 1116, 'value': 'page', 'line_index_end': 1116, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5190>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234b150>, 'line_index_start': 1117, 'value': 'page', 'line_index_end': 1118, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5190>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1130, 
                        "line_index_start": 1119, 
                        "lines": [
                            "    def add_question(self, question):\n", 
                            "        # FIXME: Check that the question belongs to the survey (via the page)\n", 
                            "        # when this \"surveyservice\" ticket is fixed:\n", 
                            "        # https://monkeys.jira.com/browse/GORILLA-923\n", 
                            "        if question.page.survey.id != self.id:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to add question which page's ID differs\"\n", 
                            "            )\n", 
                            "        question.survey = self  # backref\n", 
                            "        self._question_list.append(question)\n", 
                            "        self._question_map[question.id] = question\n", 
                            "\n"
                        ], 
                        "name": "add_question", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234b750>, 'line_index_start': 1127, 'value': 'self', 'line_index_end': 1127, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5290>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234b9d0>, 'line_index_start': 1129, 'value': 'question', 'line_index_end': 1130, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5290>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234bf50>, 'name': 'property', 'line_index_start': 1131, 'line_index_end': 1132, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5350>}"
                        ], 
                        "docstring": "Return a list of pages.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1136, 
                        "line_index_start": 1131, 
                        "lines": [
                            "    @property\n", 
                            "    def pages(self):\n", 
                            "        \"\"\"Return a list of pages.\"\"\"\n", 
                            "        self._populate_pages()\n", 
                            "        return self._page_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1135, 'ast_node': <_ast.Return object at 0x234be10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5350>, 'obj_type': 'return', 'line_index_end': 1136}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234d610>, 'name': 'property', 'line_index_start': 1137, 'line_index_end': 1138, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5450>}"
                        ], 
                        "docstring": "Return a list of pages that shown by the show rule.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1145, 
                        "line_index_start": 1137, 
                        "lines": [
                            "    @property\n", 
                            "    def shown_pages(self):\n", 
                            "        \"\"\"Return a list of pages that shown by the show rule.\"\"\"\n", 
                            "        pages = []\n", 
                            "        for page in self.pages:\n", 
                            "            if self.current_view.shows_page(page):\n", 
                            "                pages.append(page)\n", 
                            "        return pages\n", 
                            "\n"
                        ], 
                        "name": "shown_pages", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234d590>, 'line_index_start': 1144, 'value': 'pages', 'line_index_end': 1145, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5450>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234d110>, 'target': 'pages', 'line_index_start': 1140, 'line_index_end': 1140, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5450>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return the first showable (analyzable) page. If no page is\nconsidered showable, return None. The show rule on the current view is\nalso taken into consideration to decide whether or not the page is\nshowable.\n\nIn analyze terms, a page is considered to be showable if the page\ncontains at least one \"real\" question that can be answered by a\nrespondent.\n\nE.g., \"presentation\" questions are not considered to be showable.\nUnless they are random assignment presentation questions.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1167, 
                        "line_index_start": 1146, 
                        "lines": [
                            "    def get_first_showable_page(self):\n", 
                            "        \"\"\"\n", 
                            "        Return the first showable (analyzable) page. If no page is\n", 
                            "        considered showable, return None. The show rule on the current view is\n", 
                            "        also taken into consideration to decide whether or not the page is\n", 
                            "        showable.\n", 
                            "\n", 
                            "        In analyze terms, a page is considered to be showable if the page\n", 
                            "        contains at least one \"real\" question that can be answered by a\n", 
                            "        respondent.\n", 
                            "\n", 
                            "        E.g., \"presentation\" questions are not considered to be showable.\n", 
                            "        Unless they are random assignment presentation questions.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        for page in self.shown_pages:\n", 
                            "            for question in page.questions:\n", 
                            "                if not question.is_presentation():\n", 
                            "                    return page\n", 
                            "                elif question.has_random_assignment:\n", 
                            "                    return page\n", 
                            "\n"
                        ], 
                        "name": "get_first_showable_page", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return the suggested default page index to show to the user.\n\nThe value is either the page's index or the string \"all\" meaning that\nall pages should be shown.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1187, 
                        "line_index_start": 1168, 
                        "lines": [
                            "    def get_suggested_default_page_index(self):\n", 
                            "        \"\"\"\n", 
                            "        Return the suggested default page index to show to the user.\n", 
                            "\n", 
                            "        The value is either the page's index or the string \"all\" meaning that\n", 
                            "        all pages should be shown.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        if len(self.pages) > 1 and len(self.questions) > 30:\n", 
                            "\n", 
                            "            first_showable_page = self.get_first_showable_page()\n", 
                            "\n", 
                            "            if first_showable_page is None:\n", 
                            "                return self.pages[0].index\n", 
                            "\n", 
                            "            return first_showable_page.index\n", 
                            "\n", 
                            "        return \"all\"\n", 
                            "\n", 
                            "\n"
                        ], 
                        "name": "get_suggested_default_page_index", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234f650>, 'line_index_start': 1185, 'value': 'all', 'line_index_end': 1187, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5590>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234f9d0>, 'name': 'property', 'line_index_start': 1188, 'line_index_end': 1189, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a55d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1192, 
                        "line_index_start": 1188, 
                        "lines": [
                            "    @property\n", 
                            "    def questions(self):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._question_list[:]  # return copy!\n", 
                            "    \n"
                        ], 
                        "name": "questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1191, 'ast_node': <_ast.Return object at 0x234f890>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a55d0>, 'obj_type': 'return', 'line_index_end': 1192}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x234fd90>, 'name': 'property', 'line_index_start': 1193, 'line_index_end': 1194, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a56d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1199, 
                        "line_index_start": 1193, 
                        "lines": [
                            "    @property\n", 
                            "    def has_random_assignment(self):\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                return True\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_random_assignment", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x234fd10>, 'line_index_start': 1198, 'value': 'False', 'line_index_end': 1199, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a56d0>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2350310>, 'name': 'property', 'line_index_start': 1200, 'line_index_end': 1201, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5790>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1207, 
                        "line_index_start": 1200, 
                        "lines": [
                            "    @property\n", 
                            "    def random_assignment_questions(self):\n", 
                            "        random_assignment_questions = []\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                random_assignment_questions.append(q)\n", 
                            "        return random_assignment_questions\n", 
                            "\n"
                        ], 
                        "name": "random_assignment_questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2350290>, 'line_index_start': 1206, 'value': 'random_assignment_questions', 'line_index_end': 1207, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5790>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x234fe90>, 'target': 'random_assignment_questions', 'line_index_start': 1202, 'line_index_end': 1202, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5790>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2350810>, 'name': 'property', 'line_index_start': 1208, 'line_index_end': 1209, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5890>}"
                        ], 
                        "docstring": "random assignment presentation questions included because they have\nsummary data", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1216, 
                        "line_index_start": 1208, 
                        "lines": [
                            "    @property\n", 
                            "    def summary_data_questions(self):\n", 
                            "        \"\"\"\n", 
                            "        random assignment presentation questions included because they have\n", 
                            "        summary data\n", 
                            "        \"\"\"\n", 
                            "        return [q for q in self.questions if not q.is_presentation() \\\n", 
                            "            or q.has_random_assignment]\n", 
                            "\n"
                        ], 
                        "name": "summary_data_questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1214, 'ast_node': <_ast.Return object at 0x2350490>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5890>, 'obj_type': 'return', 'line_index_end': 1216}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1220, 
                        "line_index_start": 1217, 
                        "lines": [
                            "    def get_question_by_id(self, question_id):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._question_map.get(question_id)\n", 
                            "\n"
                        ], 
                        "name": "get_question_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1219, 'ast_node': <_ast.Return object at 0x2350a50>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5910>, 'obj_type': 'return', 'line_index_end': 1220}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1224, 
                        "line_index_start": 1221, 
                        "lines": [
                            "    def get_page_by_id(self, page_id):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._page_map.get(page_id)\n", 
                            "\n"
                        ], 
                        "name": "get_page_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1223, 'ast_node': <_ast.Return object at 0x2350dd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a59d0>, 'obj_type': 'return', 'line_index_end': 1224}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2352390>, 'name': 'property', 'line_index_start': 1225, 'line_index_end': 1226, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5a50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1232, 
                        "line_index_start": 1225, 
                        "lines": [
                            "    @property\n", 
                            "    def export_jobs(self):\n", 
                            "        try:\n", 
                            "            self._populate_export_jobs()\n", 
                            "        except ServiceError:\n", 
                            "            return\n", 
                            "        return self._export_job_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "export_jobs", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1231, 'ast_node': <_ast.Return object at 0x2352250>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5a50>, 'obj_type': 'return', 'line_index_end': 1232}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1239, 
                        "line_index_start": 1233, 
                        "lines": [
                            "    def get_exportjob_by_id(self, job_id):\n", 
                            "        try:\n", 
                            "            self._populate_export_jobs()\n", 
                            "        except ServiceError:\n", 
                            "            return\n", 
                            "        return self._export_job_map.get(job_id)\n", 
                            "\n"
                        ], 
                        "name": "get_exportjob_by_id", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1238, 'ast_node': <_ast.Return object at 0x23526d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5b10>, 'obj_type': 'return', 'line_index_end': 1239}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2352ad0>, 'name': 'property', 'line_index_start': 1240, 'line_index_end': 1241, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5b90>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1244, 
                        "line_index_start": 1240, 
                        "lines": [
                            "    @property\n", 
                            "    def theme(self):\n", 
                            "        self._populate_theme()\n", 
                            "        return self._theme\n", 
                            "\n"
                        ], 
                        "name": "theme", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1243, 'ast_node': <_ast.Return object at 0x2352a10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5b90>, 'obj_type': 'return', 'line_index_end': 1244}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2352d90>, 'name': 'property', 'line_index_start': 1245, 'line_index_end': 1246, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5c50>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1249, 
                        "line_index_start": 1245, 
                        "lines": [
                            "    @property\n", 
                            "    def design_settings(self):\n", 
                            "        self._populate_design_settings()\n", 
                            "        return self._design_settings\n", 
                            "\n"
                        ], 
                        "name": "design_settings", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1248, 'ast_node': <_ast.Return object at 0x2352cd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5c50>, 'obj_type': 'return', 'line_index_end': 1249}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1261, 
                        "line_index_start": 1250, 
                        "lines": [
                            "    def _populate_theme(self):\n", 
                            "        if self._populated_theme:\n", 
                            "            return\n", 
                            "\n", 
                            "        self._populate_pages()\n", 
                            "        #self._populate_structure()  # required for the theme ID\n", 
                            "        theme_id = self.design_settings['theme_id']\n", 
                            "        theme_data = self.request.svysvc.get_theme(theme_id)\n", 
                            "        self._populated_theme = True\n", 
                            "\n", 
                            "        self._theme = theme_data\n", 
                            "\n"
                        ], 
                        "name": "_populate_theme", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23530d0>, 'target': 'theme_id', 'line_index_start': 1256, 'line_index_end': 1256, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353290>, 'target': 'theme_data', 'line_index_start': 1257, 'line_index_end': 1257, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353490>, 'line_index_start': 1258, 'value': 'True', 'line_index_end': 1259, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353590>, 'line_index_start': 1260, 'value': 'theme_data', 'line_index_end': 1261, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5d10>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1275, 
                        "line_index_start": 1262, 
                        "lines": [
                            "    def _populate_design_settings(self):\n", 
                            "        if self._populated_design_settings:\n", 
                            "            return\n", 
                            "\n", 
                            "        # only include panel if there is a configured audience\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            include_design_settings=True,\n", 
                            "            include_panel=self.has_configured_audience\n", 
                            "        )\n", 
                            "\n", 
                            "        self._design_settings = survey_data['design_settings']\n", 
                            "\n"
                        ], 
                        "name": "_populate_design_settings", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353850>, 'target': 'survey_data', 'line_index_start': 1267, 'line_index_end': 1273, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5e50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2353c90>, 'line_index_start': 1274, 'line_index_end': 1275, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5e50>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2355110>, 'name': 'property', 'line_index_start': 1276, 'line_index_end': 1277, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5f10>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1280, 
                        "line_index_start": 1276, 
                        "lines": [
                            "    @property\n", 
                            "    def question_logic(self):\n", 
                            "        self._populate_logic()\n", 
                            "        return self._question_logic\n", 
                            "\n"
                        ], 
                        "name": "question_logic", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1279, 'ast_node': <_ast.Return object at 0x2355050>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5f10>, 'obj_type': 'return', 'line_index_end': 1280}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x23553d0>, 'name': 'property', 'line_index_start': 1281, 'line_index_end': 1282, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5fd0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1285, 
                        "line_index_start": 1281, 
                        "lines": [
                            "    @property\n", 
                            "    def page_logic(self):\n", 
                            "        self._populate_logic()\n", 
                            "        return self._page_logic\n", 
                            "\n"
                        ], 
                        "name": "page_logic", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1284, 'ast_node': <_ast.Return object at 0x2355310>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a5fd0>, 'obj_type': 'return', 'line_index_end': 1285}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1300, 
                        "line_index_start": 1286, 
                        "lines": [
                            "    def _populate_logic(self):\n", 
                            "        if self._populated_logic:\n", 
                            "            return\n", 
                            "\n", 
                            "        survey_data = self.request.svysvc.get_survey(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            include_logic=True\n", 
                            "        )\n", 
                            "\n", 
                            "        self._question_logic = survey_data['logic'].get('question_logic')\n", 
                            "        self._page_logic = survey_data['logic'].get('page_logic')\n", 
                            "\n", 
                            "        self._populated_logic = True\n", 
                            "\n"
                        ], 
                        "name": "_populate_logic", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23555d0>, 'target': 'survey_data', 'line_index_start': 1290, 'line_index_end': 1295, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2355950>, 'line_index_start': 1296, 'line_index_end': 1296, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2355bd0>, 'line_index_start': 1297, 'line_index_end': 1298, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2355e50>, 'line_index_start': 1299, 'value': 'True', 'line_index_end': 1300, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a90d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1312, 
                        "line_index_start": 1301, 
                        "lines": [
                            "    def _populate_export_jobs(self):\n", 
                            "        if self._populated_export_jobs:\n", 
                            "            return\n", 
                            "\n", 
                            "        export_jobs_data = self.request.jobsvc.get_export_jobs(self.id)\n", 
                            "        for job_data in export_jobs_data['export_jobs']:\n", 
                            "            export_job = ViewExportJob(self.request)\n", 
                            "            export_job.load(job_data)\n", 
                            "            self.add_export_job(export_job)\n", 
                            "\n", 
                            "        self._populated_export_jobs = True\n", 
                            "\n"
                        ], 
                        "name": "_populate_export_jobs", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2356150>, 'target': 'export_jobs_data', 'line_index_start': 1305, 'line_index_end': 1305, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9210>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2356910>, 'line_index_start': 1311, 'value': 'True', 'line_index_end': 1312, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9210>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1316, 
                        "line_index_start": 1313, 
                        "lines": [
                            "    def get_page_by_index(self, index):\n", 
                            "        self._populate_pages()\n", 
                            "        return self._page_map_by_index.get(index)\n", 
                            "\n"
                        ], 
                        "name": "get_page_by_index", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1315, 'ast_node': <_ast.Return object at 0x2356c10>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a92d0>, 'obj_type': 'return', 'line_index_end': 1316}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2358310>, 'name': 'property', 'line_index_start': 1317, 'line_index_end': 1318, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9350>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1323, 
                        "line_index_start": 1317, 
                        "lines": [
                            "    @property\n", 
                            "    def language(self):\n", 
                            "        self._populate_survey()\n", 
                            "        for lang in self.language_options:\n", 
                            "            if lang['id'] == self._language_id:\n", 
                            "                return lang\n", 
                            "\n"
                        ], 
                        "name": "language", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "returns the english name of the current user's language ", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1328, 
                        "line_index_start": 1324, 
                        "lines": [
                            "    def _get_owner_language(self):\n", 
                            "        ''' returns the english name of the current user's language '''\n", 
                            "        language = get_language_from_country_code(self.owner.language_code)\n", 
                            "        return language.name.lower()\n", 
                            "\n"
                        ], 
                        "name": "_get_owner_language", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1327, 'ast_node': <_ast.Return object at 0x2358650>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a93d0>, 'obj_type': 'return', 'line_index_end': 1328}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2358490>, 'target': 'language', 'line_index_start': 1326, 'line_index_end': 1326, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a93d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "expand_all determines whether we will expand all the possible text items\nor just the essay questions.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1360, 
                        "line_index_start": 1329, 
                        "lines": [
                            "    def _get_ta_question_rollups(self, questions, filter_data=None,\n", 
                            "                                compare_data=None, expand_all=None):\n", 
                            "        '''\n", 
                            "        expand_all determines whether we will expand all the possible text items\n", 
                            "        or just the essay questions.\n", 
                            "\n", 
                            "        '''\n", 
                            "        rollups = {}\n", 
                            "\n", 
                            "        # compared questions are only expanded by the user\n", 
                            "        # or if expand_all == True\n", 
                            "        if (\n", 
                            "            expand_all is None and\n", 
                            "            compare_data is not None and\n", 
                            "            'right' in compare_data\n", 
                            "            ):\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        # prepare a default set of parameters for each question\n", 
                            "        default_params = self._prepare_ta_rollup(filter_data,\n", 
                            "                                                compare_data, expand_all)\n", 
                            "\n", 
                            "        if self.owner.has_respondent_limit():\n", 
                            "            response_limit = self.owner.response_limit\n", 
                            "            default_params['common']['response_limitation'] = response_limit\n", 
                            "\n", 
                            "        for question in questions:\n", 
                            "            rollups[question.id] = question.ta_preget_rollup_by_question(\n", 
                            "                                    default_params, expand_all)\n", 
                            "\n", 
                            "        return rollups\n", 
                            "\n"
                        ], 
                        "name": "_get_ta_question_rollups", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2359910>, 'line_index_start': 1359, 'value': 'rollups', 'line_index_end': 1360, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9490>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2358a90>, 'target': 'rollups', 'line_index_start': 1336, 'line_index_end': 1339, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9490>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2358e90>, 'target': 'default_params', 'line_index_start': 1348, 'line_index_end': 1350, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9490>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "random assignment ta rollups need a different structure", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1390, 
                        "line_index_start": 1361, 
                        "lines": [
                            "    def _get_random_assignment_ta_rollup(self, question, variation_id_list,\n", 
                            "                                        filter_data=None, compare_data=None,\n", 
                            "                                        expand_all=None, option_id=0):\n", 
                            "        \"\"\"\n", 
                            "        random assignment ta rollups need a different structure\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        rollups = {}\n", 
                            "\n", 
                            "        # compared questions are only expanded by the user\n", 
                            "        # or if expand_all == True\n", 
                            "        if (\n", 
                            "            expand_all is None and\n", 
                            "            compare_data is not None and\n", 
                            "            'right' in compare_data\n", 
                            "            ):\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        # prepare a default set of parameters for each question\n", 
                            "        for variation in variation_id_list:\n", 
                            "            default_params = self._prepare_ta_rollup(filter_data, compare_data,\n", 
                            "                expand_all, variation)\n", 
                            "            if self.owner.has_respondent_limit():\n", 
                            "                response_limit = self.owner.response_limit\n", 
                            "                default_params['common']['response_limitation'] = response_limit\n", 
                            "            ta_rollup = question.ta_preget_rollup_by_question(\n", 
                            "                            default_params, expand_all, option_id, variation)\n", 
                            "\n", 
                            "        return ta_rollup\n", 
                            "\n"
                        ], 
                        "name": "_get_random_assignment_ta_rollup", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x235bb90>, 'line_index_start': 1389, 'value': 'ta_rollup', 'line_index_end': 1390, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9590>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2359d50>, 'target': 'rollups', 'line_index_start': 1368, 'line_index_end': 1371, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9590>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "prepares rollups for all questions having text responses", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1421, 
                        "line_index_start": 1391, 
                        "lines": [
                            "    def _prepare_ta_rollup(self, filter_data=None, compare_data=None,\n", 
                            "                            expand_all=None, option_id=0, variation_id=0):\n", 
                            "        \"\"\"\n", 
                            "        prepares rollups for all questions having text responses\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "\n", 
                            "        return {\n", 
                            "            'common': {\n", 
                            "                'option_id': option_id,\n", 
                            "                'variation_id': variation_id,\n", 
                            "                'crosstab_option_id': None,\n", 
                            "                'matrix_crosstab': None,\n", 
                            "                'filter': filter_data,\n", 
                            "                'crosstab': compare_data\n", 
                            "            },\n", 
                            "            'response': {\n", 
                            "                'language': self._get_owner_language(),\n", 
                            "                # should get this from the client as well\n", 
                            "                #'page_size': data['page_size']\n", 
                            "                'page_size': 50,\n", 
                            "                'offset': 0,\n", 
                            "                'include_question_response_count': 1,\n", 
                            "                'include_question_tags': 1,\n", 
                            "                'restrict_by_tag_ids': None,\n", 
                            "            },\n", 
                            "            'analysis': {\n", 
                            "                'hide_ids': 1\n", 
                            "            }\n", 
                            "        }\n", 
                            "\n"
                        ], 
                        "name": "_prepare_ta_rollup", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1398, 'ast_node': <_ast.Return object at 0x235bfd0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9650>, 'obj_type': 'return', 'line_index_end': 1421}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Call object at 0x2363e10>, 'name': 'prof', 'starargs': None, 'kwargs': None, 'line_index_start': 1422, 'args': [], 'line_index_end': 1423, 'keywords': [<_ast.keyword object at 0x2363e90>], 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>}"
                        ], 
                        "docstring": "Return a dictionary of question rollup data for the currently showing\npage. Filters and compare data will be applied if they exist on the\ncurrent view.\n\nA list of Question instances may be passed as ``questions``, then only\nthe rollup data for these questions will be returned.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1561, 
                        "line_index_start": 1422, 
                        "lines": [
                            "    @prof(depth=5)#, include_variables=['questions', 'rollups'])\n", 
                            "    def get_question_rollups(self, questions, filter_data=None,\n", 
                            "                             compare_data=None, expand_all=None,\n", 
                            "                             include_openended=True):\n", 
                            "        \"\"\"\n", 
                            "        Return a dictionary of question rollup data for the currently showing\n", 
                            "        page. Filters and compare data will be applied if they exist on the\n", 
                            "        current view.\n", 
                            "\n", 
                            "        A list of Question instances may be passed as ``questions``, then only\n", 
                            "        the rollup data for these questions will be returned.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        rollups = {}  # returned data\n", 
                            "        input_question_list = []  # input for ansvc\n", 
                            "        ta_question_list = []  # input for tasvc\n", 
                            "        random_assignment_ta_list = []  # input for tasvc\n", 
                            "\n", 
                            "        for question in questions:\n", 
                            "            if question.is_presentation() and \\\n", 
                            "                not question.has_random_assignment:\n", 
                            "                # skip \"presentation\" questions that don't have summary data\n", 
                            "                continue\n", 
                            "\n", 
                            "            # We always return a dict of rollups that have all the requested\n", 
                            "            # questions. If the question doesn't have rollup data, it rollup\n", 
                            "            # value will be None.\n", 
                            "            rollups[question.id] = None\n", 
                            "            input_question_list.append(question)\n", 
                            "            if (\n", 
                            "                include_openended and\n", 
                            "                question.has_text and not\n", 
                            "                question.random_assignment_list\n", 
                            "            ):\n", 
                            "                ta_question_list.append(question)\n", 
                            "\n", 
                            "        if not input_question_list:\n", 
                            "            # If the survey doesn't have any questions, return an empty rollup\n", 
                            "            # dictionary\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        questions_data = []\n", 
                            "\n", 
                            "        for question in input_question_list:\n", 
                            "            q_data = {\n", 
                            "                'question_id': question.id,\n", 
                            "                'question_type': {\n", 
                            "                    'family': question.type,\n", 
                            "                    'subtype': question.subtype\n", 
                            "                },\n", 
                            "            }\n", 
                            "            if question.random_assignment_list:\n", 
                            "                q_data['random_assignment_vars'] = [str(ra['variable_id']) for ra in question.random_assignment_list]\n", 
                            "                if include_openended and question.has_text:\n", 
                            "                    random_assignment_ta_list.append(question)\n", 
                            "            questions_data.append(q_data)\n", 
                            "\n", 
                            "        is_ra_compare = False\n", 
                            "        is_ra_filter = False\n", 
                            "\n", 
                            "        if compare_data is not None:\n", 
                            "            if compare_data['type'] == 'random_assignment':\n", 
                            "                is_ra_compare = True\n", 
                            "        elif filter_data is not None:\n", 
                            "            if filter_data['left'] == 'question.ra':\n", 
                            "                is_ra_filter = True\n", 
                            "\n", 
                            "        if is_ra_compare:\n", 
                            "            response = self.request.ansvc.get_compare_rollups(\n", 
                            "                self.id,\n", 
                            "                self.owner.id,\n", 
                            "                questions_data,\n", 
                            "                filter_data,\n", 
                            "                compare_data,\n", 
                            "                self.owner.response_limit\n", 
                            "            )\n", 
                            "        elif False:  # is_ra_filter:\n", 
                            "            response = self.request.ansvc.get_questions_rollups_v2(\n", 
                            "                self.id,\n", 
                            "                self.owner.id,\n", 
                            "                questions_data,\n", 
                            "                filter_data,\n", 
                            "                compare_data,\n", 
                            "                self.owner.response_limit\n", 
                            "            )\n", 
                            "        else:\n", 
                            "            response = self.request.ansvc.get_questions_rollups(\n", 
                            "                self.id,\n", 
                            "                self.owner.id,\n", 
                            "                questions_data,\n", 
                            "                filter_data,\n", 
                            "                compare_data,\n", 
                            "                self.owner.response_limit\n", 
                            "            )\n", 
                            "\n", 
                            "        # unwrap rollups to the top-level of the dict\n", 
                            "        response = response[self.id]\n", 
                            "\n", 
                            "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
                            "        rollups.update(response)\n", 
                            "\n", 
                            "        ta_rollups = self._get_ta_question_rollups(\n", 
                            "            ta_question_list,\n", 
                            "            filter_data,\n", 
                            "            compare_data,\n", 
                            "            expand_all\n", 
                            "        )\n", 
                            "\n", 
                            "        for question_id in ta_rollups:\n", 
                            "            rollups[question_id]['summary']['ta_data'] = ta_rollups[question_id]\n", 
                            "\n", 
                            "        # Puts the TA data into questions that have random assignment in them\n", 
                            "        for question in random_assignment_ta_list:\n", 
                            "            for variable in question.random_assignment_list:\n", 
                            "                variable_id = str(variable['variable_id'])\n", 
                            "\n", 
                            "                # This is needed because on random_assignment compares, we\n", 
                            "                #   merge the question that is the source of the compare, thus we\n", 
                            "                #   don't seperate it by variation_id\n", 
                            "                if variable_id in rollups[question.id]:\n", 
                            "                    question_variable_rollup = rollups[question.id][variable_id]\n", 
                            "                else:\n", 
                            "                    variable_id == '0'\n", 
                            "                    question_variable_rollup = rollups[question.id]\n", 
                            "\n", 
                            "                if question.other_option:\n", 
                            "                    option_id = str(question.other_option['id'])\n", 
                            "                else:\n", 
                            "                    option_id = '0'\n", 
                            "\n", 
                            "                ta_rollup_data = self._get_random_assignment_ta_rollup(\n", 
                            "                                question, [variable_id],\n", 
                            "                                filter_data, compare_data,\n", 
                            "                                expand_all, option_id)\n", 
                            "\n", 
                            "                question_variable_rollup['summary']['ta_data'] = ta_rollup_data\n", 
                            "        \n", 
                            "        return rollups\n", 
                            "    \n", 
                            "\n"
                        ], 
                        "name": "get_question_rollups", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2363d90>, 'line_index_start': 1559, 'value': 'rollups', 'line_index_end': 1561, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235cc90>, 'target': 'rollups', 'line_index_start': 1435, 'line_index_end': 1435, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235cd50>, 'target': 'input_question_list', 'line_index_start': 1436, 'line_index_end': 1436, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235ce10>, 'target': 'ta_question_list', 'line_index_start': 1437, 'line_index_end': 1437, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235ced0>, 'target': 'random_assignment_ta_list', 'line_index_start': 1438, 'line_index_end': 1439, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235ea50>, 'target': 'questions_data', 'line_index_start': 1463, 'line_index_end': 1464, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235f810>, 'target': 'is_ra_compare', 'line_index_start': 1479, 'value': 'False', 'line_index_end': 1479, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x235f8d0>, 'target': 'is_ra_filter', 'line_index_start': 1480, 'value': 'False', 'line_index_end': 1481, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2361f50>, 'target': 'response', 'line_index_start': 1518, 'line_index_end': 1520, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2362290>, 'target': 'ta_rollups', 'line_index_start': 1523, 'line_index_end': 1529, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a96d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x2365b10>, 'name': 'property', 'line_index_start': 1562, 'line_index_end': 1563, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1573, 
                        "line_index_start": 1562, 
                        "lines": [
                            "    @property\n", 
                            "    def resource_path(self):\n", 
                            "        # taken from smlib.webmodels\n", 
                            "        if self.id is None:\n", 
                            "            raise Exception(\"survey id required\")\n", 
                            "\n", 
                            "        resource_path_prefix = self.request.registry.settings['dotnet.resource_path_prefix']\n", 
                            "        resource_host = self.request.registry.settings['dotnet.resource_host']\n", 
                            "        survey_id_modded = int(self.id) % 30000\n", 
                            "        return \"//%s/%s/%s/%s/\" % (resource_host, resource_path_prefix, survey_id_modded, self.id)\n", 
                            "\n", 
                            "\n"
                        ], 
                        "name": "resource_path", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1571, 'ast_node': <_ast.Return object at 0x23658d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'obj_type': 'return', 'line_index_end': 1573}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365250>, 'target': 'resource_path_prefix', 'line_index_start': 1568, 'line_index_end': 1568, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365490>, 'target': 'resource_host', 'line_index_start': 1569, 'line_index_end': 1569, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23656d0>, 'target': 'survey_id_modded', 'line_index_start': 1570, 'line_index_end': 1570, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a99d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return a dictionary of question rollup data for the currently showing\npage. Filters and compare data will be applied if they exist on the\ncurrent view.\n\nA list of Question instances may be passed as ``questions``, then only\nthe rollup data for these questions will be returned.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1635, 
                        "line_index_start": 1574, 
                        "lines": [
                            "    def get_questions_responses_trends(\n", 
                            "        self, first_respondent, last_respondent, default_trend_by, questions,\n", 
                            "        filter_data=None, compare_data=None\n", 
                            "    ):\n", 
                            "        \"\"\"\n", 
                            "        Return a dictionary of question rollup data for the currently showing\n", 
                            "        page. Filters and compare data will be applied if they exist on the\n", 
                            "        current view.\n", 
                            "\n", 
                            "        A list of Question instances may be passed as ``questions``, then only\n", 
                            "        the rollup data for these questions will be returned.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        rollups = {}  # returned data\n", 
                            "        input_question_list = []  # input for ansvc\n", 
                            "\n", 
                            "        for question in questions:\n", 
                            "            if not question.is_trendable():\n", 
                            "                continue\n", 
                            "            input_question_list.append(question)\n", 
                            "\n", 
                            "            # if the question has no data (no answers), we want to keep track\n", 
                            "            # that the rollup for this question was at least requested\n", 
                            "            rollups[question.id] = None\n", 
                            "\n", 
                            "        if not input_question_list:\n", 
                            "            # If the survey doesn't have any questions, return an empty rollup\n", 
                            "            # dictionary\n", 
                            "            return rollups\n", 
                            "\n", 
                            "        questions_data = []\n", 
                            "        for question in input_question_list:\n", 
                            "            q_data = {\n", 
                            "                'question_id': question.id,\n", 
                            "                'question_type': {\n", 
                            "                    'family': question.type,\n", 
                            "                    'subtype': question.subtype\n", 
                            "                },\n", 
                            "                'trend_data': {\n", 
                            "                    'trend_by': question.trend_by or default_trend_by,\n", 
                            "                    'first_respondent': first_respondent.id,\n", 
                            "                    'last_respondent': last_respondent.id,\n", 
                            "                    'utc_offset': self.owner.utc_offset\n", 
                            "                }\n", 
                            "            }\n", 
                            "\n", 
                            "            questions_data.append(q_data)\n", 
                            "\n", 
                            "        response = self.request.ansvc.get_questions_responses_trends(\n", 
                            "            self.id,\n", 
                            "            self.owner.id,\n", 
                            "            questions_data,\n", 
                            "            filter_data,\n", 
                            "            compare_data\n", 
                            "        )\n", 
                            "        response = response[self.id]  # unwrap rollups to the top-level of the dict\n", 
                            "\n", 
                            "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
                            "        rollups.update(response)\n", 
                            "\n", 
                            "        return rollups\n", 
                            "\n"
                        ], 
                        "name": "get_questions_responses_trends", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x2367850>, 'line_index_start': 1634, 'value': 'rollups', 'line_index_end': 1635, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365e90>, 'target': 'rollups', 'line_index_start': 1587, 'line_index_end': 1587, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2365f50>, 'target': 'input_question_list', 'line_index_start': 1588, 'line_index_end': 1589, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x23666d0>, 'target': 'questions_data', 'line_index_start': 1604, 'line_index_end': 1604, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2367190>, 'target': 'response', 'line_index_start': 1622, 'line_index_end': 1628, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2367550>, 'target': 'response', 'line_index_start': 1629, 'line_index_end': 1631, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9b50>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": "Return the whole survey structure.", 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1690, 
                        "line_index_start": 1636, 
                        "lines": [
                            "    def to_dict(self, include_collectors=False, include_theme=False):\n", 
                            "        \"\"\"\n", 
                            "        Return the whole survey structure.\n", 
                            "\n", 
                            "        \"\"\"\n", 
                            "        survey_data = {\n", 
                            "            'id': self.id,\n", 
                            "            'date_created': self.date_created,\n", 
                            "            'date_modified': self.date_modified,\n", 
                            "            'date_deleted': self.date_deleted,\n", 
                            "            'title': self.title,\n", 
                            "            'nickname': self.nickname,\n", 
                            "            'version': self.version,\n", 
                            "            'num_responses': self.num_responses,\n", 
                            "            'language': self.language,\n", 
                            "            'user_id': self.owner.id,\n", 
                            "            'answers': self._answer_map,\n", 
                            "            'has_panel_page': self.has_panel_page,\n", 
                            "            'question_count': self.question_count,\n", 
                            "            'design_settings': self.design_settings,\n", 
                            "            'theme_settings': self.theme if include_theme else None,\n", 
                            "            'quotas': self.quotas,\n", 
                            "            'page_logic': self.page_logic,\n", 
                            "            'question_logic': self.question_logic,\n", 
                            "            'has_logic': True if (\n", 
                            "                self.page_logic or self.question_logic\n", 
                            "            ) else False,\n", 
                            "            'has_randomization': True if (\n", 
                            "                self.has_page_randomization or\n", 
                            "                self.has_question_randomization\n", 
                            "            ) else False,\n", 
                            "            'mangled_id': self.mangled_id,\n", 
                            "            'preview_link': self.preview_link,\n", 
                            "            'resource_path': self.resource_path\n", 
                            "        }\n", 
                            "\n", 
                            "        if self._populated_pages:\n", 
                            "            survey_data.update({\n", 
                            "                'page_ids': [page.id for page in self.pages],\n", 
                            "                'questions': dict((q.id, q.to_dict()) for q in self.questions),\n", 
                            "                'pages': dict((p.id, p.to_dict()) for p in self.pages)\n", 
                            "            })\n", 
                            "        if self._populated_collectors or include_collectors:\n", 
                            "            survey_data.update({\n", 
                            "                'collectors': [c.to_dict() for c in self.collectors],\n", 
                            "                'has_collector': self.has_collector,\n", 
                            "                'has_email_collector': self.has_email_collector,\n", 
                            "                'has_open_collector': self.has_open_collector,\n", 
                            "                'has_all_closed_collectors': self.has_all_closed_collectors,\n", 
                            "                'has_unconfigured_collector': self.has_unconfigured_collector\n", 
                            "            })\n", 
                            "\n", 
                            "        return survey_data\n", 
                            "\n", 
                            "\n"
                        ], 
                        "name": "to_dict", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x236b550>, 'line_index_start': 1688, 'value': 'survey_data', 'line_index_end': 1690, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9d10>}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2367b10>, 'target': 'survey_data', 'line_index_start': 1641, 'line_index_end': 1671, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27a9d10>, 'targets': []}"
                        ]
                    }
                ], 
                "imports": [], 
                "indent": 0, 
                "is_class": true, 
                "is_function": false, 
                "line_index_end": 1690, 
                "line_index_start": 31, 
                "lines": [
                    "class Survey(object):\n", 
                    "\n", 
                    "    _populated_collectors = False\n", 
                    "    _populated_export_jobs = False\n", 
                    "    _populated_export_views = False\n", 
                    "    _populated_owners = False\n", 
                    "    _populated_theme = False\n", 
                    "    _populated_pages = False\n", 
                    "    _populated_survey = False\n", 
                    "    _populated_user_features = False\n", 
                    "    _populated_views = False\n", 
                    "    _populated_design_settings = False\n", 
                    "    _populated_logic = False\n", 
                    "    _populated_shared_views = False\n", 
                    "\n", 
                    "    _current_view = None\n", 
                    "    _default_view = None\n", 
                    "\n", 
                    "    _date_created = None\n", 
                    "    _date_modified = None\n", 
                    "    _date_deleted = None\n", 
                    "    _title = None\n", 
                    "    version = None\n", 
                    "    nickname = None\n", 
                    "    num_responses = None\n", 
                    "    _language_id = None\n", 
                    "    _theme = None\n", 
                    "\n", 
                    "    language_options = [\n", 
                    "        {\"name\": \"English\", \"id\": 1, \"code\": \"en\"},\n", 
                    "        {\"name\": \"Albanian\", \"id\": 24, \"code\": \"sq\"},\n", 
                    "        {\"name\": \"Arabic\", \"id\": 25, \"code\": \"ar\"},\n", 
                    "        {\"name\": \"Armenian\", \"id\": 26, \"code\": \"hy\"},\n", 
                    "        {\"name\": \"Basque\", \"id\": 27, \"code\": \"eu\"},\n", 
                    "        {\"name\": \"Bengali\", \"id\": 28, \"code\": \"bn\"},\n", 
                    "        {\"name\": \"Bosnian\", \"id\": 29, \"code\": \"bs\"},\n", 
                    "        {\"name\": \"Bulgarian\", \"id\": 30, \"code\": \"bg\"},\n", 
                    "        {\"name\": \"Catalan\", \"id\": 31, \"code\": \"ca\"},\n", 
                    "        {\"name\": \"Chinese (Simplified)\", \"id\": 2, \"code\": \"zh-cn\"},\n", 
                    "        {\"name\": \"Chinese (Traditional)\", \"id\": 3, \"code\": \"zh-tw\"},\n", 
                    "        {\"name\": \"Portuguese (Brazilian)\", \"id\": 17, \"code\": \"pt-br\"},\n", 
                    "        {\"name\": \"Portuguese (Iberian)\", \"id\": 16, \"code\": \"pt\"},\n", 
                    "        {\"name\": \"Croatian\", \"id\": 32, \"code\": \"hr\"},\n", 
                    "        {\"name\": \"Czech\", \"id\": 33, \"code\": \"cs\"},\n", 
                    "        {\"name\": \"Danish\", \"id\": 4, \"code\": \"da\"},\n", 
                    "        {\"name\": \"Dutch\", \"id\": 5, \"code\": \"nl\"},\n", 
                    "        {\"name\": \"Estonian\", \"id\": 34, \"code\": \"et\"},\n", 
                    "        {\"name\": \"Filipino\", \"id\": 35, \"code\": \"tl\"},\n", 
                    "        {\"name\": \"Finnish\", \"id\": 6, \"code\": \"fi\"},\n", 
                    "        {\"name\": \"French\", \"id\": 7, \"code\": \"fr\"},\n", 
                    "        {\"name\": \"Georgian\", \"id\": 36, \"code\": \"ka\"},\n", 
                    "        {\"name\": \"German\", \"id\": 8, \"code\": \"de\"},\n", 
                    "        {\"name\": \"Greek\", \"id\": 9, \"code\": \"el\"},\n", 
                    "        {\"name\": \"Hebrew\", \"id\": 37, \"code\": \"he\"},\n", 
                    "        {\"name\": \"Hindi\", \"id\": 38, \"code\": \"hi\"},\n", 
                    "        {\"name\": \"Hungarian\", \"id\": 39, \"code\": \"hu\"},\n", 
                    "        {\"name\": \"Icelandic\", \"id\": 40, \"code\": \"is\"},\n", 
                    "        {\"name\": \"Indonesian\", \"id\": 41, \"code\": \"id\"},\n", 
                    "        {\"name\": \"Irish\", \"id\": 42, \"code\": \"ga\"},\n", 
                    "        {\"name\": \"Italian\", \"id\": 10, \"code\": \"it\"},\n", 
                    "        {\"name\": \"Japanese\", \"id\": 11, \"code\": \"ja\"},\n", 
                    "        {\"name\": \"Korean\", \"id\": 12, \"code\": \"ko\"},\n", 
                    "        {\"name\": \"Kurdish\", \"id\": 43, \"code\": \"ku\"},\n", 
                    "        {\"name\": \"Latvian\", \"id\": 44, \"code\": \"lv\"},\n", 
                    "        {\"name\": \"Lithuanian\", \"id\": 45, \"code\": \"lt\"},\n", 
                    "        {\"name\": \"Macedonian\", \"id\": 46, \"code\": \"mk\"},\n", 
                    "        {\"name\": \"Malay\", \"id\": 13, \"code\": \"ms\"},\n", 
                    "        {\"name\": \"Malayalam\", \"id\": 47, \"code\": \"ml\"},\n", 
                    "        {\"name\": \"Norwegian\", \"id\": 14, \"code\": \"no\"},\n", 
                    "        {\"name\": \"Persian\", \"id\": 48, \"code\": \"fa\"},\n", 
                    "        {\"name\": \"Polish\", \"id\": 15, \"code\": \"pl\"},\n", 
                    "        {\"name\": \"Punjabi\", \"id\": 49, \"code\": \"pa\"},\n", 
                    "        {\"name\": \"Romanian\", \"id\": 50, \"code\": \"ro\"},\n", 
                    "        {\"name\": \"Russian\", \"id\": 18, \"code\": \"ru\"},\n", 
                    "        {\"name\": \"Serbian\", \"id\": 51, \"code\": \"sr\"},\n", 
                    "        {\"name\": \"Slovak\", \"id\": 52, \"code\": \"sk\"},\n", 
                    "        {\"name\": \"Slovenian\", \"id\": 53, \"code\": \"sl\"},\n", 
                    "        {\"name\": \"Spanish\", \"id\": 19, \"code\": \"es\"},\n", 
                    "        {\"name\": \"Swahili\", \"id\": 54, \"code\": \"sw\"},\n", 
                    "        {\"name\": \"Swedish\", \"id\": 20, \"code\": \"sv\"},\n", 
                    "        {\"name\": \"Tamil\", \"id\": 55, \"code\": \"ta\"},\n", 
                    "        {\"name\": \"Telugu\", \"id\": 56, \"code\": \"te\"},\n", 
                    "        {\"name\": \"Thai\", \"id\": 57, \"code\": \"th\"},\n", 
                    "        {\"name\": \"Turkish\", \"id\": 21, \"code\": \"tr\"},\n", 
                    "        {\"name\": \"Ukrainian\", \"id\": 22, \"code\": \"uk\"},\n", 
                    "        {\"name\": \"Vietnamese\", \"id\": 58, \"code\": \"vi\"},\n", 
                    "        {\"name\": \"Welsh\", \"id\": 59, \"code\": \"cy\"},\n", 
                    "    ]\n", 
                    "\n", 
                    "    def __init__(self, request, survey_id):\n", 
                    "        self.request = request\n", 
                    "        self.id = str(survey_id)\n", 
                    "\n", 
                    "        # Holds the survey's dictionary structure\n", 
                    "        self._structure = {}\n", 
                    "\n", 
                    "        self._user_list = []\n", 
                    "        self._user_map = {}\n", 
                    "\n", 
                    "        self._views_list = []\n", 
                    "        self._views_map = {}\n", 
                    "\n", 
                    "        self._export_views_list = []\n", 
                    "        self._export_views_map = {}\n", 
                    "\n", 
                    "        self._page_list = []\n", 
                    "        self._page_map = {}\n", 
                    "        self._page_map_by_index = {}\n", 
                    "\n", 
                    "        self._question_list = []\n", 
                    "        self._question_map = {}\n", 
                    "\n", 
                    "        self._answer_map = {}\n", 
                    "\n", 
                    "        self._export_job_list = []\n", 
                    "        self._export_job_map = {}\n", 
                    "\n", 
                    "        self._collector_list = []\n", 
                    "        self._has_email_collector = False\n", 
                    "        self._has_collector = False\n", 
                    "        self._has_open_collector = False\n", 
                    "        self._has_unconfigured_collector = False\n", 
                    "        self._has_all_closed_collectors = False\n", 
                    "        self._has_configured_audience = False\n", 
                    "\n", 
                    "        self._question_logic = None\n", 
                    "        self._page_logic = None\n", 
                    "\n", 
                    "    def __repr__(self):\n", 
                    "        return \"<%(class)s=%(id)s at 0x%(mem)x>\" % {\n", 
                    "            \"class\": self.__class__.__name__,\n", 
                    "            \"id\": self.id,\n", 
                    "            \"mem\": id(self)\n", 
                    "        }\n", 
                    "\n", 
                    "    def _load_survey(self, survey_data):\n", 
                    "        self._date_created = survey_data['date_created']\n", 
                    "        self._date_modified = survey_data['date_modified']\n", 
                    "        self._date_deleted = survey_data['date_deleted']\n", 
                    "        self._title = survey_data['title']['text']\n", 
                    "        self._nickname = survey_data.get('nickname')\n", 
                    "        self._language_id = survey_data['language_id']\n", 
                    "        self.version = survey_data['version']\n", 
                    "        self.num_responses = survey_data['num_responses']\n", 
                    "        self.question_count = survey_data['question_count']\n", 
                    "        self.has_panel_page = survey_data.get('has_panel_page', False)\n", 
                    "        self._quotas = survey_data.get('quota')\n", 
                    "        self.has_page_randomization = survey_data['page_randomization']['enabled']\n", 
                    "        self._answer_map = {}\n", 
                    "    \n", 
                    "    def _set_benchmarkable_flags(self, survey_data):\n", 
                    "        if self.owner.has_benchmarking_feature():\n", 
                    "            # get benchmarkable data. we'll do this per page to minimize the bmsvc calls\n", 
                    "            for page in survey_data['pages']:\n", 
                    "                # get a dict of logical id by question id\n", 
                    "                #   we'll use this dict to update the page data\n", 
                    "                # get the list of logical ids\n", 
                    "                #   we'll use this list to get the benchmarkable info\n", 
                    "                qb_questions = {}\n", 
                    "                logical_ids = []\n", 
                    "                for question in page['questions']:\n", 
                    "                    if question['question_bank']['is_banked']:\n", 
                    "                        qb_questions[question['question_id']] = question['question_bank']['logical_bank_id']\n", 
                    "                        logical_ids.append(qb_questions[question['question_id']])\n", 
                    "                benchmarkable_ids = self.request.bmsvc.is_benchmarkable(logical_ids)\n", 
                    "                # now update the questions\n", 
                    "                for question in page['questions']:\n", 
                    "                    question['is_benchmarkable'] = True if question['question_id'] in qb_questions and\\\n", 
                    "                                                           qb_questions[question['question_id']] in benchmarkable_ids\\\n", 
                    "                                                        else False\n", 
                    "        else:\n", 
                    "            # set all questions as not benchmarkable\n", 
                    "            for page in survey_data['pages']:\n", 
                    "                for question in page['questions']:\n", 
                    "                    question['is_benchmarkable'] = False\n", 
                    "\n", 
                    "    #@prof(depth=1, include_variables=['survey_data'])\n", 
                    "    def _populate_pages(self):\n", 
                    "        if self._populated_pages:\n", 
                    "            return\n", 
                    "\n", 
                    "        # FIXME: Maybe create Option objects as well?\n", 
                    "        # only include panel if there has been a configured audience\n", 
                    "        survey_data = self.request.svysvc.get_survey(\n", 
                    "            self.id,\n", 
                    "            self.owner.id,\n", 
                    "            load_pages=True,\n", 
                    "            include_panel=self.has_configured_audience\n", 
                    "        )\n", 
                    "        \n", 
                    "        # if the user has benchmarking available, we will set the benchmarking flag for each question as appropriate\n", 
                    "        self._set_benchmarkable_flags(survey_data)\n", 
                    "        \n", 
                    "        if not self._populated_survey:\n", 
                    "            self._populated_survey = True\n", 
                    "            self._load_survey(survey_data)\n", 
                    "\n", 
                    "        self._populated_pages = True\n", 
                    "        self._load_pages(survey_data['pages'])\n", 
                    "\n", 
                    "    def _populate_survey(self):\n", 
                    "        if self._populated_survey:\n", 
                    "            return\n", 
                    "\n", 
                    "        # FIXME: Maybe create Option objects as well?\n", 
                    "        # only include panel if there has abeen a configured audience\n", 
                    "        survey_data = self.request.svysvc.get_survey(\n", 
                    "            self.id,\n", 
                    "            self.owner.id,\n", 
                    "            load_pages=False,\n", 
                    "            include_panel=self.has_configured_audience\n", 
                    "        )\n", 
                    "\n", 
                    "        if 'quota' in survey_data:\n", 
                    "            survey_data['quota'] = self.request.ansvc.quota_list(\n", 
                    "                survey_data['survey_id']\n", 
                    "            )['quota']\n", 
                    "\n", 
                    "        self._populated_survey = True\n", 
                    "        self._load_survey(survey_data)\n", 
                    "\n", 
                    "    @property\n", 
                    "    def title(self):\n", 
                    "        self._populate_survey()\n", 
                    "        return self._title\n", 
                    "\n", 
                    "    #dates appear to be stored in seconds\n", 
                    "    @property\n", 
                    "    def date_deleted(self):\n", 
                    "        self._populate_survey()\n", 
                    "        if self._date_deleted:\n", 
                    "            return self._date_deleted * 1000\n", 
                    "\n", 
                    "    @property\n", 
                    "    def date_created(self):\n", 
                    "        self._populate_survey()\n", 
                    "        return self._date_created * 1000\n", 
                    "\n", 
                    "    @property\n", 
                    "    def date_modified(self):\n", 
                    "        self._populate_survey()\n", 
                    "        if self._date_modified:\n", 
                    "            return self._date_modified * 1000\n", 
                    "\n", 
                    "    @property\n", 
                    "    def quotas(self):\n", 
                    "        self._populate_survey()\n", 
                    "        return self._quotas\n", 
                    "\n", 
                    "    @property\n", 
                    "    def nickname(self):\n", 
                    "        self._populate_survey()\n", 
                    "        if self._nickname:\n", 
                    "            return self._nickname\n", 
                    "\n", 
                    "        return self._title\n", 
                    "\n", 
                    "    @property\n", 
                    "    def mangled_id(self):\n", 
                    "        if self.id is None:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
                    "            )\n", 
                    "        return encrypt_mangled(\"SurveyID=%s&\" % self.id)\n", 
                    "\n", 
                    "    @property\n", 
                    "    def preview_link(self):\n", 
                    "        query_string = {\n", 
                    "            's': self.id,\n", 
                    "            'mode': 3\n", 
                    "        }\n", 
                    "        query_string = urlencode(query_string)\n", 
                    "        query_string = urlencode({\n", 
                    "            'sm': encrypt_mangled(query_string),\n", 
                    "            'PREVIEW_MODE': 'DO_NOT_USE_THIS_LINK_FOR_COLLECTION',\n", 
                    "        })\n", 
                    "\n", 
                    "        return \"%(path)s?%(qs)s\" % {\n", 
                    "            \"path\": '/s.aspx',\n", 
                    "            \"qs\": query_string\n", 
                    "        }\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_question_randomization(self):\n", 
                    "        for page in self.pages:\n", 
                    "            if page.has_question_randomization:\n", 
                    "                return True\n", 
                    "\n", 
                    "        return False\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_random_assignment(self):\n", 
                    "        for q in self.questions:\n", 
                    "            if q.has_random_assignment:\n", 
                    "                return True\n", 
                    "        return False\n", 
                    "\n", 
                    "    def _populate_collectors(self):\n", 
                    "        if self._populated_collectors:\n", 
                    "            return\n", 
                    "\n", 
                    "        collector_list = self.request.collectorsvc.get_collector_list(\n", 
                    "            int(self.owner.id),\n", 
                    "            int(self.id)\n", 
                    "        )\n", 
                    "\n", 
                    "        self._has_all_closed_collectors = True\n", 
                    "        for collector_data in collector_list:\n", 
                    "            collector = Collector(self.request)\n", 
                    "            collector.load(collector_data)\n", 
                    "            if collector.is_email:\n", 
                    "                self._has_email_collector = True\n", 
                    "\n", 
                    "            if collector.is_open or collector.is_clearing_responses:\n", 
                    "                self._has_open_collector = True\n", 
                    "\n", 
                    "            if collector.is_new:\n", 
                    "                self._has_unconfigured_collector = True\n", 
                    "            elif collector.is_audience:\n", 
                    "                self._has_configured_audience = True\n", 
                    "\n", 
                    "            if not (collector.is_closed or collector.is_archived):\n", 
                    "                self._has_all_closed_collectors = False\n", 
                    "\n", 
                    "            self._collector_list.append(collector)\n", 
                    "\n", 
                    "        if self._collector_list:\n", 
                    "            self._has_collector = True\n", 
                    "        else:\n", 
                    "            self._has_all_closed_collectors = False\n", 
                    "\n", 
                    "        self._populated_collectors = True\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_email_collector(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._has_email_collector\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_open_collector(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._has_open_collector\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_all_closed_collectors(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._has_all_closed_collectors\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_unconfigured_collector(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._has_unconfigured_collector\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_configured_audience(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._has_configured_audience\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_collector(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._has_collector\n", 
                    "\n", 
                    "    @property\n", 
                    "    def collectors(self):\n", 
                    "        self._populate_collectors()\n", 
                    "        return self._collector_list\n", 
                    "\n", 
                    "    def _populate_owners(self):\n", 
                    "        \"\"\"\n", 
                    "        Get the owners (user IDs) for this survey.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        if self._populated_owners:\n", 
                    "            return\n", 
                    "\n", 
                    "        try:\n", 
                    "            access_list = self.request.svysvc.survey_access_list(self.id)\n", 
                    "            self._populated_owners = True\n", 
                    "        except ServiceResponseError:\n", 
                    "            # Survey might not be found\n", 
                    "            return\n", 
                    "\n", 
                    "        for user_id in access_list['users']:\n", 
                    "            user = User(self.request, user_id)\n", 
                    "            self._user_list.append(user)\n", 
                    "            self._user_map[user.id] = user\n", 
                    "            user.survey = self  # backref\n", 
                    "\n", 
                    "    def is_owner(self, user):\n", 
                    "        self._populate_owners()\n", 
                    "        return str(user.id) in self._user_map\n", 
                    "\n", 
                    "    @property\n", 
                    "    def owner(self):\n", 
                    "        return self.owners[0]\n", 
                    "\n", 
                    "    @property\n", 
                    "    def owners(self):\n", 
                    "        self._populate_owners()\n", 
                    "        return self._user_list\n", 
                    "\n", 
                    "    def _load_pages(self, pages):\n", 
                    "        question_position = 1\n", 
                    "        page_position = 1\n", 
                    "        for page_data in pages:\n", 
                    "            page = Page(self.request)\n", 
                    "            page.load(page_data)\n", 
                    "            page.position = page_position\n", 
                    "            page_position += 1\n", 
                    "            self.add_page(page)\n", 
                    "            for question in page.questions:\n", 
                    "                # Question numbers aren't stored with presentation context\n", 
                    "                # in the DB, we have to correct for this.\n", 
                    "                question.position = question_position\n", 
                    "                if not question.is_presentation() or \\\n", 
                    "                    question.has_random_assignment:\n", 
                    "                        question_position += 1\n", 
                    "                self.add_question(question)\n", 
                    "                self._load_answers(question.answers)\n", 
                    "\n", 
                    "    def _load_answers(self, answers):\n", 
                    "        for dim, dim_answers in iteritems(answers):\n", 
                    "            for answer in dim_answers:\n", 
                    "                self._answer_map[answer['answer_id']] = answer\n", 
                    "                answer['id'] = str(answer['answer_id'])\n", 
                    "                del answer['answer_id']\n", 
                    "                if 'items' in answer:\n", 
                    "                    for menu_item in answer['items']:\n", 
                    "                        self._answer_map[menu_item['answer_id']] = menu_item\n", 
                    "                        menu_item['id'] = str(menu_item['answer_id'])\n", 
                    "                        del menu_item['answer_id']\n", 
                    "\n", 
                    "    def _populate_views(self):\n", 
                    "        \"\"\"\n", 
                    "        Get the views for this survey.\n", 
                    "\n", 
                    "        If no view exists, create default and current views.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        if self._populated_views:\n", 
                    "            return\n", 
                    "\n", 
                    "        # Can't get data if ID is None\n", 
                    "        if self.id is None:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to get views: survey has no ID.\"\n", 
                    "            )\n", 
                    "\n", 
                    "        data = self.request.ansvc.list_views(self.id)\n", 
                    "        views = data['view_schemas']\n", 
                    "\n", 
                    "        # WARNING: This must be set before ``add_view()`` and\n", 
                    "        # ``get_views_by_id()`` gets called again lower down\n", 
                    "        self._populated_views = True\n", 
                    "\n", 
                    "        # Build view objects\n", 
                    "        self._views_list = []\n", 
                    "        self._views_map = {}\n", 
                    "        for view_id, view_data in iteritems(views):\n", 
                    "            view_type = view_data['view_type']\n", 
                    "            view_data = json.loads(view_data['view_schema'])\n", 
                    "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                    "            # None when created the first time as we don't yet have an ID from\n", 
                    "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                    "            # the view_id inside the view_schema is still None and wasn't\n", 
                    "            # assigned with its ID. For this to be fixed, we should not store\n", 
                    "            # the view_id within the view_schema. Or we can augment the dict\n", 
                    "            # such as here. This should be fixed when the view schema will be\n", 
                    "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                    "            view_data['view_id'] = view_id\n", 
                    "            view_data['type'] = view_type\n", 
                    "\n", 
                    "            view = View(self.request, self)\n", 
                    "            view.load(view_data)\n", 
                    "            try:\n", 
                    "                self.add_view(view)\n", 
                    "            except (\n", 
                    "                CurrentViewAlreadyExistsError,\n", 
                    "                DefaultViewAlreadyExistsError\n", 
                    "            ):\n", 
                    "                log.warning(\n", 
                    "                    \"Name=DuplicateCurrentDefaultView\",\n", 
                    "                    \"ViewData=%s\" % view_data\n", 
                    "                )\n", 
                    "                # Force deletion because we normally can't delete a default or\n", 
                    "                # current view.\n", 
                    "                view.survey = self  # backref required for deletion\n", 
                    "                view.delete(force=True)\n", 
                    "\n", 
                    "        # Call .fix() only after all views have been loaded into the survey\n", 
                    "        # otherwise a view that depends on a not-yet-loaded view will\n", 
                    "        # provoke a traceback (GORILLA-2216).\n", 
                    "        for view in self.views:\n", 
                    "            if view.fix():\n", 
                    "                view.save()\n", 
                    "\n", 
                    "        if self.default_view is None:\n", 
                    "            log.info(\"Creating default view for survey=%s\", self.id)\n", 
                    "            default_view = self._create_default_view()\n", 
                    "            default_view.save()\n", 
                    "            self.add_view(default_view)\n", 
                    "\n", 
                    "        if self.current_view is None:\n", 
                    "            log.info(\"Creating current view for survey=%s\", self.id)\n", 
                    "            current_view = self._create_current_view()\n", 
                    "            current_view.selected_view = self.default_view\n", 
                    "            current_view.save()\n", 
                    "            self.add_view(current_view)\n", 
                    "\n", 
                    "        if self.quotas and self.default_view.quota_view_metadata is None:\n", 
                    "            log.info(\"Creating quota view for survey=%s\", self.id)\n", 
                    "            self._create_quota_views()\n", 
                    "        \n", 
                    "        if self.has_random_assignment and self.default_view.random_assignment_view_metadata is None:\n", 
                    "            log.info(\"Creating random assignment view for survey=%s\", self.id)\n", 
                    "            self._create_random_assignment_views()\n", 
                    "         \n", 
                    "        if self.has_configured_audience and \\\n", 
                    "            self.default_view.audience_view_metadata is None:\n", 
                    "                self._create_audience_view()\n", 
                    "\n", 
                    "        # Set the selected view on the current view.\n", 
                    "        selected_view_id = self.current_view.selected_view_id\n", 
                    "        selected_view = self.get_view_by_id(selected_view_id)\n", 
                    "        if selected_view is None:\n", 
                    "            # Make sure the current view has its selected view pointing to an\n", 
                    "            # existing view. If the selected view doesn't exist (see\n", 
                    "            # GORILLA-1198 for details), re-point the current view's selected\n", 
                    "            # view to be the default view.\n", 
                    "            log.warning(\n", 
                    "                \"Name=SelectedViewNotFound\",\n", 
                    "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
                    "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
                    "            )\n", 
                    "            selected_view = self.current_view.selected_view = self.default_view\n", 
                    "            self.current_view.save()\n", 
                    "        assert selected_view.id == self.current_view.selected_view_id\n", 
                    "        self.current_view.selected_view = selected_view\n", 
                    "\n", 
                    "    def _populate_shared_views(self):\n", 
                    "        \"\"\"\n", 
                    "        Get the views for this survey.\n", 
                    "\n", 
                    "        If no view exists, create default and current views.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        if self._populated_shared_views:\n", 
                    "            return\n", 
                    "\n", 
                    "        # Can't get data if ID is None\n", 
                    "        if self.id is None:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to get shared views: survey has no ID.\"\n", 
                    "            )\n", 
                    "\n", 
                    "        data = self.request.ansvc.list_shared_views(self.id)\n", 
                    "        views = data['view_schemas']\n", 
                    "\n", 
                    "        # WARNING: This must be set before ``add_view()`` and\n", 
                    "        # ``get_views_by_id()`` gets called again lower down\n", 
                    "        self._populated_shared_views = True\n", 
                    "\n", 
                    "        # Build view objects\n", 
                    "        self._shared_views_list = []\n", 
                    "        self._shared_views_map = {}\n", 
                    "\n", 
                    "        for view_id, view_data in iteritems(views):\n", 
                    "            view_type = view_data['view_type']\n", 
                    "            view_data = json.loads(view_data['view_schema'])\n", 
                    "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                    "            # None when created the first time as we don't yet have an ID from\n", 
                    "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                    "            # the view_id inside the view_schema is still None and wasn't\n", 
                    "            # assigned with its ID. For this to be fixed, we should not store\n", 
                    "            # the view_id within the view_schema. Or we can augment the dict\n", 
                    "            # such as here. This should be fixed when the view schema will be\n", 
                    "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                    "            view_data['view_id'] = view_id\n", 
                    "            view_data['type'] = view_type\n", 
                    "\n", 
                    "            view = View(self.request, self)\n", 
                    "            view.load(view_data)\n", 
                    "            view.survey = self\n", 
                    "\n", 
                    "            try:\n", 
                    "                self._shared_views_list.append(view)\n", 
                    "                self._shared_views_map[view_id] = view\n", 
                    "            except (\n", 
                    "                CurrentViewAlreadyExistsError,\n", 
                    "                DefaultViewAlreadyExistsError\n", 
                    "            ):\n", 
                    "                log.warning(\n", 
                    "                    \"Name=DuplicateCurrentDefaultView\",\n", 
                    "                    \"ViewData=%s\" % view_data\n", 
                    "                )\n", 
                    "                # Force deletion because we normally can't delete a default or\n", 
                    "                # current view.\n", 
                    "                view.delete(force=True)\n", 
                    "\n", 
                    "        # Call .fix() only after all views have been loaded into the survey\n", 
                    "        # otherwise a view that depends on a not-yet-loaded view will\n", 
                    "        # provoke a traceback (GORILLA-2216).\n", 
                    "        for view in self.views:\n", 
                    "            if view.fix():\n", 
                    "                view.save()\n", 
                    "\n", 
                    "        if self.default_view is None:\n", 
                    "            log.info(\"Creating default view for survey=%s\" % self.id)\n", 
                    "            default_view = self._create_default_view()\n", 
                    "            default_view.save()\n", 
                    "            self.add_view(default_view)\n", 
                    "\n", 
                    "        if self.current_view is None:\n", 
                    "            log.info(\"Creating current view for survey=%s\" % self.id)\n", 
                    "            current_view = self._create_current_view()\n", 
                    "            current_view.selected_view = self.default_view\n", 
                    "            current_view.save()\n", 
                    "            self.add_view(current_view)\n", 
                    "\n", 
                    "        # Set the selected view on the current view.\n", 
                    "        selected_view_id = self.current_view.selected_view_id\n", 
                    "        selected_view = self.get_view_by_id(selected_view_id)\n", 
                    "        if selected_view is None:\n", 
                    "            # Make sure the current view has its selected view pointing to an\n", 
                    "            # existing view. If the selected view doesn't exist (see\n", 
                    "            # GORILLA-1198 for details), re-point the current view's selected\n", 
                    "            # view to be the default view.\n", 
                    "            log.warning(\n", 
                    "                \"Name=SelectedViewNotFound\",\n", 
                    "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
                    "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
                    "            )\n", 
                    "            selected_view = self.current_view.selected_view = self.default_view\n", 
                    "            self.current_view.save()\n", 
                    "        assert selected_view.id == self.current_view.selected_view_id\n", 
                    "        self.current_view.selected_view = selected_view\n", 
                    "\n", 
                    "    def _populate_export_views(self):\n", 
                    "        if self._populated_export_views:\n", 
                    "            return\n", 
                    "\n", 
                    "        # Can't get data if ID is None\n", 
                    "        if self.id is None:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to get views: survey has no ID.\"\n", 
                    "            )\n", 
                    "\n", 
                    "        data = self.request.ansvc.list_export_views(self.id)\n", 
                    "        views = data['view_schemas']\n", 
                    "\n", 
                    "        # WARNING: This must be set before ``add_view()`` and\n", 
                    "        # ``get_views_by_id()`` gets called again lower down\n", 
                    "        self._populated_export_views = True\n", 
                    "\n", 
                    "        # Build view objects\n", 
                    "        self._export_views_list = []\n", 
                    "        self._export_views_map = {}\n", 
                    "        for view_id, view_data in iteritems(views):\n", 
                    "            view_type = view_data['view_type']\n", 
                    "            view_data = json.loads(view_data['view_schema'])\n", 
                    "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
                    "            # None when created the first time as we don't yet have an ID from\n", 
                    "            # the DB, when the view schema is pulled from the DB the next time,\n", 
                    "            # the view_id inside the view_schema is still None and wasn't\n", 
                    "            # assigned with its ID. For this to be fixed, we should not store\n", 
                    "            # the view_id within the view_schema. Or we can augment the dict\n", 
                    "            # such as here. This should be fixed when the view schema will be\n", 
                    "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
                    "            view_data['view_id'] = view_id\n", 
                    "            view_data['type'] = view_type\n", 
                    "\n", 
                    "            view = View(self.request, self)\n", 
                    "            view.load(view_data)\n", 
                    "            self.add_export_view(view)\n", 
                    "\n", 
                    "            if view.fix():\n", 
                    "                view.save()\n", 
                    "\n", 
                    "    def _create_current_view(self):\n", 
                    "        view = View(self.request, self)\n", 
                    "        view_data = view.to_dict()\n", 
                    "        view_data['is_current'] = True\n", 
                    "        view_data['is_default'] = False\n", 
                    "        view_data['name'] = \"Current View\"\n", 
                    "        view_data['survey_id'] = self.id\n", 
                    "        view_data['type'] = 'standard'\n", 
                    "        view.load(view_data)\n", 
                    "        self.add_view(view)\n", 
                    "        return view\n", 
                    "\n", 
                    "    def _create_default_view(self):\n", 
                    "        view = View(self.request, self)\n", 
                    "        view_data = view.to_dict()\n", 
                    "        view_data['is_current'] = False\n", 
                    "        view_data['is_default'] = True\n", 
                    "        view_data['name'] = View.DEFAULT_VIEW_NAME\n", 
                    "        view_data['survey_id'] = self.id\n", 
                    "        view_data['type'] = 'standard'\n", 
                    "        view_data['page'] = 'all'\n", 
                    "\n", 
                    "        view.load(view_data)\n", 
                    "        self.add_view(view)\n", 
                    "        return view\n", 
                    "\n", 
                    "    def _create_quota_views(self):\n", 
                    "        if 'equations' not in self.quotas:\n", 
                    "            # A user can create part of a quota and not implement it so the\n", 
                    "            # survey has quotas but no equations. If so, we don't want to create\n", 
                    "            # the quota views until they finish creating the quota.\n", 
                    "            return\n", 
                    "        quota_question_map = self._translate_quotas()\n", 
                    "        for quota_group in self.quotas['equations']:\n", 
                    "            # each quota group has it's own view, and each quota groupd can have\n", 
                    "            # multiple questions and/or question answer option. The metadata,\n", 
                    "            # qna rules and completeness rule, are added to their quota view.\n", 
                    "            quota_view = View(self.request, self)\n", 
                    "            quota_view.survey = self\n", 
                    "            quota_view_data = quota_view.to_dict()\n", 
                    "            quota_view_data['name'] = quota_group['display_label']\n", 
                    "            quota_view_data['is_current'] = False\n", 
                    "            quota_view_data['is_default'] = False\n", 
                    "            quota_view_data['survey_id'] = self.id\n", 
                    "            quota_view_data['type'] = 'standard'\n", 
                    "            quota_view.load(quota_view_data)\n", 
                    "            quota_view.save()\n", 
                    "            self.add_view(quota_view)\n", 
                    "            for rules in quota_group['variables']:\n", 
                    "                # iterating through the the equation groups and using our map\n", 
                    "                # to get the question ids\n", 
                    "                question_option_group = rules['quota_question_option_group_id']\n", 
                    "                question_info = quota_question_map[question_option_group]\n", 
                    "                metadata_item = {\n", 
                    "                    'key': 'rule_filter_qna',\n", 
                    "                    'metadata_id': None,\n", 
                    "                    'option_id': None,\n", 
                    "                    'question_id': None,\n", 
                    "                    'view_id': quota_view.id,\n", 
                    "                    'value': {\n", 
                    "                        'rule_type': 'qna',\n", 
                    "                        'selected': True,\n", 
                    "                        'secondary_id': str(question_info['question_id']),\n", 
                    "                        'rows': {}\n", 
                    "                    }\n", 
                    "                }\n", 
                    "                for row in question_info['question_option_ids']:\n", 
                    "                    #this is for the answer options that are selected\n", 
                    "                    metadata_item['value'][\"rows\"][str(row)] = True\n", 
                    "                quota_view.add_or_update_metadata_item(metadata_item)\n", 
                    "            # completeness rule so we don't include overquota and disqualified\n", 
                    "            completeness_metadata = {\n", 
                    "                'key': 'rule_filter_completeness',\n", 
                    "                'value': {\n", 
                    "                    'rule_type': 'completeness',\n", 
                    "                    'rows': {\n", 
                    "                        'completely': True\n", 
                    "                    },\n", 
                    "                    'selected': True\n", 
                    "                },\n", 
                    "                'view_id': quota_view.id,\n", 
                    "                'metadata_id': None,\n", 
                    "                'option_id': None,\n", 
                    "                'question_id': None\n", 
                    "            }\n", 
                    "            quota_view.add_or_update_metadata_item(completeness_metadata)\n", 
                    "            quota_view.save_metadata()\n", 
                    "        self._add_autocreated_view_metadata(\"quota_views_created\")\n", 
                    "\n", 
                    "    def _create_random_assignment_views(self):\n", 
                    "        for ra in self.random_assignment_questions:\n", 
                    "            # each quota group has it's own view, and each quota groupd can have\n", 
                    "            # multiple questions and/or question answer option. The metadata,\n", 
                    "            # qna rules and completeness rule, are added to their quota view.\n", 
                    "\n", 
                    "            # We currently don't allow for compares on open_ended questions\n", 
                    "            if ra.type == 'open_ended' or \\\n", 
                    "               ra.type == 'demographic' or \\\n", 
                    "               ra.type == 'datetime':\n", 
                    "                continue\n", 
                    "            random_assignment_view = View(self.request, self)\n", 
                    "            random_assignment_view.survey = self\n", 
                    "            random_assignment_view_data = random_assignment_view.to_dict()\n", 
                    "\n", 
                    "            if len(ra.heading) > 0: \n", 
                    "                random_assignment_view_data['name'] = ra.heading\n", 
                    "            else:\n", 
                    "                random_assignment_view_data['name'] = \"Q%s A/B Test\" % (ra.position)\n", 
                    "\n", 
                    "            random_assignment_view_data['is_current'] = False\n", 
                    "            random_assignment_view_data['is_default'] = False\n", 
                    "            random_assignment_view_data['survey_id'] = self.id\n", 
                    "            random_assignment_view_data['type'] = 'standard'\n", 
                    "            random_assignment_view.load(random_assignment_view_data)\n", 
                    "            random_assignment_view.save()\n", 
                    "            self.add_view(random_assignment_view)\n", 
                    "            rows = {}\n", 
                    "            for rule in ra.random_assignment_list:\n", 
                    "                variable_id = rule['variable_id']\n", 
                    "                rows[str(variable_id)] = True\n", 
                    "                \n", 
                    "            # iterating through the the equation groups and using our map\n", 
                    "            # to get the question ids\n", 
                    "            metadata_item = {\n", 
                    "                'key': 'rule_compare_random_assignment',\n", 
                    "                'metadata_id': None,\n", 
                    "                'option_id': None,\n", 
                    "                'question_id': None,\n", 
                    "                'request': self.request,\n", 
                    "                'value': {\n", 
                    "                    'custom_heading': None,#rule['heading'],\n", 
                    "                    'family': ra.type,\n", 
                    "                    'subtype': ra.subtype,\n", 
                    "                    'question_id': int(ra.id),\n", 
                    "                    'rule_type': 'random_assignment',\n", 
                    "                    'selected': True,\n", 
                    "                    'rows': rows,\n", 
                    "                    'is_compare_rule': True,\n", 
                    "                },\n", 
                    "                'view_id': random_assignment_view.id,\n", 
                    "                'view': random_assignment_view,\n", 
                    "            }\n", 
                    "            random_assignment_view.add_or_update_metadata_item(metadata_item)\n", 
                    "            random_assignment_view.save_metadata()\n", 
                    "        self._add_autocreated_view_metadata(\"random_assignment_views_created\")\n", 
                    "\n", 
                    "    def _translate_quotas(self):\n", 
                    "        # must only be called on surveys with quotas!!\n", 
                    "        # AnSvc seperates the question option ids and question ids from the\n", 
                    "        # equations. We need to create a map for the equation group ids\n", 
                    "        # to the question ids, and selected question option ids.\n", 
                    "        quotas_questions = self.quotas['questions']\n", 
                    "        quota_question_map = {}\n", 
                    "        for question in quotas_questions:\n", 
                    "            question_id = question['question_id']\n", 
                    "            for options in question['option_groups']:\n", 
                    "                option_group_id = options['quota_question_option_group_id']\n", 
                    "                quota_question_map[option_group_id] = {\n", 
                    "                    'question_id': question_id,\n", 
                    "                    'question_option_ids': []\n", 
                    "                }\n", 
                    "                quota_question = quota_question_map[option_group_id]\n", 
                    "                question_option_ids = quota_question['question_option_ids']\n", 
                    "                for option in options['options']:\n", 
                    "                    question_option_ids.append(option['question_option_id'])\n", 
                    "        return quota_question_map\n", 
                    "\n", 
                    "    def _create_audience_view(self):\n", 
                    "        # creating audience view\n", 
                    "        log.info(\"Creating audience view for survey=%s\", self.id)\n", 
                    "        audience_view = View(self.request, self)\n", 
                    "        audience_view.survey = self\n", 
                    "        audience_view_data = audience_view.to_dict()\n", 
                    "        audience_view_data['name'] = \"View complete responses only\"\n", 
                    "        audience_view_data['is_current'] = False\n", 
                    "        audience_view_data['is_default'] = False\n", 
                    "        audience_view_data['survey_id'] = self.id\n", 
                    "        audience_view_data['type'] = 'standard'\n", 
                    "        audience_view.load(audience_view_data)\n", 
                    "        audience_view.save()\n", 
                    "        self.add_view(audience_view)\n", 
                    "\n", 
                    "        #add completeness rule to audience view\n", 
                    "        completeness_metadata = {\n", 
                    "            'key': 'rule_filter_completeness',\n", 
                    "            'value': {\n", 
                    "                'rule_type': 'completeness',\n", 
                    "                'rows': {\n", 
                    "                    'completely': True\n", 
                    "                },\n", 
                    "                'selected': True\n", 
                    "            },\n", 
                    "            'view_id': audience_view.id,\n", 
                    "            'metadata_id': None,\n", 
                    "            'option_id': None,\n", 
                    "            'question_id': None\n", 
                    "        }\n", 
                    "        audience_view.add_or_update_metadata_item(completeness_metadata)\n", 
                    "        audience_view.save_metadata()\n", 
                    "\n", 
                    "        # testing to see how many people buying audiences have unsaved\n", 
                    "        # rules to see if this step is even necessary\n", 
                    "        # check if current view is dirty\n", 
                    "\n", 
                    "        if not self.current_view.is_dirty:\n", 
                    "            if self.owner.package_type != 'BASIC':\n", 
                    "                log.info(\"switching from current view to audience view \"\n", 
                    "                \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                    "                self.switch_view(audience_view)\n", 
                    "            else:\n", 
                    "                log.info(\"cannot switch to audience view views because user \"\n", 
                    "                \"is basic for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                    "        else:\n", 
                    "            log.info(\"has unsaved rules, cannot switch to audience view \"\n", 
                    "                 \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
                    "\n", 
                    "        self._add_autocreated_view_metadata(\"audience_views_created\")\n", 
                    "\n", 
                    "    def _add_autocreated_view_metadata(self, key):\n", 
                    "        # set metadata on the default view so we only create autocreated views\n", 
                    "        # once\n", 
                    "        autocreated_metadata = {\n", 
                    "            'key': key,\n", 
                    "            'value': {\n", 
                    "                'created': True\n", 
                    "            },\n", 
                    "            'view_id': self.default_view.id,\n", 
                    "            'metadata_id': None,\n", 
                    "            'option_id': None,\n", 
                    "            'question_id': None\n", 
                    "        }\n", 
                    "        self.default_view.add_or_update_metadata_item(autocreated_metadata)\n", 
                    "        self.default_view.save_metadata()\n", 
                    "\n", 
                    "    @property\n", 
                    "    def views(self):\n", 
                    "        \"\"\"Return a list of views.\"\"\"\n", 
                    "        self._populate_views()\n", 
                    "        return self._views_list[:]  # return copy!\n", 
                    "\n", 
                    "    @property\n", 
                    "    def export_views(self):\n", 
                    "        \"\"\"Return a list of views.\"\"\"\n", 
                    "        self._populate_export_views()\n", 
                    "        return self._export_views_list[:]  # return copy!\n", 
                    "\n", 
                    "    def add_view(self, view):\n", 
                    "        self._populate_views()\n", 
                    "        if str(view.survey_id) != str(self.id):\n", 
                    "            raise RuntimeError(\n", 
                    "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
                    "                \"to survey %(other_survey_id)s\" % {\n", 
                    "                    \"view_id\": view.id,\n", 
                    "                    \"survey_id\": self.id,\n", 
                    "                    \"other_survey_id\": view.survey_id\n", 
                    "                }\n", 
                    "            )\n", 
                    "\n", 
                    "        if view.is_current:\n", 
                    "            if self._current_view is None:\n", 
                    "                self._current_view = view\n", 
                    "            elif self._current_view != view:\n", 
                    "                raise CurrentViewAlreadyExistsError(\n", 
                    "                    \"survey=%s already has current_view=%s\" % (\n", 
                    "                        self.id,\n", 
                    "                        self._current_view.id\n", 
                    "                    )\n", 
                    "                )\n", 
                    "        elif view.is_default:\n", 
                    "            if self._default_view is None:\n", 
                    "                self._default_view = view\n", 
                    "            elif self._default_view != view:\n", 
                    "                raise DefaultViewAlreadyExistsError(\n", 
                    "                    \"survey=%s already has default_view=%s\" % (\n", 
                    "                        self.id,\n", 
                    "                        self._default_view.id\n", 
                    "                    )\n", 
                    "                )\n", 
                    "            self._default_view = view\n", 
                    "\n", 
                    "        self._views_list.append(view)\n", 
                    "        self._views_map[view.id] = view\n", 
                    "        view.survey = self  # backref\n", 
                    "\n", 
                    "    def switch_view(self, selected_view):\n", 
                    "        \"\"\"\n", 
                    "        Set the given selected view ``selected_view`` as the current view and\n", 
                    "        return the current view.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        self.current_view.copy(selected_view)\n", 
                    "        self.current_view.selected_view = selected_view\n", 
                    "\n", 
                    "        self.current_view.clear_metadata()\n", 
                    "\n", 
                    "        # Only copy metadata over if the selected view is not the default view\n", 
                    "        # because the default view should not have any rules saved on it.\n", 
                    "        if not selected_view.is_default and selected_view.has_metadata():\n", 
                    "            self.current_view.copy_metadata(selected_view)\n", 
                    "\n", 
                    "        return self.current_view\n", 
                    "\n", 
                    "    def add_export_view(self, view):\n", 
                    "        self._populate_export_views()\n", 
                    "        if view.survey_id != self.id:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
                    "                \"to survey %(other_survey_id)s\" % {\n", 
                    "                    \"view_id\": view.id,\n", 
                    "                    \"survey_id\": self.id,\n", 
                    "                    \"other_survey_id\": view.survey_id\n", 
                    "                }\n", 
                    "            )\n", 
                    "\n", 
                    "        self._export_views_list.append(view)\n", 
                    "        self._export_views_map[view.id] = view\n", 
                    "        view.survey = self  # backref\n", 
                    "\n", 
                    "    def add_export_job(self, export_job):\n", 
                    "        self._export_job_list.append(export_job)\n", 
                    "        self._export_job_map[export_job.id] = export_job\n", 
                    "        export_job.survey = self  # backref\n", 
                    "\n", 
                    "    def delete_export_job(self, export_id):\n", 
                    "        self._populate_export_jobs()\n", 
                    "        job = self._export_job_map.get(export_id)\n", 
                    "        if job is None:\n", 
                    "            return\n", 
                    "        job.delete()\n", 
                    "        self._export_job_list.remove(job)\n", 
                    "        del self._export_job_map[export_id]\n", 
                    "\n", 
                    "    def get_view_by_id(self, view_id):\n", 
                    "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
                    "        self._populate_views()\n", 
                    "        return self._views_map.get(view_id)\n", 
                    "\n", 
                    "    def get_shared_view_by_id(self, view_id):\n", 
                    "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
                    "        self._populate_shared_views()\n", 
                    "        return self._shared_views_map.get(view_id)\n", 
                    "\n", 
                    "    def get_export_view_by_id(self, view_id):\n", 
                    "        \"\"\"Return an export view given a ``view_id``\"\"\"\n", 
                    "        self._populate_export_views()\n", 
                    "        return self._export_views_map.get(view_id)\n", 
                    "\n", 
                    "    @property\n", 
                    "    def current_view(self):\n", 
                    "        self._populate_views()\n", 
                    "        return self._current_view\n", 
                    "\n", 
                    "    @property\n", 
                    "    def default_view(self):\n", 
                    "        self._populate_views()\n", 
                    "        return self._default_view\n", 
                    "\n", 
                    "    def get_respondent_trends(\n", 
                    "        self, first_respondent, last_respondent, trend_by,\n", 
                    "        filter_data=None, compare_data=None\n", 
                    "    ):\n", 
                    "        counts = self.request.ansvc.get_survey_respondent_trends(\n", 
                    "            self.id,\n", 
                    "            first_respondent.id,\n", 
                    "            last_respondent.id,\n", 
                    "            trend_by,\n", 
                    "            self.owner.utc_offset,\n", 
                    "            filter_data=filter_data,\n", 
                    "            compare_data=compare_data\n", 
                    "        )\n", 
                    "\n", 
                    "        return {\n", 
                    "            'respondent_count': counts['respondent_count'],\n", 
                    "            'trend_by': trend_by\n", 
                    "        }\n", 
                    "\n", 
                    "    def respondent_counts(self, filter_data=None, compare_data=None):\n", 
                    "        counts = self.request.ansvc.get_respondent_counts(\n", 
                    "            self.id,\n", 
                    "            self.owner.id,\n", 
                    "            filter_data,\n", 
                    "            compare_data,\n", 
                    "            self.owner.response_limit\n", 
                    "        )\n", 
                    "        return counts['respondent_count']\n", 
                    "\n", 
                    "    def num_of_respondents(self, respondent_counts):\n", 
                    "        num_of_respondents = respondent_counts['total_context']\n", 
                    "\n", 
                    "        if (\n", 
                    "            self.owner.has_respondent_limit() and\n", 
                    "            num_of_respondents >= self.owner.response_limit\n", 
                    "        ):\n", 
                    "            num_of_respondents = self.owner.response_limit\n", 
                    "\n", 
                    "        return num_of_respondents\n", 
                    "\n", 
                    "    def add_page(self, page):\n", 
                    "        # Remove str() when this gets fixed:\n", 
                    "        # https://monkeys.jira.com/browse/GORILLA-922\n", 
                    "        if str(page.survey_id) != self.id:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to add page which survey ID differs\"\n", 
                    "            )\n", 
                    "        page.survey = self  # backref\n", 
                    "        self._page_list.append(page)\n", 
                    "        self._page_map[page.id] = page\n", 
                    "        self._page_map_by_index[page.index] = page\n", 
                    "\n", 
                    "    def add_question(self, question):\n", 
                    "        # FIXME: Check that the question belongs to the survey (via the page)\n", 
                    "        # when this \"surveyservice\" ticket is fixed:\n", 
                    "        # https://monkeys.jira.com/browse/GORILLA-923\n", 
                    "        if question.page.survey.id != self.id:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to add question which page's ID differs\"\n", 
                    "            )\n", 
                    "        question.survey = self  # backref\n", 
                    "        self._question_list.append(question)\n", 
                    "        self._question_map[question.id] = question\n", 
                    "\n", 
                    "    @property\n", 
                    "    def pages(self):\n", 
                    "        \"\"\"Return a list of pages.\"\"\"\n", 
                    "        self._populate_pages()\n", 
                    "        return self._page_list[:]  # return copy!\n", 
                    "\n", 
                    "    @property\n", 
                    "    def shown_pages(self):\n", 
                    "        \"\"\"Return a list of pages that shown by the show rule.\"\"\"\n", 
                    "        pages = []\n", 
                    "        for page in self.pages:\n", 
                    "            if self.current_view.shows_page(page):\n", 
                    "                pages.append(page)\n", 
                    "        return pages\n", 
                    "\n", 
                    "    def get_first_showable_page(self):\n", 
                    "        \"\"\"\n", 
                    "        Return the first showable (analyzable) page. If no page is\n", 
                    "        considered showable, return None. The show rule on the current view is\n", 
                    "        also taken into consideration to decide whether or not the page is\n", 
                    "        showable.\n", 
                    "\n", 
                    "        In analyze terms, a page is considered to be showable if the page\n", 
                    "        contains at least one \"real\" question that can be answered by a\n", 
                    "        respondent.\n", 
                    "\n", 
                    "        E.g., \"presentation\" questions are not considered to be showable.\n", 
                    "        Unless they are random assignment presentation questions.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        for page in self.shown_pages:\n", 
                    "            for question in page.questions:\n", 
                    "                if not question.is_presentation():\n", 
                    "                    return page\n", 
                    "                elif question.has_random_assignment:\n", 
                    "                    return page\n", 
                    "\n", 
                    "    def get_suggested_default_page_index(self):\n", 
                    "        \"\"\"\n", 
                    "        Return the suggested default page index to show to the user.\n", 
                    "\n", 
                    "        The value is either the page's index or the string \"all\" meaning that\n", 
                    "        all pages should be shown.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        if len(self.pages) > 1 and len(self.questions) > 30:\n", 
                    "\n", 
                    "            first_showable_page = self.get_first_showable_page()\n", 
                    "\n", 
                    "            if first_showable_page is None:\n", 
                    "                return self.pages[0].index\n", 
                    "\n", 
                    "            return first_showable_page.index\n", 
                    "\n", 
                    "        return \"all\"\n", 
                    "\n", 
                    "\n", 
                    "    @property\n", 
                    "    def questions(self):\n", 
                    "        self._populate_pages()\n", 
                    "        return self._question_list[:]  # return copy!\n", 
                    "    \n", 
                    "    @property\n", 
                    "    def has_random_assignment(self):\n", 
                    "        for q in self.questions:\n", 
                    "            if q.has_random_assignment:\n", 
                    "                return True\n", 
                    "        return False\n", 
                    "\n", 
                    "    @property\n", 
                    "    def random_assignment_questions(self):\n", 
                    "        random_assignment_questions = []\n", 
                    "        for q in self.questions:\n", 
                    "            if q.has_random_assignment:\n", 
                    "                random_assignment_questions.append(q)\n", 
                    "        return random_assignment_questions\n", 
                    "\n", 
                    "    @property\n", 
                    "    def summary_data_questions(self):\n", 
                    "        \"\"\"\n", 
                    "        random assignment presentation questions included because they have\n", 
                    "        summary data\n", 
                    "        \"\"\"\n", 
                    "        return [q for q in self.questions if not q.is_presentation() \\\n", 
                    "            or q.has_random_assignment]\n", 
                    "\n", 
                    "    def get_question_by_id(self, question_id):\n", 
                    "        self._populate_pages()\n", 
                    "        return self._question_map.get(question_id)\n", 
                    "\n", 
                    "    def get_page_by_id(self, page_id):\n", 
                    "        self._populate_pages()\n", 
                    "        return self._page_map.get(page_id)\n", 
                    "\n", 
                    "    @property\n", 
                    "    def export_jobs(self):\n", 
                    "        try:\n", 
                    "            self._populate_export_jobs()\n", 
                    "        except ServiceError:\n", 
                    "            return\n", 
                    "        return self._export_job_list[:]  # return copy!\n", 
                    "\n", 
                    "    def get_exportjob_by_id(self, job_id):\n", 
                    "        try:\n", 
                    "            self._populate_export_jobs()\n", 
                    "        except ServiceError:\n", 
                    "            return\n", 
                    "        return self._export_job_map.get(job_id)\n", 
                    "\n", 
                    "    @property\n", 
                    "    def theme(self):\n", 
                    "        self._populate_theme()\n", 
                    "        return self._theme\n", 
                    "\n", 
                    "    @property\n", 
                    "    def design_settings(self):\n", 
                    "        self._populate_design_settings()\n", 
                    "        return self._design_settings\n", 
                    "\n", 
                    "    def _populate_theme(self):\n", 
                    "        if self._populated_theme:\n", 
                    "            return\n", 
                    "\n", 
                    "        self._populate_pages()\n", 
                    "        #self._populate_structure()  # required for the theme ID\n", 
                    "        theme_id = self.design_settings['theme_id']\n", 
                    "        theme_data = self.request.svysvc.get_theme(theme_id)\n", 
                    "        self._populated_theme = True\n", 
                    "\n", 
                    "        self._theme = theme_data\n", 
                    "\n", 
                    "    def _populate_design_settings(self):\n", 
                    "        if self._populated_design_settings:\n", 
                    "            return\n", 
                    "\n", 
                    "        # only include panel if there is a configured audience\n", 
                    "        survey_data = self.request.svysvc.get_survey(\n", 
                    "            self.id,\n", 
                    "            self.owner.id,\n", 
                    "            include_design_settings=True,\n", 
                    "            include_panel=self.has_configured_audience\n", 
                    "        )\n", 
                    "\n", 
                    "        self._design_settings = survey_data['design_settings']\n", 
                    "\n", 
                    "    @property\n", 
                    "    def question_logic(self):\n", 
                    "        self._populate_logic()\n", 
                    "        return self._question_logic\n", 
                    "\n", 
                    "    @property\n", 
                    "    def page_logic(self):\n", 
                    "        self._populate_logic()\n", 
                    "        return self._page_logic\n", 
                    "\n", 
                    "    def _populate_logic(self):\n", 
                    "        if self._populated_logic:\n", 
                    "            return\n", 
                    "\n", 
                    "        survey_data = self.request.svysvc.get_survey(\n", 
                    "            self.id,\n", 
                    "            self.owner.id,\n", 
                    "            include_logic=True\n", 
                    "        )\n", 
                    "\n", 
                    "        self._question_logic = survey_data['logic'].get('question_logic')\n", 
                    "        self._page_logic = survey_data['logic'].get('page_logic')\n", 
                    "\n", 
                    "        self._populated_logic = True\n", 
                    "\n", 
                    "    def _populate_export_jobs(self):\n", 
                    "        if self._populated_export_jobs:\n", 
                    "            return\n", 
                    "\n", 
                    "        export_jobs_data = self.request.jobsvc.get_export_jobs(self.id)\n", 
                    "        for job_data in export_jobs_data['export_jobs']:\n", 
                    "            export_job = ViewExportJob(self.request)\n", 
                    "            export_job.load(job_data)\n", 
                    "            self.add_export_job(export_job)\n", 
                    "\n", 
                    "        self._populated_export_jobs = True\n", 
                    "\n", 
                    "    def get_page_by_index(self, index):\n", 
                    "        self._populate_pages()\n", 
                    "        return self._page_map_by_index.get(index)\n", 
                    "\n", 
                    "    @property\n", 
                    "    def language(self):\n", 
                    "        self._populate_survey()\n", 
                    "        for lang in self.language_options:\n", 
                    "            if lang['id'] == self._language_id:\n", 
                    "                return lang\n", 
                    "\n", 
                    "    def _get_owner_language(self):\n", 
                    "        ''' returns the english name of the current user's language '''\n", 
                    "        language = get_language_from_country_code(self.owner.language_code)\n", 
                    "        return language.name.lower()\n", 
                    "\n", 
                    "    def _get_ta_question_rollups(self, questions, filter_data=None,\n", 
                    "                                compare_data=None, expand_all=None):\n", 
                    "        '''\n", 
                    "        expand_all determines whether we will expand all the possible text items\n", 
                    "        or just the essay questions.\n", 
                    "\n", 
                    "        '''\n", 
                    "        rollups = {}\n", 
                    "\n", 
                    "        # compared questions are only expanded by the user\n", 
                    "        # or if expand_all == True\n", 
                    "        if (\n", 
                    "            expand_all is None and\n", 
                    "            compare_data is not None and\n", 
                    "            'right' in compare_data\n", 
                    "            ):\n", 
                    "            return rollups\n", 
                    "\n", 
                    "        # prepare a default set of parameters for each question\n", 
                    "        default_params = self._prepare_ta_rollup(filter_data,\n", 
                    "                                                compare_data, expand_all)\n", 
                    "\n", 
                    "        if self.owner.has_respondent_limit():\n", 
                    "            response_limit = self.owner.response_limit\n", 
                    "            default_params['common']['response_limitation'] = response_limit\n", 
                    "\n", 
                    "        for question in questions:\n", 
                    "            rollups[question.id] = question.ta_preget_rollup_by_question(\n", 
                    "                                    default_params, expand_all)\n", 
                    "\n", 
                    "        return rollups\n", 
                    "\n", 
                    "    def _get_random_assignment_ta_rollup(self, question, variation_id_list,\n", 
                    "                                        filter_data=None, compare_data=None,\n", 
                    "                                        expand_all=None, option_id=0):\n", 
                    "        \"\"\"\n", 
                    "        random assignment ta rollups need a different structure\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        rollups = {}\n", 
                    "\n", 
                    "        # compared questions are only expanded by the user\n", 
                    "        # or if expand_all == True\n", 
                    "        if (\n", 
                    "            expand_all is None and\n", 
                    "            compare_data is not None and\n", 
                    "            'right' in compare_data\n", 
                    "            ):\n", 
                    "            return rollups\n", 
                    "\n", 
                    "        # prepare a default set of parameters for each question\n", 
                    "        for variation in variation_id_list:\n", 
                    "            default_params = self._prepare_ta_rollup(filter_data, compare_data,\n", 
                    "                expand_all, variation)\n", 
                    "            if self.owner.has_respondent_limit():\n", 
                    "                response_limit = self.owner.response_limit\n", 
                    "                default_params['common']['response_limitation'] = response_limit\n", 
                    "            ta_rollup = question.ta_preget_rollup_by_question(\n", 
                    "                            default_params, expand_all, option_id, variation)\n", 
                    "\n", 
                    "        return ta_rollup\n", 
                    "\n", 
                    "    def _prepare_ta_rollup(self, filter_data=None, compare_data=None,\n", 
                    "                            expand_all=None, option_id=0, variation_id=0):\n", 
                    "        \"\"\"\n", 
                    "        prepares rollups for all questions having text responses\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "\n", 
                    "        return {\n", 
                    "            'common': {\n", 
                    "                'option_id': option_id,\n", 
                    "                'variation_id': variation_id,\n", 
                    "                'crosstab_option_id': None,\n", 
                    "                'matrix_crosstab': None,\n", 
                    "                'filter': filter_data,\n", 
                    "                'crosstab': compare_data\n", 
                    "            },\n", 
                    "            'response': {\n", 
                    "                'language': self._get_owner_language(),\n", 
                    "                # should get this from the client as well\n", 
                    "                #'page_size': data['page_size']\n", 
                    "                'page_size': 50,\n", 
                    "                'offset': 0,\n", 
                    "                'include_question_response_count': 1,\n", 
                    "                'include_question_tags': 1,\n", 
                    "                'restrict_by_tag_ids': None,\n", 
                    "            },\n", 
                    "            'analysis': {\n", 
                    "                'hide_ids': 1\n", 
                    "            }\n", 
                    "        }\n", 
                    "\n", 
                    "    @prof(depth=5)#, include_variables=['questions', 'rollups'])\n", 
                    "    def get_question_rollups(self, questions, filter_data=None,\n", 
                    "                             compare_data=None, expand_all=None,\n", 
                    "                             include_openended=True):\n", 
                    "        \"\"\"\n", 
                    "        Return a dictionary of question rollup data for the currently showing\n", 
                    "        page. Filters and compare data will be applied if they exist on the\n", 
                    "        current view.\n", 
                    "\n", 
                    "        A list of Question instances may be passed as ``questions``, then only\n", 
                    "        the rollup data for these questions will be returned.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        rollups = {}  # returned data\n", 
                    "        input_question_list = []  # input for ansvc\n", 
                    "        ta_question_list = []  # input for tasvc\n", 
                    "        random_assignment_ta_list = []  # input for tasvc\n", 
                    "\n", 
                    "        for question in questions:\n", 
                    "            if question.is_presentation() and \\\n", 
                    "                not question.has_random_assignment:\n", 
                    "                # skip \"presentation\" questions that don't have summary data\n", 
                    "                continue\n", 
                    "\n", 
                    "            # We always return a dict of rollups that have all the requested\n", 
                    "            # questions. If the question doesn't have rollup data, it rollup\n", 
                    "            # value will be None.\n", 
                    "            rollups[question.id] = None\n", 
                    "            input_question_list.append(question)\n", 
                    "            if (\n", 
                    "                include_openended and\n", 
                    "                question.has_text and not\n", 
                    "                question.random_assignment_list\n", 
                    "            ):\n", 
                    "                ta_question_list.append(question)\n", 
                    "\n", 
                    "        if not input_question_list:\n", 
                    "            # If the survey doesn't have any questions, return an empty rollup\n", 
                    "            # dictionary\n", 
                    "            return rollups\n", 
                    "\n", 
                    "        questions_data = []\n", 
                    "\n", 
                    "        for question in input_question_list:\n", 
                    "            q_data = {\n", 
                    "                'question_id': question.id,\n", 
                    "                'question_type': {\n", 
                    "                    'family': question.type,\n", 
                    "                    'subtype': question.subtype\n", 
                    "                },\n", 
                    "            }\n", 
                    "            if question.random_assignment_list:\n", 
                    "                q_data['random_assignment_vars'] = [str(ra['variable_id']) for ra in question.random_assignment_list]\n", 
                    "                if include_openended and question.has_text:\n", 
                    "                    random_assignment_ta_list.append(question)\n", 
                    "            questions_data.append(q_data)\n", 
                    "\n", 
                    "        is_ra_compare = False\n", 
                    "        is_ra_filter = False\n", 
                    "\n", 
                    "        if compare_data is not None:\n", 
                    "            if compare_data['type'] == 'random_assignment':\n", 
                    "                is_ra_compare = True\n", 
                    "        elif filter_data is not None:\n", 
                    "            if filter_data['left'] == 'question.ra':\n", 
                    "                is_ra_filter = True\n", 
                    "\n", 
                    "        if is_ra_compare:\n", 
                    "            response = self.request.ansvc.get_compare_rollups(\n", 
                    "                self.id,\n", 
                    "                self.owner.id,\n", 
                    "                questions_data,\n", 
                    "                filter_data,\n", 
                    "                compare_data,\n", 
                    "                self.owner.response_limit\n", 
                    "            )\n", 
                    "        elif False:  # is_ra_filter:\n", 
                    "            response = self.request.ansvc.get_questions_rollups_v2(\n", 
                    "                self.id,\n", 
                    "                self.owner.id,\n", 
                    "                questions_data,\n", 
                    "                filter_data,\n", 
                    "                compare_data,\n", 
                    "                self.owner.response_limit\n", 
                    "            )\n", 
                    "        else:\n", 
                    "            response = self.request.ansvc.get_questions_rollups(\n", 
                    "                self.id,\n", 
                    "                self.owner.id,\n", 
                    "                questions_data,\n", 
                    "                filter_data,\n", 
                    "                compare_data,\n", 
                    "                self.owner.response_limit\n", 
                    "            )\n", 
                    "\n", 
                    "        # unwrap rollups to the top-level of the dict\n", 
                    "        response = response[self.id]\n", 
                    "\n", 
                    "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
                    "        rollups.update(response)\n", 
                    "\n", 
                    "        ta_rollups = self._get_ta_question_rollups(\n", 
                    "            ta_question_list,\n", 
                    "            filter_data,\n", 
                    "            compare_data,\n", 
                    "            expand_all\n", 
                    "        )\n", 
                    "\n", 
                    "        for question_id in ta_rollups:\n", 
                    "            rollups[question_id]['summary']['ta_data'] = ta_rollups[question_id]\n", 
                    "\n", 
                    "        # Puts the TA data into questions that have random assignment in them\n", 
                    "        for question in random_assignment_ta_list:\n", 
                    "            for variable in question.random_assignment_list:\n", 
                    "                variable_id = str(variable['variable_id'])\n", 
                    "\n", 
                    "                # This is needed because on random_assignment compares, we\n", 
                    "                #   merge the question that is the source of the compare, thus we\n", 
                    "                #   don't seperate it by variation_id\n", 
                    "                if variable_id in rollups[question.id]:\n", 
                    "                    question_variable_rollup = rollups[question.id][variable_id]\n", 
                    "                else:\n", 
                    "                    variable_id == '0'\n", 
                    "                    question_variable_rollup = rollups[question.id]\n", 
                    "\n", 
                    "                if question.other_option:\n", 
                    "                    option_id = str(question.other_option['id'])\n", 
                    "                else:\n", 
                    "                    option_id = '0'\n", 
                    "\n", 
                    "                ta_rollup_data = self._get_random_assignment_ta_rollup(\n", 
                    "                                question, [variable_id],\n", 
                    "                                filter_data, compare_data,\n", 
                    "                                expand_all, option_id)\n", 
                    "\n", 
                    "                question_variable_rollup['summary']['ta_data'] = ta_rollup_data\n", 
                    "        \n", 
                    "        return rollups\n", 
                    "    \n", 
                    "\n", 
                    "    @property\n", 
                    "    def resource_path(self):\n", 
                    "        # taken from smlib.webmodels\n", 
                    "        if self.id is None:\n", 
                    "            raise Exception(\"survey id required\")\n", 
                    "\n", 
                    "        resource_path_prefix = self.request.registry.settings['dotnet.resource_path_prefix']\n", 
                    "        resource_host = self.request.registry.settings['dotnet.resource_host']\n", 
                    "        survey_id_modded = int(self.id) % 30000\n", 
                    "        return \"//%s/%s/%s/%s/\" % (resource_host, resource_path_prefix, survey_id_modded, self.id)\n", 
                    "\n", 
                    "\n", 
                    "    def get_questions_responses_trends(\n", 
                    "        self, first_respondent, last_respondent, default_trend_by, questions,\n", 
                    "        filter_data=None, compare_data=None\n", 
                    "    ):\n", 
                    "        \"\"\"\n", 
                    "        Return a dictionary of question rollup data for the currently showing\n", 
                    "        page. Filters and compare data will be applied if they exist on the\n", 
                    "        current view.\n", 
                    "\n", 
                    "        A list of Question instances may be passed as ``questions``, then only\n", 
                    "        the rollup data for these questions will be returned.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        rollups = {}  # returned data\n", 
                    "        input_question_list = []  # input for ansvc\n", 
                    "\n", 
                    "        for question in questions:\n", 
                    "            if not question.is_trendable():\n", 
                    "                continue\n", 
                    "            input_question_list.append(question)\n", 
                    "\n", 
                    "            # if the question has no data (no answers), we want to keep track\n", 
                    "            # that the rollup for this question was at least requested\n", 
                    "            rollups[question.id] = None\n", 
                    "\n", 
                    "        if not input_question_list:\n", 
                    "            # If the survey doesn't have any questions, return an empty rollup\n", 
                    "            # dictionary\n", 
                    "            return rollups\n", 
                    "\n", 
                    "        questions_data = []\n", 
                    "        for question in input_question_list:\n", 
                    "            q_data = {\n", 
                    "                'question_id': question.id,\n", 
                    "                'question_type': {\n", 
                    "                    'family': question.type,\n", 
                    "                    'subtype': question.subtype\n", 
                    "                },\n", 
                    "                'trend_data': {\n", 
                    "                    'trend_by': question.trend_by or default_trend_by,\n", 
                    "                    'first_respondent': first_respondent.id,\n", 
                    "                    'last_respondent': last_respondent.id,\n", 
                    "                    'utc_offset': self.owner.utc_offset\n", 
                    "                }\n", 
                    "            }\n", 
                    "\n", 
                    "            questions_data.append(q_data)\n", 
                    "\n", 
                    "        response = self.request.ansvc.get_questions_responses_trends(\n", 
                    "            self.id,\n", 
                    "            self.owner.id,\n", 
                    "            questions_data,\n", 
                    "            filter_data,\n", 
                    "            compare_data\n", 
                    "        )\n", 
                    "        response = response[self.id]  # unwrap rollups to the top-level of the dict\n", 
                    "\n", 
                    "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
                    "        rollups.update(response)\n", 
                    "\n", 
                    "        return rollups\n", 
                    "\n", 
                    "    def to_dict(self, include_collectors=False, include_theme=False):\n", 
                    "        \"\"\"\n", 
                    "        Return the whole survey structure.\n", 
                    "\n", 
                    "        \"\"\"\n", 
                    "        survey_data = {\n", 
                    "            'id': self.id,\n", 
                    "            'date_created': self.date_created,\n", 
                    "            'date_modified': self.date_modified,\n", 
                    "            'date_deleted': self.date_deleted,\n", 
                    "            'title': self.title,\n", 
                    "            'nickname': self.nickname,\n", 
                    "            'version': self.version,\n", 
                    "            'num_responses': self.num_responses,\n", 
                    "            'language': self.language,\n", 
                    "            'user_id': self.owner.id,\n", 
                    "            'answers': self._answer_map,\n", 
                    "            'has_panel_page': self.has_panel_page,\n", 
                    "            'question_count': self.question_count,\n", 
                    "            'design_settings': self.design_settings,\n", 
                    "            'theme_settings': self.theme if include_theme else None,\n", 
                    "            'quotas': self.quotas,\n", 
                    "            'page_logic': self.page_logic,\n", 
                    "            'question_logic': self.question_logic,\n", 
                    "            'has_logic': True if (\n", 
                    "                self.page_logic or self.question_logic\n", 
                    "            ) else False,\n", 
                    "            'has_randomization': True if (\n", 
                    "                self.has_page_randomization or\n", 
                    "                self.has_question_randomization\n", 
                    "            ) else False,\n", 
                    "            'mangled_id': self.mangled_id,\n", 
                    "            'preview_link': self.preview_link,\n", 
                    "            'resource_path': self.resource_path\n", 
                    "        }\n", 
                    "\n", 
                    "        if self._populated_pages:\n", 
                    "            survey_data.update({\n", 
                    "                'page_ids': [page.id for page in self.pages],\n", 
                    "                'questions': dict((q.id, q.to_dict()) for q in self.questions),\n", 
                    "                'pages': dict((p.id, p.to_dict()) for p in self.pages)\n", 
                    "            })\n", 
                    "        if self._populated_collectors or include_collectors:\n", 
                    "            survey_data.update({\n", 
                    "                'collectors': [c.to_dict() for c in self.collectors],\n", 
                    "                'has_collector': self.has_collector,\n", 
                    "                'has_email_collector': self.has_email_collector,\n", 
                    "                'has_open_collector': self.has_open_collector,\n", 
                    "                'has_all_closed_collectors': self.has_all_closed_collectors,\n", 
                    "                'has_unconfigured_collector': self.has_unconfigured_collector\n", 
                    "            })\n", 
                    "\n", 
                    "        return survey_data\n", 
                    "\n", 
                    "\n"
                ], 
                "name": "Survey", 
                "obj_type": "class", 
                "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                "returns": [], 
                "variables": [
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2565f50>, 'target': '_populated_collectors', 'line_index_start': 33, 'value': 'False', 'line_index_end': 33, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1050>, 'target': '_populated_export_jobs', 'line_index_start': 34, 'value': 'False', 'line_index_end': 34, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1110>, 'target': '_populated_export_views', 'line_index_start': 35, 'value': 'False', 'line_index_end': 35, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c11d0>, 'target': '_populated_owners', 'line_index_start': 36, 'value': 'False', 'line_index_end': 36, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1290>, 'target': '_populated_theme', 'line_index_start': 37, 'value': 'False', 'line_index_end': 37, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1350>, 'target': '_populated_pages', 'line_index_start': 38, 'value': 'False', 'line_index_end': 38, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1410>, 'target': '_populated_survey', 'line_index_start': 39, 'value': 'False', 'line_index_end': 39, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c14d0>, 'target': '_populated_user_features', 'line_index_start': 40, 'value': 'False', 'line_index_end': 40, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1590>, 'target': '_populated_views', 'line_index_start': 41, 'value': 'False', 'line_index_end': 41, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1650>, 'target': '_populated_design_settings', 'line_index_start': 42, 'value': 'False', 'line_index_end': 42, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1710>, 'target': '_populated_logic', 'line_index_start': 43, 'value': 'False', 'line_index_end': 43, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c17d0>, 'target': '_populated_shared_views', 'line_index_start': 44, 'value': 'False', 'line_index_end': 45, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1890>, 'target': '_current_view', 'line_index_start': 46, 'value': 'None', 'line_index_end': 46, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1950>, 'target': '_default_view', 'line_index_start': 47, 'value': 'None', 'line_index_end': 48, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1a10>, 'target': '_date_created', 'line_index_start': 49, 'value': 'None', 'line_index_end': 49, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1ad0>, 'target': '_date_modified', 'line_index_start': 50, 'value': 'None', 'line_index_end': 50, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1b90>, 'target': '_date_deleted', 'line_index_start': 51, 'value': 'None', 'line_index_end': 51, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1c50>, 'target': '_title', 'line_index_start': 52, 'value': 'None', 'line_index_end': 52, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1d10>, 'target': 'version', 'line_index_start': 53, 'value': 'None', 'line_index_end': 53, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1dd0>, 'target': 'nickname', 'line_index_start': 54, 'value': 'None', 'line_index_end': 54, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1e90>, 'target': 'num_responses', 'line_index_start': 55, 'value': 'None', 'line_index_end': 55, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c1f50>, 'target': '_language_id', 'line_index_start': 56, 'value': 'None', 'line_index_end': 56, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c2050>, 'target': '_theme', 'line_index_start': 57, 'value': 'None', 'line_index_end': 58, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x22c2110>, 'target': 'language_options', 'line_index_start': 59, 'line_index_end': 119, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x2371850>, 'targets': []}"
                ]
            }, 
            {
                "children": [
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1707, 
                        "line_index_start": 1703, 
                        "lines": [
                            "    def __init__(self, request):\n", 
                            "        self.request = request\n", 
                            "        self._question_list = []\n", 
                            "        self._question_map = {}\n", 
                            "\n"
                        ], 
                        "name": "__init__", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236bd10>, 'line_index_start': 1704, 'value': 'request', 'line_index_end': 1704, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad450>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236be10>, 'line_index_start': 1705, 'line_index_end': 1705, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad450>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236bf10>, 'line_index_start': 1706, 'line_index_end': 1707, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad450>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236d710>, 'name': 'property', 'line_index_start': 1708, 'line_index_end': 1709, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad550>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1721, 
                        "line_index_start": 1708, 
                        "lines": [
                            "    @property\n", 
                            "    def edit_link(self):\n", 
                            "        #/MySurvey_EditorPage.aspx?sm=ALFEvPW9xjVqGpg5j9RNK4p1LERFeyh15O4IyBL9YkgpxQj1bS0JB%2f1t8uOA6gji\n", 
                            "        if self.survey_id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        mangled = encrypt_mangled(\n", 
                            "            \"SurveyID=%s&SectionID=%s&\" % (self.survey_id, self.id)\n", 
                            "        )\n", 
                            "\n", 
                            "        return \"/MySurvey_EditorPage.aspx?sm=%s\" % mangled\n", 
                            "\n"
                        ], 
                        "name": "edit_link", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1720, 'ast_node': <_ast.Return object at 0x236d610>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad550>, 'obj_type': 'return', 'line_index_end': 1721}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236d350>, 'target': 'mangled', 'line_index_start': 1716, 'line_index_end': 1719, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad550>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236d950>, 'name': 'property', 'line_index_start': 1722, 'line_index_end': 1723, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad650>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1725, 
                        "line_index_start": 1722, 
                        "lines": [
                            "    @property\n", 
                            "    def index(self):\n", 
                            "        return self.position - 1\n", 
                            "\n"
                        ], 
                        "name": "index", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1724, 'ast_node': <_ast.Return object at 0x236d810>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad650>, 'obj_type': 'return', 'line_index_end': 1725}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236db90>, 'name': 'property', 'line_index_start': 1726, 'line_index_end': 1727, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad710>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1729, 
                        "line_index_start": 1726, 
                        "lines": [
                            "    @property\n", 
                            "    def questions(self):\n", 
                            "        return self._question_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1728, 'ast_node': <_ast.Return object at 0x236da50>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad710>, 'obj_type': 'return', 'line_index_end': 1729}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236df50>, 'name': 'property', 'line_index_start': 1730, 'line_index_end': 1731, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad7d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1736, 
                        "line_index_start": 1730, 
                        "lines": [
                            "    @property\n", 
                            "    def has_random_assignment(self):\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                return True\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_random_assignment", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x236ded0>, 'line_index_start': 1735, 'value': 'False', 'line_index_end': 1736, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad7d0>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1739, 
                        "line_index_start": 1737, 
                        "lines": [
                            "    def has_question(self, question):\n", 
                            "        return self._question_map.get(question.id)\n", 
                            "\n"
                        ], 
                        "name": "has_question", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1738, 'ast_node': <_ast.Return object at 0x236e0d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad890>, 'obj_type': 'return', 'line_index_end': 1739}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1744, 
                        "line_index_start": 1740, 
                        "lines": [
                            "    def add_question(self, question):\n", 
                            "        self._question_list.append(question)\n", 
                            "        self._question_map[question.id] = question\n", 
                            "        question.page = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_question", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236e510>, 'line_index_start': 1742, 'value': 'question', 'line_index_end': 1742, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236e710>, 'line_index_start': 1743, 'value': 'self', 'line_index_end': 1744, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad910>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1760, 
                        "line_index_start": 1745, 
                        "lines": [
                            "    def load(self, page_data):\n", 
                            "        questions = page_data['questions']\n", 
                            "        self.question_ids = []\n", 
                            "        self.heading = page_data['heading']\n", 
                            "        self.id = str(page_data['page_id'])\n", 
                            "        self.position = page_data['position']\n", 
                            "        self.question_ids = []\n", 
                            "        self.has_question_randomization = page_data['question_randomization']['enabled']\n", 
                            "        for q in questions:\n", 
                            "            question = Question(self.request)\n", 
                            "            question.load(q)\n", 
                            "            self.add_question(question)\n", 
                            "            self.question_ids.append(question.id)\n", 
                            "        self.sub_heading = page_data['sub_heading']\n", 
                            "        self.survey_id = page_data['survey_id']\n", 
                            "\n"
                        ], 
                        "name": "load", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236e910>, 'target': 'questions', 'line_index_start': 1746, 'line_index_end': 1746, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ea90>, 'line_index_start': 1747, 'line_index_end': 1747, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236eb90>, 'line_index_start': 1748, 'line_index_end': 1748, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ed50>, 'line_index_start': 1749, 'line_index_end': 1749, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ef90>, 'line_index_start': 1750, 'line_index_end': 1750, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370190>, 'line_index_start': 1751, 'line_index_end': 1751, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370290>, 'line_index_start': 1752, 'line_index_end': 1752, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370b90>, 'line_index_start': 1758, 'line_index_end': 1758, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370d50>, 'line_index_start': 1759, 'line_index_end': 1760, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1772, 
                        "line_index_start": 1761, 
                        "lines": [
                            "    def to_dict(self):\n", 
                            "        question_ids = [question.id for question in self.questions]\n", 
                            "\n", 
                            "        return {\n", 
                            "            'heading': self.heading,\n", 
                            "            'sub_heading': self.sub_heading,\n", 
                            "            'id': self.id,\n", 
                            "            'position': self.position,\n", 
                            "            'question_ids': question_ids,\n", 
                            "            'survey_id': self.survey_id,\n", 
                            "            'edit_link': self.edit_link\n", 
                            "        }\n"
                        ], 
                        "name": "to_dict", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1764, 'ast_node': <_ast.Return object at 0x2371250>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27adc50>, 'obj_type': 'return', 'line_index_end': 1772}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370fd0>, 'target': 'question_ids', 'line_index_start': 1762, 'line_index_end': 1763, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27adc50>, 'targets': []}"
                        ]
                    }
                ], 
                "classes": [], 
                "comments": [], 
                "decorators": [], 
                "docstring": "A page. Also referred as a survey page.", 
                "functions": [
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1707, 
                        "line_index_start": 1703, 
                        "lines": [
                            "    def __init__(self, request):\n", 
                            "        self.request = request\n", 
                            "        self._question_list = []\n", 
                            "        self._question_map = {}\n", 
                            "\n"
                        ], 
                        "name": "__init__", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236bd10>, 'line_index_start': 1704, 'value': 'request', 'line_index_end': 1704, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad450>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236be10>, 'line_index_start': 1705, 'line_index_end': 1705, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad450>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236bf10>, 'line_index_start': 1706, 'line_index_end': 1707, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad450>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236d710>, 'name': 'property', 'line_index_start': 1708, 'line_index_end': 1709, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad550>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1721, 
                        "line_index_start": 1708, 
                        "lines": [
                            "    @property\n", 
                            "    def edit_link(self):\n", 
                            "        #/MySurvey_EditorPage.aspx?sm=ALFEvPW9xjVqGpg5j9RNK4p1LERFeyh15O4IyBL9YkgpxQj1bS0JB%2f1t8uOA6gji\n", 
                            "        if self.survey_id is None:\n", 
                            "            raise RuntimeError(\n", 
                            "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
                            "            )\n", 
                            "\n", 
                            "        mangled = encrypt_mangled(\n", 
                            "            \"SurveyID=%s&SectionID=%s&\" % (self.survey_id, self.id)\n", 
                            "        )\n", 
                            "\n", 
                            "        return \"/MySurvey_EditorPage.aspx?sm=%s\" % mangled\n", 
                            "\n"
                        ], 
                        "name": "edit_link", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1720, 'ast_node': <_ast.Return object at 0x236d610>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad550>, 'obj_type': 'return', 'line_index_end': 1721}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236d350>, 'target': 'mangled', 'line_index_start': 1716, 'line_index_end': 1719, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad550>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236d950>, 'name': 'property', 'line_index_start': 1722, 'line_index_end': 1723, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad650>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1725, 
                        "line_index_start": 1722, 
                        "lines": [
                            "    @property\n", 
                            "    def index(self):\n", 
                            "        return self.position - 1\n", 
                            "\n"
                        ], 
                        "name": "index", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1724, 'ast_node': <_ast.Return object at 0x236d810>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad650>, 'obj_type': 'return', 'line_index_end': 1725}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236db90>, 'name': 'property', 'line_index_start': 1726, 'line_index_end': 1727, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad710>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1729, 
                        "line_index_start": 1726, 
                        "lines": [
                            "    @property\n", 
                            "    def questions(self):\n", 
                            "        return self._question_list[:]  # return copy!\n", 
                            "\n"
                        ], 
                        "name": "questions", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1728, 'ast_node': <_ast.Return object at 0x236da50>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad710>, 'obj_type': 'return', 'line_index_end': 1729}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [
                            "{'obj_type': 'decorator', 'ast_node': <_ast.Name object at 0x236df50>, 'name': 'property', 'line_index_start': 1730, 'line_index_end': 1731, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad7d0>}"
                        ], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1736, 
                        "line_index_start": 1730, 
                        "lines": [
                            "    @property\n", 
                            "    def has_random_assignment(self):\n", 
                            "        for q in self.questions:\n", 
                            "            if q.has_random_assignment:\n", 
                            "                return True\n", 
                            "        return False\n", 
                            "\n"
                        ], 
                        "name": "has_random_assignment", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'obj_type': 'return', 'ast_node': <_ast.Return object at 0x236ded0>, 'line_index_start': 1735, 'value': 'False', 'line_index_end': 1736, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad7d0>}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1739, 
                        "line_index_start": 1737, 
                        "lines": [
                            "    def has_question(self, question):\n", 
                            "        return self._question_map.get(question.id)\n", 
                            "\n"
                        ], 
                        "name": "has_question", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1738, 'ast_node': <_ast.Return object at 0x236e0d0>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad890>, 'obj_type': 'return', 'line_index_end': 1739}"
                        ], 
                        "variables": []
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1744, 
                        "line_index_start": 1740, 
                        "lines": [
                            "    def add_question(self, question):\n", 
                            "        self._question_list.append(question)\n", 
                            "        self._question_map[question.id] = question\n", 
                            "        question.page = self  # backref\n", 
                            "\n"
                        ], 
                        "name": "add_question", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236e510>, 'line_index_start': 1742, 'value': 'question', 'line_index_end': 1742, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad910>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236e710>, 'line_index_start': 1743, 'value': 'self', 'line_index_end': 1744, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad910>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1760, 
                        "line_index_start": 1745, 
                        "lines": [
                            "    def load(self, page_data):\n", 
                            "        questions = page_data['questions']\n", 
                            "        self.question_ids = []\n", 
                            "        self.heading = page_data['heading']\n", 
                            "        self.id = str(page_data['page_id'])\n", 
                            "        self.position = page_data['position']\n", 
                            "        self.question_ids = []\n", 
                            "        self.has_question_randomization = page_data['question_randomization']['enabled']\n", 
                            "        for q in questions:\n", 
                            "            question = Question(self.request)\n", 
                            "            question.load(q)\n", 
                            "            self.add_question(question)\n", 
                            "            self.question_ids.append(question.id)\n", 
                            "        self.sub_heading = page_data['sub_heading']\n", 
                            "        self.survey_id = page_data['survey_id']\n", 
                            "\n"
                        ], 
                        "name": "load", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236e910>, 'target': 'questions', 'line_index_start': 1746, 'line_index_end': 1746, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ea90>, 'line_index_start': 1747, 'line_index_end': 1747, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236eb90>, 'line_index_start': 1748, 'line_index_end': 1748, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ed50>, 'line_index_start': 1749, 'line_index_end': 1749, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ef90>, 'line_index_start': 1750, 'line_index_end': 1750, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370190>, 'line_index_start': 1751, 'line_index_end': 1751, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370290>, 'line_index_start': 1752, 'line_index_end': 1752, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370b90>, 'line_index_start': 1758, 'line_index_end': 1758, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}", 
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370d50>, 'line_index_start': 1759, 'line_index_end': 1760, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad9d0>, 'targets': []}"
                        ]
                    }, 
                    {
                        "children": [], 
                        "classes": [], 
                        "comments": [], 
                        "decorators": [], 
                        "docstring": null, 
                        "functions": [], 
                        "imports": [], 
                        "indent": 4, 
                        "is_class": false, 
                        "is_function": true, 
                        "line_index_end": 1772, 
                        "line_index_start": 1761, 
                        "lines": [
                            "    def to_dict(self):\n", 
                            "        question_ids = [question.id for question in self.questions]\n", 
                            "\n", 
                            "        return {\n", 
                            "            'heading': self.heading,\n", 
                            "            'sub_heading': self.sub_heading,\n", 
                            "            'id': self.id,\n", 
                            "            'position': self.position,\n", 
                            "            'question_ids': question_ids,\n", 
                            "            'survey_id': self.survey_id,\n", 
                            "            'edit_link': self.edit_link\n", 
                            "        }\n"
                        ], 
                        "name": "to_dict", 
                        "obj_type": "function", 
                        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                        "returns": [
                            "{'line_index_start': 1764, 'ast_node': <_ast.Return object at 0x2371250>, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27adc50>, 'obj_type': 'return', 'line_index_end': 1772}"
                        ], 
                        "variables": [
                            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2370fd0>, 'target': 'question_ids', 'line_index_start': 1762, 'line_index_end': 1763, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27adc50>, 'targets': []}"
                        ]
                    }
                ], 
                "imports": [], 
                "indent": 0, 
                "is_class": true, 
                "is_function": false, 
                "line_index_end": 1772, 
                "line_index_start": 1691, 
                "lines": [
                    "class Page(object):\n", 
                    "    \"\"\"A page. Also referred as a survey page.\"\"\"\n", 
                    "\n", 
                    "    heading = None\n", 
                    "    sub_heading = None\n", 
                    "    id = None\n", 
                    "    position = None\n", 
                    "    question_ids = None\n", 
                    "    survey_id = None\n", 
                    "\n", 
                    "    survey = None  # backref\n", 
                    "\n", 
                    "    def __init__(self, request):\n", 
                    "        self.request = request\n", 
                    "        self._question_list = []\n", 
                    "        self._question_map = {}\n", 
                    "\n", 
                    "    @property\n", 
                    "    def edit_link(self):\n", 
                    "        #/MySurvey_EditorPage.aspx?sm=ALFEvPW9xjVqGpg5j9RNK4p1LERFeyh15O4IyBL9YkgpxQj1bS0JB%2f1t8uOA6gji\n", 
                    "        if self.survey_id is None:\n", 
                    "            raise RuntimeError(\n", 
                    "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
                    "            )\n", 
                    "\n", 
                    "        mangled = encrypt_mangled(\n", 
                    "            \"SurveyID=%s&SectionID=%s&\" % (self.survey_id, self.id)\n", 
                    "        )\n", 
                    "\n", 
                    "        return \"/MySurvey_EditorPage.aspx?sm=%s\" % mangled\n", 
                    "\n", 
                    "    @property\n", 
                    "    def index(self):\n", 
                    "        return self.position - 1\n", 
                    "\n", 
                    "    @property\n", 
                    "    def questions(self):\n", 
                    "        return self._question_list[:]  # return copy!\n", 
                    "\n", 
                    "    @property\n", 
                    "    def has_random_assignment(self):\n", 
                    "        for q in self.questions:\n", 
                    "            if q.has_random_assignment:\n", 
                    "                return True\n", 
                    "        return False\n", 
                    "\n", 
                    "    def has_question(self, question):\n", 
                    "        return self._question_map.get(question.id)\n", 
                    "\n", 
                    "    def add_question(self, question):\n", 
                    "        self._question_list.append(question)\n", 
                    "        self._question_map[question.id] = question\n", 
                    "        question.page = self  # backref\n", 
                    "\n", 
                    "    def load(self, page_data):\n", 
                    "        questions = page_data['questions']\n", 
                    "        self.question_ids = []\n", 
                    "        self.heading = page_data['heading']\n", 
                    "        self.id = str(page_data['page_id'])\n", 
                    "        self.position = page_data['position']\n", 
                    "        self.question_ids = []\n", 
                    "        self.has_question_randomization = page_data['question_randomization']['enabled']\n", 
                    "        for q in questions:\n", 
                    "            question = Question(self.request)\n", 
                    "            question.load(q)\n", 
                    "            self.add_question(question)\n", 
                    "            self.question_ids.append(question.id)\n", 
                    "        self.sub_heading = page_data['sub_heading']\n", 
                    "        self.survey_id = page_data['survey_id']\n", 
                    "\n", 
                    "    def to_dict(self):\n", 
                    "        question_ids = [question.id for question in self.questions]\n", 
                    "\n", 
                    "        return {\n", 
                    "            'heading': self.heading,\n", 
                    "            'sub_heading': self.sub_heading,\n", 
                    "            'id': self.id,\n", 
                    "            'position': self.position,\n", 
                    "            'question_ids': question_ids,\n", 
                    "            'survey_id': self.survey_id,\n", 
                    "            'edit_link': self.edit_link\n", 
                    "        }\n"
                ], 
                "name": "Page", 
                "obj_type": "class", 
                "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
                "returns": [], 
                "variables": [
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236b6d0>, 'target': 'heading', 'line_index_start': 1694, 'value': 'None', 'line_index_end': 1694, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236b790>, 'target': 'sub_heading', 'line_index_start': 1695, 'value': 'None', 'line_index_end': 1695, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236b850>, 'target': 'id', 'line_index_start': 1696, 'value': 'None', 'line_index_end': 1696, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236b910>, 'target': 'position', 'line_index_start': 1697, 'value': 'None', 'line_index_end': 1697, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236b9d0>, 'target': 'question_ids', 'line_index_start': 1698, 'value': 'None', 'line_index_end': 1698, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236ba90>, 'target': 'survey_id', 'line_index_start': 1699, 'value': 'None', 'line_index_end': 1700, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}", 
                    "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x236bb50>, 'target': 'survey', 'line_index_start': 1701, 'value': 'None', 'line_index_end': 1702, 'parent_obj': <parsefilelib.models.base_lines_obj.BaseLinesObj object at 0x27ad410>, 'targets': []}"
                ]
            }
        ], 
        "comments": [], 
        "decorators": [], 
        "docstring": null, 
        "functions": [], 
        "imports": [
            "{'imps': [{'name': 'json', 'asname': None}], 'obj_type': 'import', 'ast_node': <_ast.Import object at 0x22c0210>, 'line_index_start': 0, 'line_index_end': 0, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}", 
            "{'imps': [{'name': 'logging', 'asname': None}], 'obj_type': 'import', 'ast_node': <_ast.Import object at 0x2565590>, 'line_index_start': 1, 'line_index_end': 1, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}", 
            "{'imps': [{'name': 'View', 'asname': None}], 'obj_type': 'import', 'ast_node': <_ast.ImportFrom object at 0x2565610>, 'level': 1, 'line_index_start': 2, 'module': 'views', 'line_index_end': 2, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}", 
            "{'imps': [{'name': 'Collector', 'asname': None}], 'obj_type': 'import', 'ast_node': <_ast.ImportFrom object at 0x2565690>, 'level': 1, 'line_index_start': 3, 'module': 'collectors', 'line_index_end': 3, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}", 
            "{'imps': [{'name': 'ViewExportJob', 'asname': None}], 'obj_type': 'import', 'ast_node': <_ast.ImportFrom object at 0x2565710>, 'level': 1, 'line_index_start': 4, 'module': 'exports', 'line_index_end': 4, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}", 
            "{'imps': [{'name': 'User', 'asname': None}], 'obj_type': 'import', 'ast_node': <_ast.ImportFrom object at 0x2565790>, 'level': 1, 'line_index_start': 5, 'module': 'user', 'line_index_end': 5, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}", 
            "{'imps': [{'name': 'prof', 'asname': None}], 'obj_type': 'import', 'ast_node': <_ast.ImportFrom object at 0x2565810>, 'level': 0, 'line_index_start': 6, 'module': 'proflib.lib.decorators', 'line_index_end': 7, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}", 
            "{'imps': [{'name': 'ServiceError', 'asname': None}, {'name': 'ServiceResponseError', 'asname': None}], 'obj_type': 'import', 'ast_node': <_ast.ImportFrom object at 0x2565890>, 'level': 0, 'line_index_start': 8, 'module': 'smlib.service', 'line_index_end': 11, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}", 
            "{'imps': [{'name': 'Question', 'asname': None}], 'obj_type': 'import', 'ast_node': <_ast.ImportFrom object at 0x2565950>, 'level': 1, 'line_index_start': 12, 'module': 'questions', 'line_index_end': 12, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}", 
            "{'imps': [{'name': 'encrypt_mangled', 'asname': None}], 'obj_type': 'import', 'ast_node': <_ast.ImportFrom object at 0x25659d0>, 'level': 0, 'line_index_start': 13, 'module': 'smcrypto.dot_net_crypto', 'line_index_end': 13, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}", 
            "{'imps': [{'name': 'url_encode', 'asname': 'urlencode'}], 'obj_type': 'import', 'ast_node': <_ast.ImportFrom object at 0x2565a50>, 'level': 0, 'line_index_start': 14, 'module': 'pyramid.compat', 'line_index_end': 14, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}", 
            "{'imps': [{'name': 'get_language_from_country_code', 'asname': None}], 'obj_type': 'import', 'ast_node': <_ast.ImportFrom object at 0x2565ad0>, 'level': 0, 'line_index_start': 15, 'module': 'smlib.locale.language', 'line_index_end': 17, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}", 
            "{'imps': [{'name': 'iteritems', 'asname': None}], 'obj_type': 'import', 'ast_node': <_ast.ImportFrom object at 0x2565b50>, 'level': 0, 'line_index_start': 18, 'module': 'six', 'line_index_end': 19, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>}"
        ], 
        "indent": -1, 
        "is_class": false, 
        "is_function": false, 
        "line_index_end": 1772, 
        "line_index_start": 0, 
        "lines": [
            "import json\n", 
            "import logging\n", 
            "from .views import View\n", 
            "from .collectors import Collector\n", 
            "from .exports import ViewExportJob\n", 
            "from .user import User\n", 
            "from proflib.lib.decorators import prof\n", 
            "\n", 
            "from smlib.service import (\n", 
            "    ServiceError,\n", 
            "    ServiceResponseError\n", 
            ")\n", 
            "from .questions import Question\n", 
            "from smcrypto.dot_net_crypto import encrypt_mangled\n", 
            "from pyramid.compat import url_encode as urlencode\n", 
            "from smlib.locale.language import (\n", 
            "    get_language_from_country_code\n", 
            ")\n", 
            "from six import iteritems\n", 
            "\n", 
            "log = logging.getLogger(__name__)\n", 
            "\n", 
            "\n", 
            "class CurrentViewAlreadyExistsError(Exception):\n", 
            "    pass\n", 
            "\n", 
            "\n", 
            "class DefaultViewAlreadyExistsError(Exception):\n", 
            "    pass\n", 
            "\n", 
            "\n", 
            "class Survey(object):\n", 
            "\n", 
            "    _populated_collectors = False\n", 
            "    _populated_export_jobs = False\n", 
            "    _populated_export_views = False\n", 
            "    _populated_owners = False\n", 
            "    _populated_theme = False\n", 
            "    _populated_pages = False\n", 
            "    _populated_survey = False\n", 
            "    _populated_user_features = False\n", 
            "    _populated_views = False\n", 
            "    _populated_design_settings = False\n", 
            "    _populated_logic = False\n", 
            "    _populated_shared_views = False\n", 
            "\n", 
            "    _current_view = None\n", 
            "    _default_view = None\n", 
            "\n", 
            "    _date_created = None\n", 
            "    _date_modified = None\n", 
            "    _date_deleted = None\n", 
            "    _title = None\n", 
            "    version = None\n", 
            "    nickname = None\n", 
            "    num_responses = None\n", 
            "    _language_id = None\n", 
            "    _theme = None\n", 
            "\n", 
            "    language_options = [\n", 
            "        {\"name\": \"English\", \"id\": 1, \"code\": \"en\"},\n", 
            "        {\"name\": \"Albanian\", \"id\": 24, \"code\": \"sq\"},\n", 
            "        {\"name\": \"Arabic\", \"id\": 25, \"code\": \"ar\"},\n", 
            "        {\"name\": \"Armenian\", \"id\": 26, \"code\": \"hy\"},\n", 
            "        {\"name\": \"Basque\", \"id\": 27, \"code\": \"eu\"},\n", 
            "        {\"name\": \"Bengali\", \"id\": 28, \"code\": \"bn\"},\n", 
            "        {\"name\": \"Bosnian\", \"id\": 29, \"code\": \"bs\"},\n", 
            "        {\"name\": \"Bulgarian\", \"id\": 30, \"code\": \"bg\"},\n", 
            "        {\"name\": \"Catalan\", \"id\": 31, \"code\": \"ca\"},\n", 
            "        {\"name\": \"Chinese (Simplified)\", \"id\": 2, \"code\": \"zh-cn\"},\n", 
            "        {\"name\": \"Chinese (Traditional)\", \"id\": 3, \"code\": \"zh-tw\"},\n", 
            "        {\"name\": \"Portuguese (Brazilian)\", \"id\": 17, \"code\": \"pt-br\"},\n", 
            "        {\"name\": \"Portuguese (Iberian)\", \"id\": 16, \"code\": \"pt\"},\n", 
            "        {\"name\": \"Croatian\", \"id\": 32, \"code\": \"hr\"},\n", 
            "        {\"name\": \"Czech\", \"id\": 33, \"code\": \"cs\"},\n", 
            "        {\"name\": \"Danish\", \"id\": 4, \"code\": \"da\"},\n", 
            "        {\"name\": \"Dutch\", \"id\": 5, \"code\": \"nl\"},\n", 
            "        {\"name\": \"Estonian\", \"id\": 34, \"code\": \"et\"},\n", 
            "        {\"name\": \"Filipino\", \"id\": 35, \"code\": \"tl\"},\n", 
            "        {\"name\": \"Finnish\", \"id\": 6, \"code\": \"fi\"},\n", 
            "        {\"name\": \"French\", \"id\": 7, \"code\": \"fr\"},\n", 
            "        {\"name\": \"Georgian\", \"id\": 36, \"code\": \"ka\"},\n", 
            "        {\"name\": \"German\", \"id\": 8, \"code\": \"de\"},\n", 
            "        {\"name\": \"Greek\", \"id\": 9, \"code\": \"el\"},\n", 
            "        {\"name\": \"Hebrew\", \"id\": 37, \"code\": \"he\"},\n", 
            "        {\"name\": \"Hindi\", \"id\": 38, \"code\": \"hi\"},\n", 
            "        {\"name\": \"Hungarian\", \"id\": 39, \"code\": \"hu\"},\n", 
            "        {\"name\": \"Icelandic\", \"id\": 40, \"code\": \"is\"},\n", 
            "        {\"name\": \"Indonesian\", \"id\": 41, \"code\": \"id\"},\n", 
            "        {\"name\": \"Irish\", \"id\": 42, \"code\": \"ga\"},\n", 
            "        {\"name\": \"Italian\", \"id\": 10, \"code\": \"it\"},\n", 
            "        {\"name\": \"Japanese\", \"id\": 11, \"code\": \"ja\"},\n", 
            "        {\"name\": \"Korean\", \"id\": 12, \"code\": \"ko\"},\n", 
            "        {\"name\": \"Kurdish\", \"id\": 43, \"code\": \"ku\"},\n", 
            "        {\"name\": \"Latvian\", \"id\": 44, \"code\": \"lv\"},\n", 
            "        {\"name\": \"Lithuanian\", \"id\": 45, \"code\": \"lt\"},\n", 
            "        {\"name\": \"Macedonian\", \"id\": 46, \"code\": \"mk\"},\n", 
            "        {\"name\": \"Malay\", \"id\": 13, \"code\": \"ms\"},\n", 
            "        {\"name\": \"Malayalam\", \"id\": 47, \"code\": \"ml\"},\n", 
            "        {\"name\": \"Norwegian\", \"id\": 14, \"code\": \"no\"},\n", 
            "        {\"name\": \"Persian\", \"id\": 48, \"code\": \"fa\"},\n", 
            "        {\"name\": \"Polish\", \"id\": 15, \"code\": \"pl\"},\n", 
            "        {\"name\": \"Punjabi\", \"id\": 49, \"code\": \"pa\"},\n", 
            "        {\"name\": \"Romanian\", \"id\": 50, \"code\": \"ro\"},\n", 
            "        {\"name\": \"Russian\", \"id\": 18, \"code\": \"ru\"},\n", 
            "        {\"name\": \"Serbian\", \"id\": 51, \"code\": \"sr\"},\n", 
            "        {\"name\": \"Slovak\", \"id\": 52, \"code\": \"sk\"},\n", 
            "        {\"name\": \"Slovenian\", \"id\": 53, \"code\": \"sl\"},\n", 
            "        {\"name\": \"Spanish\", \"id\": 19, \"code\": \"es\"},\n", 
            "        {\"name\": \"Swahili\", \"id\": 54, \"code\": \"sw\"},\n", 
            "        {\"name\": \"Swedish\", \"id\": 20, \"code\": \"sv\"},\n", 
            "        {\"name\": \"Tamil\", \"id\": 55, \"code\": \"ta\"},\n", 
            "        {\"name\": \"Telugu\", \"id\": 56, \"code\": \"te\"},\n", 
            "        {\"name\": \"Thai\", \"id\": 57, \"code\": \"th\"},\n", 
            "        {\"name\": \"Turkish\", \"id\": 21, \"code\": \"tr\"},\n", 
            "        {\"name\": \"Ukrainian\", \"id\": 22, \"code\": \"uk\"},\n", 
            "        {\"name\": \"Vietnamese\", \"id\": 58, \"code\": \"vi\"},\n", 
            "        {\"name\": \"Welsh\", \"id\": 59, \"code\": \"cy\"},\n", 
            "    ]\n", 
            "\n", 
            "    def __init__(self, request, survey_id):\n", 
            "        self.request = request\n", 
            "        self.id = str(survey_id)\n", 
            "\n", 
            "        # Holds the survey's dictionary structure\n", 
            "        self._structure = {}\n", 
            "\n", 
            "        self._user_list = []\n", 
            "        self._user_map = {}\n", 
            "\n", 
            "        self._views_list = []\n", 
            "        self._views_map = {}\n", 
            "\n", 
            "        self._export_views_list = []\n", 
            "        self._export_views_map = {}\n", 
            "\n", 
            "        self._page_list = []\n", 
            "        self._page_map = {}\n", 
            "        self._page_map_by_index = {}\n", 
            "\n", 
            "        self._question_list = []\n", 
            "        self._question_map = {}\n", 
            "\n", 
            "        self._answer_map = {}\n", 
            "\n", 
            "        self._export_job_list = []\n", 
            "        self._export_job_map = {}\n", 
            "\n", 
            "        self._collector_list = []\n", 
            "        self._has_email_collector = False\n", 
            "        self._has_collector = False\n", 
            "        self._has_open_collector = False\n", 
            "        self._has_unconfigured_collector = False\n", 
            "        self._has_all_closed_collectors = False\n", 
            "        self._has_configured_audience = False\n", 
            "\n", 
            "        self._question_logic = None\n", 
            "        self._page_logic = None\n", 
            "\n", 
            "    def __repr__(self):\n", 
            "        return \"<%(class)s=%(id)s at 0x%(mem)x>\" % {\n", 
            "            \"class\": self.__class__.__name__,\n", 
            "            \"id\": self.id,\n", 
            "            \"mem\": id(self)\n", 
            "        }\n", 
            "\n", 
            "    def _load_survey(self, survey_data):\n", 
            "        self._date_created = survey_data['date_created']\n", 
            "        self._date_modified = survey_data['date_modified']\n", 
            "        self._date_deleted = survey_data['date_deleted']\n", 
            "        self._title = survey_data['title']['text']\n", 
            "        self._nickname = survey_data.get('nickname')\n", 
            "        self._language_id = survey_data['language_id']\n", 
            "        self.version = survey_data['version']\n", 
            "        self.num_responses = survey_data['num_responses']\n", 
            "        self.question_count = survey_data['question_count']\n", 
            "        self.has_panel_page = survey_data.get('has_panel_page', False)\n", 
            "        self._quotas = survey_data.get('quota')\n", 
            "        self.has_page_randomization = survey_data['page_randomization']['enabled']\n", 
            "        self._answer_map = {}\n", 
            "    \n", 
            "    def _set_benchmarkable_flags(self, survey_data):\n", 
            "        if self.owner.has_benchmarking_feature():\n", 
            "            # get benchmarkable data. we'll do this per page to minimize the bmsvc calls\n", 
            "            for page in survey_data['pages']:\n", 
            "                # get a dict of logical id by question id\n", 
            "                #   we'll use this dict to update the page data\n", 
            "                # get the list of logical ids\n", 
            "                #   we'll use this list to get the benchmarkable info\n", 
            "                qb_questions = {}\n", 
            "                logical_ids = []\n", 
            "                for question in page['questions']:\n", 
            "                    if question['question_bank']['is_banked']:\n", 
            "                        qb_questions[question['question_id']] = question['question_bank']['logical_bank_id']\n", 
            "                        logical_ids.append(qb_questions[question['question_id']])\n", 
            "                benchmarkable_ids = self.request.bmsvc.is_benchmarkable(logical_ids)\n", 
            "                # now update the questions\n", 
            "                for question in page['questions']:\n", 
            "                    question['is_benchmarkable'] = True if question['question_id'] in qb_questions and\\\n", 
            "                                                           qb_questions[question['question_id']] in benchmarkable_ids\\\n", 
            "                                                        else False\n", 
            "        else:\n", 
            "            # set all questions as not benchmarkable\n", 
            "            for page in survey_data['pages']:\n", 
            "                for question in page['questions']:\n", 
            "                    question['is_benchmarkable'] = False\n", 
            "\n", 
            "    #@prof(depth=1, include_variables=['survey_data'])\n", 
            "    def _populate_pages(self):\n", 
            "        if self._populated_pages:\n", 
            "            return\n", 
            "\n", 
            "        # FIXME: Maybe create Option objects as well?\n", 
            "        # only include panel if there has been a configured audience\n", 
            "        survey_data = self.request.svysvc.get_survey(\n", 
            "            self.id,\n", 
            "            self.owner.id,\n", 
            "            load_pages=True,\n", 
            "            include_panel=self.has_configured_audience\n", 
            "        )\n", 
            "        \n", 
            "        # if the user has benchmarking available, we will set the benchmarking flag for each question as appropriate\n", 
            "        self._set_benchmarkable_flags(survey_data)\n", 
            "        \n", 
            "        if not self._populated_survey:\n", 
            "            self._populated_survey = True\n", 
            "            self._load_survey(survey_data)\n", 
            "\n", 
            "        self._populated_pages = True\n", 
            "        self._load_pages(survey_data['pages'])\n", 
            "\n", 
            "    def _populate_survey(self):\n", 
            "        if self._populated_survey:\n", 
            "            return\n", 
            "\n", 
            "        # FIXME: Maybe create Option objects as well?\n", 
            "        # only include panel if there has abeen a configured audience\n", 
            "        survey_data = self.request.svysvc.get_survey(\n", 
            "            self.id,\n", 
            "            self.owner.id,\n", 
            "            load_pages=False,\n", 
            "            include_panel=self.has_configured_audience\n", 
            "        )\n", 
            "\n", 
            "        if 'quota' in survey_data:\n", 
            "            survey_data['quota'] = self.request.ansvc.quota_list(\n", 
            "                survey_data['survey_id']\n", 
            "            )['quota']\n", 
            "\n", 
            "        self._populated_survey = True\n", 
            "        self._load_survey(survey_data)\n", 
            "\n", 
            "    @property\n", 
            "    def title(self):\n", 
            "        self._populate_survey()\n", 
            "        return self._title\n", 
            "\n", 
            "    #dates appear to be stored in seconds\n", 
            "    @property\n", 
            "    def date_deleted(self):\n", 
            "        self._populate_survey()\n", 
            "        if self._date_deleted:\n", 
            "            return self._date_deleted * 1000\n", 
            "\n", 
            "    @property\n", 
            "    def date_created(self):\n", 
            "        self._populate_survey()\n", 
            "        return self._date_created * 1000\n", 
            "\n", 
            "    @property\n", 
            "    def date_modified(self):\n", 
            "        self._populate_survey()\n", 
            "        if self._date_modified:\n", 
            "            return self._date_modified * 1000\n", 
            "\n", 
            "    @property\n", 
            "    def quotas(self):\n", 
            "        self._populate_survey()\n", 
            "        return self._quotas\n", 
            "\n", 
            "    @property\n", 
            "    def nickname(self):\n", 
            "        self._populate_survey()\n", 
            "        if self._nickname:\n", 
            "            return self._nickname\n", 
            "\n", 
            "        return self._title\n", 
            "\n", 
            "    @property\n", 
            "    def mangled_id(self):\n", 
            "        if self.id is None:\n", 
            "            raise RuntimeError(\n", 
            "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
            "            )\n", 
            "        return encrypt_mangled(\"SurveyID=%s&\" % self.id)\n", 
            "\n", 
            "    @property\n", 
            "    def preview_link(self):\n", 
            "        query_string = {\n", 
            "            's': self.id,\n", 
            "            'mode': 3\n", 
            "        }\n", 
            "        query_string = urlencode(query_string)\n", 
            "        query_string = urlencode({\n", 
            "            'sm': encrypt_mangled(query_string),\n", 
            "            'PREVIEW_MODE': 'DO_NOT_USE_THIS_LINK_FOR_COLLECTION',\n", 
            "        })\n", 
            "\n", 
            "        return \"%(path)s?%(qs)s\" % {\n", 
            "            \"path\": '/s.aspx',\n", 
            "            \"qs\": query_string\n", 
            "        }\n", 
            "\n", 
            "    @property\n", 
            "    def has_question_randomization(self):\n", 
            "        for page in self.pages:\n", 
            "            if page.has_question_randomization:\n", 
            "                return True\n", 
            "\n", 
            "        return False\n", 
            "\n", 
            "    @property\n", 
            "    def has_random_assignment(self):\n", 
            "        for q in self.questions:\n", 
            "            if q.has_random_assignment:\n", 
            "                return True\n", 
            "        return False\n", 
            "\n", 
            "    def _populate_collectors(self):\n", 
            "        if self._populated_collectors:\n", 
            "            return\n", 
            "\n", 
            "        collector_list = self.request.collectorsvc.get_collector_list(\n", 
            "            int(self.owner.id),\n", 
            "            int(self.id)\n", 
            "        )\n", 
            "\n", 
            "        self._has_all_closed_collectors = True\n", 
            "        for collector_data in collector_list:\n", 
            "            collector = Collector(self.request)\n", 
            "            collector.load(collector_data)\n", 
            "            if collector.is_email:\n", 
            "                self._has_email_collector = True\n", 
            "\n", 
            "            if collector.is_open or collector.is_clearing_responses:\n", 
            "                self._has_open_collector = True\n", 
            "\n", 
            "            if collector.is_new:\n", 
            "                self._has_unconfigured_collector = True\n", 
            "            elif collector.is_audience:\n", 
            "                self._has_configured_audience = True\n", 
            "\n", 
            "            if not (collector.is_closed or collector.is_archived):\n", 
            "                self._has_all_closed_collectors = False\n", 
            "\n", 
            "            self._collector_list.append(collector)\n", 
            "\n", 
            "        if self._collector_list:\n", 
            "            self._has_collector = True\n", 
            "        else:\n", 
            "            self._has_all_closed_collectors = False\n", 
            "\n", 
            "        self._populated_collectors = True\n", 
            "\n", 
            "    @property\n", 
            "    def has_email_collector(self):\n", 
            "        self._populate_collectors()\n", 
            "        return self._has_email_collector\n", 
            "\n", 
            "    @property\n", 
            "    def has_open_collector(self):\n", 
            "        self._populate_collectors()\n", 
            "        return self._has_open_collector\n", 
            "\n", 
            "    @property\n", 
            "    def has_all_closed_collectors(self):\n", 
            "        self._populate_collectors()\n", 
            "        return self._has_all_closed_collectors\n", 
            "\n", 
            "    @property\n", 
            "    def has_unconfigured_collector(self):\n", 
            "        self._populate_collectors()\n", 
            "        return self._has_unconfigured_collector\n", 
            "\n", 
            "    @property\n", 
            "    def has_configured_audience(self):\n", 
            "        self._populate_collectors()\n", 
            "        return self._has_configured_audience\n", 
            "\n", 
            "    @property\n", 
            "    def has_collector(self):\n", 
            "        self._populate_collectors()\n", 
            "        return self._has_collector\n", 
            "\n", 
            "    @property\n", 
            "    def collectors(self):\n", 
            "        self._populate_collectors()\n", 
            "        return self._collector_list\n", 
            "\n", 
            "    def _populate_owners(self):\n", 
            "        \"\"\"\n", 
            "        Get the owners (user IDs) for this survey.\n", 
            "\n", 
            "        \"\"\"\n", 
            "        if self._populated_owners:\n", 
            "            return\n", 
            "\n", 
            "        try:\n", 
            "            access_list = self.request.svysvc.survey_access_list(self.id)\n", 
            "            self._populated_owners = True\n", 
            "        except ServiceResponseError:\n", 
            "            # Survey might not be found\n", 
            "            return\n", 
            "\n", 
            "        for user_id in access_list['users']:\n", 
            "            user = User(self.request, user_id)\n", 
            "            self._user_list.append(user)\n", 
            "            self._user_map[user.id] = user\n", 
            "            user.survey = self  # backref\n", 
            "\n", 
            "    def is_owner(self, user):\n", 
            "        self._populate_owners()\n", 
            "        return str(user.id) in self._user_map\n", 
            "\n", 
            "    @property\n", 
            "    def owner(self):\n", 
            "        return self.owners[0]\n", 
            "\n", 
            "    @property\n", 
            "    def owners(self):\n", 
            "        self._populate_owners()\n", 
            "        return self._user_list\n", 
            "\n", 
            "    def _load_pages(self, pages):\n", 
            "        question_position = 1\n", 
            "        page_position = 1\n", 
            "        for page_data in pages:\n", 
            "            page = Page(self.request)\n", 
            "            page.load(page_data)\n", 
            "            page.position = page_position\n", 
            "            page_position += 1\n", 
            "            self.add_page(page)\n", 
            "            for question in page.questions:\n", 
            "                # Question numbers aren't stored with presentation context\n", 
            "                # in the DB, we have to correct for this.\n", 
            "                question.position = question_position\n", 
            "                if not question.is_presentation() or \\\n", 
            "                    question.has_random_assignment:\n", 
            "                        question_position += 1\n", 
            "                self.add_question(question)\n", 
            "                self._load_answers(question.answers)\n", 
            "\n", 
            "    def _load_answers(self, answers):\n", 
            "        for dim, dim_answers in iteritems(answers):\n", 
            "            for answer in dim_answers:\n", 
            "                self._answer_map[answer['answer_id']] = answer\n", 
            "                answer['id'] = str(answer['answer_id'])\n", 
            "                del answer['answer_id']\n", 
            "                if 'items' in answer:\n", 
            "                    for menu_item in answer['items']:\n", 
            "                        self._answer_map[menu_item['answer_id']] = menu_item\n", 
            "                        menu_item['id'] = str(menu_item['answer_id'])\n", 
            "                        del menu_item['answer_id']\n", 
            "\n", 
            "    def _populate_views(self):\n", 
            "        \"\"\"\n", 
            "        Get the views for this survey.\n", 
            "\n", 
            "        If no view exists, create default and current views.\n", 
            "\n", 
            "        \"\"\"\n", 
            "        if self._populated_views:\n", 
            "            return\n", 
            "\n", 
            "        # Can't get data if ID is None\n", 
            "        if self.id is None:\n", 
            "            raise RuntimeError(\n", 
            "                \"Unable to get views: survey has no ID.\"\n", 
            "            )\n", 
            "\n", 
            "        data = self.request.ansvc.list_views(self.id)\n", 
            "        views = data['view_schemas']\n", 
            "\n", 
            "        # WARNING: This must be set before ``add_view()`` and\n", 
            "        # ``get_views_by_id()`` gets called again lower down\n", 
            "        self._populated_views = True\n", 
            "\n", 
            "        # Build view objects\n", 
            "        self._views_list = []\n", 
            "        self._views_map = {}\n", 
            "        for view_id, view_data in iteritems(views):\n", 
            "            view_type = view_data['view_type']\n", 
            "            view_data = json.loads(view_data['view_schema'])\n", 
            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
            "            # None when created the first time as we don't yet have an ID from\n", 
            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
            "            # the view_id inside the view_schema is still None and wasn't\n", 
            "            # assigned with its ID. For this to be fixed, we should not store\n", 
            "            # the view_id within the view_schema. Or we can augment the dict\n", 
            "            # such as here. This should be fixed when the view schema will be\n", 
            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
            "            view_data['view_id'] = view_id\n", 
            "            view_data['type'] = view_type\n", 
            "\n", 
            "            view = View(self.request, self)\n", 
            "            view.load(view_data)\n", 
            "            try:\n", 
            "                self.add_view(view)\n", 
            "            except (\n", 
            "                CurrentViewAlreadyExistsError,\n", 
            "                DefaultViewAlreadyExistsError\n", 
            "            ):\n", 
            "                log.warning(\n", 
            "                    \"Name=DuplicateCurrentDefaultView\",\n", 
            "                    \"ViewData=%s\" % view_data\n", 
            "                )\n", 
            "                # Force deletion because we normally can't delete a default or\n", 
            "                # current view.\n", 
            "                view.survey = self  # backref required for deletion\n", 
            "                view.delete(force=True)\n", 
            "\n", 
            "        # Call .fix() only after all views have been loaded into the survey\n", 
            "        # otherwise a view that depends on a not-yet-loaded view will\n", 
            "        # provoke a traceback (GORILLA-2216).\n", 
            "        for view in self.views:\n", 
            "            if view.fix():\n", 
            "                view.save()\n", 
            "\n", 
            "        if self.default_view is None:\n", 
            "            log.info(\"Creating default view for survey=%s\", self.id)\n", 
            "            default_view = self._create_default_view()\n", 
            "            default_view.save()\n", 
            "            self.add_view(default_view)\n", 
            "\n", 
            "        if self.current_view is None:\n", 
            "            log.info(\"Creating current view for survey=%s\", self.id)\n", 
            "            current_view = self._create_current_view()\n", 
            "            current_view.selected_view = self.default_view\n", 
            "            current_view.save()\n", 
            "            self.add_view(current_view)\n", 
            "\n", 
            "        if self.quotas and self.default_view.quota_view_metadata is None:\n", 
            "            log.info(\"Creating quota view for survey=%s\", self.id)\n", 
            "            self._create_quota_views()\n", 
            "        \n", 
            "        if self.has_random_assignment and self.default_view.random_assignment_view_metadata is None:\n", 
            "            log.info(\"Creating random assignment view for survey=%s\", self.id)\n", 
            "            self._create_random_assignment_views()\n", 
            "         \n", 
            "        if self.has_configured_audience and \\\n", 
            "            self.default_view.audience_view_metadata is None:\n", 
            "                self._create_audience_view()\n", 
            "\n", 
            "        # Set the selected view on the current view.\n", 
            "        selected_view_id = self.current_view.selected_view_id\n", 
            "        selected_view = self.get_view_by_id(selected_view_id)\n", 
            "        if selected_view is None:\n", 
            "            # Make sure the current view has its selected view pointing to an\n", 
            "            # existing view. If the selected view doesn't exist (see\n", 
            "            # GORILLA-1198 for details), re-point the current view's selected\n", 
            "            # view to be the default view.\n", 
            "            log.warning(\n", 
            "                \"Name=SelectedViewNotFound\",\n", 
            "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
            "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
            "            )\n", 
            "            selected_view = self.current_view.selected_view = self.default_view\n", 
            "            self.current_view.save()\n", 
            "        assert selected_view.id == self.current_view.selected_view_id\n", 
            "        self.current_view.selected_view = selected_view\n", 
            "\n", 
            "    def _populate_shared_views(self):\n", 
            "        \"\"\"\n", 
            "        Get the views for this survey.\n", 
            "\n", 
            "        If no view exists, create default and current views.\n", 
            "\n", 
            "        \"\"\"\n", 
            "        if self._populated_shared_views:\n", 
            "            return\n", 
            "\n", 
            "        # Can't get data if ID is None\n", 
            "        if self.id is None:\n", 
            "            raise RuntimeError(\n", 
            "                \"Unable to get shared views: survey has no ID.\"\n", 
            "            )\n", 
            "\n", 
            "        data = self.request.ansvc.list_shared_views(self.id)\n", 
            "        views = data['view_schemas']\n", 
            "\n", 
            "        # WARNING: This must be set before ``add_view()`` and\n", 
            "        # ``get_views_by_id()`` gets called again lower down\n", 
            "        self._populated_shared_views = True\n", 
            "\n", 
            "        # Build view objects\n", 
            "        self._shared_views_list = []\n", 
            "        self._shared_views_map = {}\n", 
            "\n", 
            "        for view_id, view_data in iteritems(views):\n", 
            "            view_type = view_data['view_type']\n", 
            "            view_data = json.loads(view_data['view_schema'])\n", 
            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
            "            # None when created the first time as we don't yet have an ID from\n", 
            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
            "            # the view_id inside the view_schema is still None and wasn't\n", 
            "            # assigned with its ID. For this to be fixed, we should not store\n", 
            "            # the view_id within the view_schema. Or we can augment the dict\n", 
            "            # such as here. This should be fixed when the view schema will be\n", 
            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
            "            view_data['view_id'] = view_id\n", 
            "            view_data['type'] = view_type\n", 
            "\n", 
            "            view = View(self.request, self)\n", 
            "            view.load(view_data)\n", 
            "            view.survey = self\n", 
            "\n", 
            "            try:\n", 
            "                self._shared_views_list.append(view)\n", 
            "                self._shared_views_map[view_id] = view\n", 
            "            except (\n", 
            "                CurrentViewAlreadyExistsError,\n", 
            "                DefaultViewAlreadyExistsError\n", 
            "            ):\n", 
            "                log.warning(\n", 
            "                    \"Name=DuplicateCurrentDefaultView\",\n", 
            "                    \"ViewData=%s\" % view_data\n", 
            "                )\n", 
            "                # Force deletion because we normally can't delete a default or\n", 
            "                # current view.\n", 
            "                view.delete(force=True)\n", 
            "\n", 
            "        # Call .fix() only after all views have been loaded into the survey\n", 
            "        # otherwise a view that depends on a not-yet-loaded view will\n", 
            "        # provoke a traceback (GORILLA-2216).\n", 
            "        for view in self.views:\n", 
            "            if view.fix():\n", 
            "                view.save()\n", 
            "\n", 
            "        if self.default_view is None:\n", 
            "            log.info(\"Creating default view for survey=%s\" % self.id)\n", 
            "            default_view = self._create_default_view()\n", 
            "            default_view.save()\n", 
            "            self.add_view(default_view)\n", 
            "\n", 
            "        if self.current_view is None:\n", 
            "            log.info(\"Creating current view for survey=%s\" % self.id)\n", 
            "            current_view = self._create_current_view()\n", 
            "            current_view.selected_view = self.default_view\n", 
            "            current_view.save()\n", 
            "            self.add_view(current_view)\n", 
            "\n", 
            "        # Set the selected view on the current view.\n", 
            "        selected_view_id = self.current_view.selected_view_id\n", 
            "        selected_view = self.get_view_by_id(selected_view_id)\n", 
            "        if selected_view is None:\n", 
            "            # Make sure the current view has its selected view pointing to an\n", 
            "            # existing view. If the selected view doesn't exist (see\n", 
            "            # GORILLA-1198 for details), re-point the current view's selected\n", 
            "            # view to be the default view.\n", 
            "            log.warning(\n", 
            "                \"Name=SelectedViewNotFound\",\n", 
            "                \"NonExistentViewID=%s CurrentViewID=%s\" \"DefaultView=%s\" %\n", 
            "                (selected_view_id, self.current_view.id, self.default_view.id)\n", 
            "            )\n", 
            "            selected_view = self.current_view.selected_view = self.default_view\n", 
            "            self.current_view.save()\n", 
            "        assert selected_view.id == self.current_view.selected_view_id\n", 
            "        self.current_view.selected_view = selected_view\n", 
            "\n", 
            "    def _populate_export_views(self):\n", 
            "        if self._populated_export_views:\n", 
            "            return\n", 
            "\n", 
            "        # Can't get data if ID is None\n", 
            "        if self.id is None:\n", 
            "            raise RuntimeError(\n", 
            "                \"Unable to get views: survey has no ID.\"\n", 
            "            )\n", 
            "\n", 
            "        data = self.request.ansvc.list_export_views(self.id)\n", 
            "        views = data['view_schemas']\n", 
            "\n", 
            "        # WARNING: This must be set before ``add_view()`` and\n", 
            "        # ``get_views_by_id()`` gets called again lower down\n", 
            "        self._populated_export_views = True\n", 
            "\n", 
            "        # Build view objects\n", 
            "        self._export_views_list = []\n", 
            "        self._export_views_map = {}\n", 
            "        for view_id, view_data in iteritems(views):\n", 
            "            view_type = view_data['view_type']\n", 
            "            view_data = json.loads(view_data['view_schema'])\n", 
            "            # FIXME: the view_id lives in the JSON schema. Because it is set to\n", 
            "            # None when created the first time as we don't yet have an ID from\n", 
            "            # the DB, when the view schema is pulled from the DB the next time,\n", 
            "            # the view_id inside the view_schema is still None and wasn't\n", 
            "            # assigned with its ID. For this to be fixed, we should not store\n", 
            "            # the view_id within the view_schema. Or we can augment the dict\n", 
            "            # such as here. This should be fixed when the view schema will be\n", 
            "            # broken down into proper DB columns -- see GORILLA-1311.\n", 
            "            view_data['view_id'] = view_id\n", 
            "            view_data['type'] = view_type\n", 
            "\n", 
            "            view = View(self.request, self)\n", 
            "            view.load(view_data)\n", 
            "            self.add_export_view(view)\n", 
            "\n", 
            "            if view.fix():\n", 
            "                view.save()\n", 
            "\n", 
            "    def _create_current_view(self):\n", 
            "        view = View(self.request, self)\n", 
            "        view_data = view.to_dict()\n", 
            "        view_data['is_current'] = True\n", 
            "        view_data['is_default'] = False\n", 
            "        view_data['name'] = \"Current View\"\n", 
            "        view_data['survey_id'] = self.id\n", 
            "        view_data['type'] = 'standard'\n", 
            "        view.load(view_data)\n", 
            "        self.add_view(view)\n", 
            "        return view\n", 
            "\n", 
            "    def _create_default_view(self):\n", 
            "        view = View(self.request, self)\n", 
            "        view_data = view.to_dict()\n", 
            "        view_data['is_current'] = False\n", 
            "        view_data['is_default'] = True\n", 
            "        view_data['name'] = View.DEFAULT_VIEW_NAME\n", 
            "        view_data['survey_id'] = self.id\n", 
            "        view_data['type'] = 'standard'\n", 
            "        view_data['page'] = 'all'\n", 
            "\n", 
            "        view.load(view_data)\n", 
            "        self.add_view(view)\n", 
            "        return view\n", 
            "\n", 
            "    def _create_quota_views(self):\n", 
            "        if 'equations' not in self.quotas:\n", 
            "            # A user can create part of a quota and not implement it so the\n", 
            "            # survey has quotas but no equations. If so, we don't want to create\n", 
            "            # the quota views until they finish creating the quota.\n", 
            "            return\n", 
            "        quota_question_map = self._translate_quotas()\n", 
            "        for quota_group in self.quotas['equations']:\n", 
            "            # each quota group has it's own view, and each quota groupd can have\n", 
            "            # multiple questions and/or question answer option. The metadata,\n", 
            "            # qna rules and completeness rule, are added to their quota view.\n", 
            "            quota_view = View(self.request, self)\n", 
            "            quota_view.survey = self\n", 
            "            quota_view_data = quota_view.to_dict()\n", 
            "            quota_view_data['name'] = quota_group['display_label']\n", 
            "            quota_view_data['is_current'] = False\n", 
            "            quota_view_data['is_default'] = False\n", 
            "            quota_view_data['survey_id'] = self.id\n", 
            "            quota_view_data['type'] = 'standard'\n", 
            "            quota_view.load(quota_view_data)\n", 
            "            quota_view.save()\n", 
            "            self.add_view(quota_view)\n", 
            "            for rules in quota_group['variables']:\n", 
            "                # iterating through the the equation groups and using our map\n", 
            "                # to get the question ids\n", 
            "                question_option_group = rules['quota_question_option_group_id']\n", 
            "                question_info = quota_question_map[question_option_group]\n", 
            "                metadata_item = {\n", 
            "                    'key': 'rule_filter_qna',\n", 
            "                    'metadata_id': None,\n", 
            "                    'option_id': None,\n", 
            "                    'question_id': None,\n", 
            "                    'view_id': quota_view.id,\n", 
            "                    'value': {\n", 
            "                        'rule_type': 'qna',\n", 
            "                        'selected': True,\n", 
            "                        'secondary_id': str(question_info['question_id']),\n", 
            "                        'rows': {}\n", 
            "                    }\n", 
            "                }\n", 
            "                for row in question_info['question_option_ids']:\n", 
            "                    #this is for the answer options that are selected\n", 
            "                    metadata_item['value'][\"rows\"][str(row)] = True\n", 
            "                quota_view.add_or_update_metadata_item(metadata_item)\n", 
            "            # completeness rule so we don't include overquota and disqualified\n", 
            "            completeness_metadata = {\n", 
            "                'key': 'rule_filter_completeness',\n", 
            "                'value': {\n", 
            "                    'rule_type': 'completeness',\n", 
            "                    'rows': {\n", 
            "                        'completely': True\n", 
            "                    },\n", 
            "                    'selected': True\n", 
            "                },\n", 
            "                'view_id': quota_view.id,\n", 
            "                'metadata_id': None,\n", 
            "                'option_id': None,\n", 
            "                'question_id': None\n", 
            "            }\n", 
            "            quota_view.add_or_update_metadata_item(completeness_metadata)\n", 
            "            quota_view.save_metadata()\n", 
            "        self._add_autocreated_view_metadata(\"quota_views_created\")\n", 
            "\n", 
            "    def _create_random_assignment_views(self):\n", 
            "        for ra in self.random_assignment_questions:\n", 
            "            # each quota group has it's own view, and each quota groupd can have\n", 
            "            # multiple questions and/or question answer option. The metadata,\n", 
            "            # qna rules and completeness rule, are added to their quota view.\n", 
            "\n", 
            "            # We currently don't allow for compares on open_ended questions\n", 
            "            if ra.type == 'open_ended' or \\\n", 
            "               ra.type == 'demographic' or \\\n", 
            "               ra.type == 'datetime':\n", 
            "                continue\n", 
            "            random_assignment_view = View(self.request, self)\n", 
            "            random_assignment_view.survey = self\n", 
            "            random_assignment_view_data = random_assignment_view.to_dict()\n", 
            "\n", 
            "            if len(ra.heading) > 0: \n", 
            "                random_assignment_view_data['name'] = ra.heading\n", 
            "            else:\n", 
            "                random_assignment_view_data['name'] = \"Q%s A/B Test\" % (ra.position)\n", 
            "\n", 
            "            random_assignment_view_data['is_current'] = False\n", 
            "            random_assignment_view_data['is_default'] = False\n", 
            "            random_assignment_view_data['survey_id'] = self.id\n", 
            "            random_assignment_view_data['type'] = 'standard'\n", 
            "            random_assignment_view.load(random_assignment_view_data)\n", 
            "            random_assignment_view.save()\n", 
            "            self.add_view(random_assignment_view)\n", 
            "            rows = {}\n", 
            "            for rule in ra.random_assignment_list:\n", 
            "                variable_id = rule['variable_id']\n", 
            "                rows[str(variable_id)] = True\n", 
            "                \n", 
            "            # iterating through the the equation groups and using our map\n", 
            "            # to get the question ids\n", 
            "            metadata_item = {\n", 
            "                'key': 'rule_compare_random_assignment',\n", 
            "                'metadata_id': None,\n", 
            "                'option_id': None,\n", 
            "                'question_id': None,\n", 
            "                'request': self.request,\n", 
            "                'value': {\n", 
            "                    'custom_heading': None,#rule['heading'],\n", 
            "                    'family': ra.type,\n", 
            "                    'subtype': ra.subtype,\n", 
            "                    'question_id': int(ra.id),\n", 
            "                    'rule_type': 'random_assignment',\n", 
            "                    'selected': True,\n", 
            "                    'rows': rows,\n", 
            "                    'is_compare_rule': True,\n", 
            "                },\n", 
            "                'view_id': random_assignment_view.id,\n", 
            "                'view': random_assignment_view,\n", 
            "            }\n", 
            "            random_assignment_view.add_or_update_metadata_item(metadata_item)\n", 
            "            random_assignment_view.save_metadata()\n", 
            "        self._add_autocreated_view_metadata(\"random_assignment_views_created\")\n", 
            "\n", 
            "    def _translate_quotas(self):\n", 
            "        # must only be called on surveys with quotas!!\n", 
            "        # AnSvc seperates the question option ids and question ids from the\n", 
            "        # equations. We need to create a map for the equation group ids\n", 
            "        # to the question ids, and selected question option ids.\n", 
            "        quotas_questions = self.quotas['questions']\n", 
            "        quota_question_map = {}\n", 
            "        for question in quotas_questions:\n", 
            "            question_id = question['question_id']\n", 
            "            for options in question['option_groups']:\n", 
            "                option_group_id = options['quota_question_option_group_id']\n", 
            "                quota_question_map[option_group_id] = {\n", 
            "                    'question_id': question_id,\n", 
            "                    'question_option_ids': []\n", 
            "                }\n", 
            "                quota_question = quota_question_map[option_group_id]\n", 
            "                question_option_ids = quota_question['question_option_ids']\n", 
            "                for option in options['options']:\n", 
            "                    question_option_ids.append(option['question_option_id'])\n", 
            "        return quota_question_map\n", 
            "\n", 
            "    def _create_audience_view(self):\n", 
            "        # creating audience view\n", 
            "        log.info(\"Creating audience view for survey=%s\", self.id)\n", 
            "        audience_view = View(self.request, self)\n", 
            "        audience_view.survey = self\n", 
            "        audience_view_data = audience_view.to_dict()\n", 
            "        audience_view_data['name'] = \"View complete responses only\"\n", 
            "        audience_view_data['is_current'] = False\n", 
            "        audience_view_data['is_default'] = False\n", 
            "        audience_view_data['survey_id'] = self.id\n", 
            "        audience_view_data['type'] = 'standard'\n", 
            "        audience_view.load(audience_view_data)\n", 
            "        audience_view.save()\n", 
            "        self.add_view(audience_view)\n", 
            "\n", 
            "        #add completeness rule to audience view\n", 
            "        completeness_metadata = {\n", 
            "            'key': 'rule_filter_completeness',\n", 
            "            'value': {\n", 
            "                'rule_type': 'completeness',\n", 
            "                'rows': {\n", 
            "                    'completely': True\n", 
            "                },\n", 
            "                'selected': True\n", 
            "            },\n", 
            "            'view_id': audience_view.id,\n", 
            "            'metadata_id': None,\n", 
            "            'option_id': None,\n", 
            "            'question_id': None\n", 
            "        }\n", 
            "        audience_view.add_or_update_metadata_item(completeness_metadata)\n", 
            "        audience_view.save_metadata()\n", 
            "\n", 
            "        # testing to see how many people buying audiences have unsaved\n", 
            "        # rules to see if this step is even necessary\n", 
            "        # check if current view is dirty\n", 
            "\n", 
            "        if not self.current_view.is_dirty:\n", 
            "            if self.owner.package_type != 'BASIC':\n", 
            "                log.info(\"switching from current view to audience view \"\n", 
            "                \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
            "                self.switch_view(audience_view)\n", 
            "            else:\n", 
            "                log.info(\"cannot switch to audience view views because user \"\n", 
            "                \"is basic for survey=%s and user=%s\", self.id, self.owner.id)\n", 
            "        else:\n", 
            "            log.info(\"has unsaved rules, cannot switch to audience view \"\n", 
            "                 \"for survey=%s and user=%s\", self.id, self.owner.id)\n", 
            "\n", 
            "        self._add_autocreated_view_metadata(\"audience_views_created\")\n", 
            "\n", 
            "    def _add_autocreated_view_metadata(self, key):\n", 
            "        # set metadata on the default view so we only create autocreated views\n", 
            "        # once\n", 
            "        autocreated_metadata = {\n", 
            "            'key': key,\n", 
            "            'value': {\n", 
            "                'created': True\n", 
            "            },\n", 
            "            'view_id': self.default_view.id,\n", 
            "            'metadata_id': None,\n", 
            "            'option_id': None,\n", 
            "            'question_id': None\n", 
            "        }\n", 
            "        self.default_view.add_or_update_metadata_item(autocreated_metadata)\n", 
            "        self.default_view.save_metadata()\n", 
            "\n", 
            "    @property\n", 
            "    def views(self):\n", 
            "        \"\"\"Return a list of views.\"\"\"\n", 
            "        self._populate_views()\n", 
            "        return self._views_list[:]  # return copy!\n", 
            "\n", 
            "    @property\n", 
            "    def export_views(self):\n", 
            "        \"\"\"Return a list of views.\"\"\"\n", 
            "        self._populate_export_views()\n", 
            "        return self._export_views_list[:]  # return copy!\n", 
            "\n", 
            "    def add_view(self, view):\n", 
            "        self._populate_views()\n", 
            "        if str(view.survey_id) != str(self.id):\n", 
            "            raise RuntimeError(\n", 
            "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
            "                \"to survey %(other_survey_id)s\" % {\n", 
            "                    \"view_id\": view.id,\n", 
            "                    \"survey_id\": self.id,\n", 
            "                    \"other_survey_id\": view.survey_id\n", 
            "                }\n", 
            "            )\n", 
            "\n", 
            "        if view.is_current:\n", 
            "            if self._current_view is None:\n", 
            "                self._current_view = view\n", 
            "            elif self._current_view != view:\n", 
            "                raise CurrentViewAlreadyExistsError(\n", 
            "                    \"survey=%s already has current_view=%s\" % (\n", 
            "                        self.id,\n", 
            "                        self._current_view.id\n", 
            "                    )\n", 
            "                )\n", 
            "        elif view.is_default:\n", 
            "            if self._default_view is None:\n", 
            "                self._default_view = view\n", 
            "            elif self._default_view != view:\n", 
            "                raise DefaultViewAlreadyExistsError(\n", 
            "                    \"survey=%s already has default_view=%s\" % (\n", 
            "                        self.id,\n", 
            "                        self._default_view.id\n", 
            "                    )\n", 
            "                )\n", 
            "            self._default_view = view\n", 
            "\n", 
            "        self._views_list.append(view)\n", 
            "        self._views_map[view.id] = view\n", 
            "        view.survey = self  # backref\n", 
            "\n", 
            "    def switch_view(self, selected_view):\n", 
            "        \"\"\"\n", 
            "        Set the given selected view ``selected_view`` as the current view and\n", 
            "        return the current view.\n", 
            "\n", 
            "        \"\"\"\n", 
            "        self.current_view.copy(selected_view)\n", 
            "        self.current_view.selected_view = selected_view\n", 
            "\n", 
            "        self.current_view.clear_metadata()\n", 
            "\n", 
            "        # Only copy metadata over if the selected view is not the default view\n", 
            "        # because the default view should not have any rules saved on it.\n", 
            "        if not selected_view.is_default and selected_view.has_metadata():\n", 
            "            self.current_view.copy_metadata(selected_view)\n", 
            "\n", 
            "        return self.current_view\n", 
            "\n", 
            "    def add_export_view(self, view):\n", 
            "        self._populate_export_views()\n", 
            "        if view.survey_id != self.id:\n", 
            "            raise RuntimeError(\n", 
            "                \"View %(view_id)s does not belong to survey %(survey_id)s, but \"\n", 
            "                \"to survey %(other_survey_id)s\" % {\n", 
            "                    \"view_id\": view.id,\n", 
            "                    \"survey_id\": self.id,\n", 
            "                    \"other_survey_id\": view.survey_id\n", 
            "                }\n", 
            "            )\n", 
            "\n", 
            "        self._export_views_list.append(view)\n", 
            "        self._export_views_map[view.id] = view\n", 
            "        view.survey = self  # backref\n", 
            "\n", 
            "    def add_export_job(self, export_job):\n", 
            "        self._export_job_list.append(export_job)\n", 
            "        self._export_job_map[export_job.id] = export_job\n", 
            "        export_job.survey = self  # backref\n", 
            "\n", 
            "    def delete_export_job(self, export_id):\n", 
            "        self._populate_export_jobs()\n", 
            "        job = self._export_job_map.get(export_id)\n", 
            "        if job is None:\n", 
            "            return\n", 
            "        job.delete()\n", 
            "        self._export_job_list.remove(job)\n", 
            "        del self._export_job_map[export_id]\n", 
            "\n", 
            "    def get_view_by_id(self, view_id):\n", 
            "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
            "        self._populate_views()\n", 
            "        return self._views_map.get(view_id)\n", 
            "\n", 
            "    def get_shared_view_by_id(self, view_id):\n", 
            "        \"\"\"Return a view given a ``view_id``.\"\"\"\n", 
            "        self._populate_shared_views()\n", 
            "        return self._shared_views_map.get(view_id)\n", 
            "\n", 
            "    def get_export_view_by_id(self, view_id):\n", 
            "        \"\"\"Return an export view given a ``view_id``\"\"\"\n", 
            "        self._populate_export_views()\n", 
            "        return self._export_views_map.get(view_id)\n", 
            "\n", 
            "    @property\n", 
            "    def current_view(self):\n", 
            "        self._populate_views()\n", 
            "        return self._current_view\n", 
            "\n", 
            "    @property\n", 
            "    def default_view(self):\n", 
            "        self._populate_views()\n", 
            "        return self._default_view\n", 
            "\n", 
            "    def get_respondent_trends(\n", 
            "        self, first_respondent, last_respondent, trend_by,\n", 
            "        filter_data=None, compare_data=None\n", 
            "    ):\n", 
            "        counts = self.request.ansvc.get_survey_respondent_trends(\n", 
            "            self.id,\n", 
            "            first_respondent.id,\n", 
            "            last_respondent.id,\n", 
            "            trend_by,\n", 
            "            self.owner.utc_offset,\n", 
            "            filter_data=filter_data,\n", 
            "            compare_data=compare_data\n", 
            "        )\n", 
            "\n", 
            "        return {\n", 
            "            'respondent_count': counts['respondent_count'],\n", 
            "            'trend_by': trend_by\n", 
            "        }\n", 
            "\n", 
            "    def respondent_counts(self, filter_data=None, compare_data=None):\n", 
            "        counts = self.request.ansvc.get_respondent_counts(\n", 
            "            self.id,\n", 
            "            self.owner.id,\n", 
            "            filter_data,\n", 
            "            compare_data,\n", 
            "            self.owner.response_limit\n", 
            "        )\n", 
            "        return counts['respondent_count']\n", 
            "\n", 
            "    def num_of_respondents(self, respondent_counts):\n", 
            "        num_of_respondents = respondent_counts['total_context']\n", 
            "\n", 
            "        if (\n", 
            "            self.owner.has_respondent_limit() and\n", 
            "            num_of_respondents >= self.owner.response_limit\n", 
            "        ):\n", 
            "            num_of_respondents = self.owner.response_limit\n", 
            "\n", 
            "        return num_of_respondents\n", 
            "\n", 
            "    def add_page(self, page):\n", 
            "        # Remove str() when this gets fixed:\n", 
            "        # https://monkeys.jira.com/browse/GORILLA-922\n", 
            "        if str(page.survey_id) != self.id:\n", 
            "            raise RuntimeError(\n", 
            "                \"Unable to add page which survey ID differs\"\n", 
            "            )\n", 
            "        page.survey = self  # backref\n", 
            "        self._page_list.append(page)\n", 
            "        self._page_map[page.id] = page\n", 
            "        self._page_map_by_index[page.index] = page\n", 
            "\n", 
            "    def add_question(self, question):\n", 
            "        # FIXME: Check that the question belongs to the survey (via the page)\n", 
            "        # when this \"surveyservice\" ticket is fixed:\n", 
            "        # https://monkeys.jira.com/browse/GORILLA-923\n", 
            "        if question.page.survey.id != self.id:\n", 
            "            raise RuntimeError(\n", 
            "                \"Unable to add question which page's ID differs\"\n", 
            "            )\n", 
            "        question.survey = self  # backref\n", 
            "        self._question_list.append(question)\n", 
            "        self._question_map[question.id] = question\n", 
            "\n", 
            "    @property\n", 
            "    def pages(self):\n", 
            "        \"\"\"Return a list of pages.\"\"\"\n", 
            "        self._populate_pages()\n", 
            "        return self._page_list[:]  # return copy!\n", 
            "\n", 
            "    @property\n", 
            "    def shown_pages(self):\n", 
            "        \"\"\"Return a list of pages that shown by the show rule.\"\"\"\n", 
            "        pages = []\n", 
            "        for page in self.pages:\n", 
            "            if self.current_view.shows_page(page):\n", 
            "                pages.append(page)\n", 
            "        return pages\n", 
            "\n", 
            "    def get_first_showable_page(self):\n", 
            "        \"\"\"\n", 
            "        Return the first showable (analyzable) page. If no page is\n", 
            "        considered showable, return None. The show rule on the current view is\n", 
            "        also taken into consideration to decide whether or not the page is\n", 
            "        showable.\n", 
            "\n", 
            "        In analyze terms, a page is considered to be showable if the page\n", 
            "        contains at least one \"real\" question that can be answered by a\n", 
            "        respondent.\n", 
            "\n", 
            "        E.g., \"presentation\" questions are not considered to be showable.\n", 
            "        Unless they are random assignment presentation questions.\n", 
            "\n", 
            "        \"\"\"\n", 
            "        for page in self.shown_pages:\n", 
            "            for question in page.questions:\n", 
            "                if not question.is_presentation():\n", 
            "                    return page\n", 
            "                elif question.has_random_assignment:\n", 
            "                    return page\n", 
            "\n", 
            "    def get_suggested_default_page_index(self):\n", 
            "        \"\"\"\n", 
            "        Return the suggested default page index to show to the user.\n", 
            "\n", 
            "        The value is either the page's index or the string \"all\" meaning that\n", 
            "        all pages should be shown.\n", 
            "\n", 
            "        \"\"\"\n", 
            "        if len(self.pages) > 1 and len(self.questions) > 30:\n", 
            "\n", 
            "            first_showable_page = self.get_first_showable_page()\n", 
            "\n", 
            "            if first_showable_page is None:\n", 
            "                return self.pages[0].index\n", 
            "\n", 
            "            return first_showable_page.index\n", 
            "\n", 
            "        return \"all\"\n", 
            "\n", 
            "\n", 
            "    @property\n", 
            "    def questions(self):\n", 
            "        self._populate_pages()\n", 
            "        return self._question_list[:]  # return copy!\n", 
            "    \n", 
            "    @property\n", 
            "    def has_random_assignment(self):\n", 
            "        for q in self.questions:\n", 
            "            if q.has_random_assignment:\n", 
            "                return True\n", 
            "        return False\n", 
            "\n", 
            "    @property\n", 
            "    def random_assignment_questions(self):\n", 
            "        random_assignment_questions = []\n", 
            "        for q in self.questions:\n", 
            "            if q.has_random_assignment:\n", 
            "                random_assignment_questions.append(q)\n", 
            "        return random_assignment_questions\n", 
            "\n", 
            "    @property\n", 
            "    def summary_data_questions(self):\n", 
            "        \"\"\"\n", 
            "        random assignment presentation questions included because they have\n", 
            "        summary data\n", 
            "        \"\"\"\n", 
            "        return [q for q in self.questions if not q.is_presentation() \\\n", 
            "            or q.has_random_assignment]\n", 
            "\n", 
            "    def get_question_by_id(self, question_id):\n", 
            "        self._populate_pages()\n", 
            "        return self._question_map.get(question_id)\n", 
            "\n", 
            "    def get_page_by_id(self, page_id):\n", 
            "        self._populate_pages()\n", 
            "        return self._page_map.get(page_id)\n", 
            "\n", 
            "    @property\n", 
            "    def export_jobs(self):\n", 
            "        try:\n", 
            "            self._populate_export_jobs()\n", 
            "        except ServiceError:\n", 
            "            return\n", 
            "        return self._export_job_list[:]  # return copy!\n", 
            "\n", 
            "    def get_exportjob_by_id(self, job_id):\n", 
            "        try:\n", 
            "            self._populate_export_jobs()\n", 
            "        except ServiceError:\n", 
            "            return\n", 
            "        return self._export_job_map.get(job_id)\n", 
            "\n", 
            "    @property\n", 
            "    def theme(self):\n", 
            "        self._populate_theme()\n", 
            "        return self._theme\n", 
            "\n", 
            "    @property\n", 
            "    def design_settings(self):\n", 
            "        self._populate_design_settings()\n", 
            "        return self._design_settings\n", 
            "\n", 
            "    def _populate_theme(self):\n", 
            "        if self._populated_theme:\n", 
            "            return\n", 
            "\n", 
            "        self._populate_pages()\n", 
            "        #self._populate_structure()  # required for the theme ID\n", 
            "        theme_id = self.design_settings['theme_id']\n", 
            "        theme_data = self.request.svysvc.get_theme(theme_id)\n", 
            "        self._populated_theme = True\n", 
            "\n", 
            "        self._theme = theme_data\n", 
            "\n", 
            "    def _populate_design_settings(self):\n", 
            "        if self._populated_design_settings:\n", 
            "            return\n", 
            "\n", 
            "        # only include panel if there is a configured audience\n", 
            "        survey_data = self.request.svysvc.get_survey(\n", 
            "            self.id,\n", 
            "            self.owner.id,\n", 
            "            include_design_settings=True,\n", 
            "            include_panel=self.has_configured_audience\n", 
            "        )\n", 
            "\n", 
            "        self._design_settings = survey_data['design_settings']\n", 
            "\n", 
            "    @property\n", 
            "    def question_logic(self):\n", 
            "        self._populate_logic()\n", 
            "        return self._question_logic\n", 
            "\n", 
            "    @property\n", 
            "    def page_logic(self):\n", 
            "        self._populate_logic()\n", 
            "        return self._page_logic\n", 
            "\n", 
            "    def _populate_logic(self):\n", 
            "        if self._populated_logic:\n", 
            "            return\n", 
            "\n", 
            "        survey_data = self.request.svysvc.get_survey(\n", 
            "            self.id,\n", 
            "            self.owner.id,\n", 
            "            include_logic=True\n", 
            "        )\n", 
            "\n", 
            "        self._question_logic = survey_data['logic'].get('question_logic')\n", 
            "        self._page_logic = survey_data['logic'].get('page_logic')\n", 
            "\n", 
            "        self._populated_logic = True\n", 
            "\n", 
            "    def _populate_export_jobs(self):\n", 
            "        if self._populated_export_jobs:\n", 
            "            return\n", 
            "\n", 
            "        export_jobs_data = self.request.jobsvc.get_export_jobs(self.id)\n", 
            "        for job_data in export_jobs_data['export_jobs']:\n", 
            "            export_job = ViewExportJob(self.request)\n", 
            "            export_job.load(job_data)\n", 
            "            self.add_export_job(export_job)\n", 
            "\n", 
            "        self._populated_export_jobs = True\n", 
            "\n", 
            "    def get_page_by_index(self, index):\n", 
            "        self._populate_pages()\n", 
            "        return self._page_map_by_index.get(index)\n", 
            "\n", 
            "    @property\n", 
            "    def language(self):\n", 
            "        self._populate_survey()\n", 
            "        for lang in self.language_options:\n", 
            "            if lang['id'] == self._language_id:\n", 
            "                return lang\n", 
            "\n", 
            "    def _get_owner_language(self):\n", 
            "        ''' returns the english name of the current user's language '''\n", 
            "        language = get_language_from_country_code(self.owner.language_code)\n", 
            "        return language.name.lower()\n", 
            "\n", 
            "    def _get_ta_question_rollups(self, questions, filter_data=None,\n", 
            "                                compare_data=None, expand_all=None):\n", 
            "        '''\n", 
            "        expand_all determines whether we will expand all the possible text items\n", 
            "        or just the essay questions.\n", 
            "\n", 
            "        '''\n", 
            "        rollups = {}\n", 
            "\n", 
            "        # compared questions are only expanded by the user\n", 
            "        # or if expand_all == True\n", 
            "        if (\n", 
            "            expand_all is None and\n", 
            "            compare_data is not None and\n", 
            "            'right' in compare_data\n", 
            "            ):\n", 
            "            return rollups\n", 
            "\n", 
            "        # prepare a default set of parameters for each question\n", 
            "        default_params = self._prepare_ta_rollup(filter_data,\n", 
            "                                                compare_data, expand_all)\n", 
            "\n", 
            "        if self.owner.has_respondent_limit():\n", 
            "            response_limit = self.owner.response_limit\n", 
            "            default_params['common']['response_limitation'] = response_limit\n", 
            "\n", 
            "        for question in questions:\n", 
            "            rollups[question.id] = question.ta_preget_rollup_by_question(\n", 
            "                                    default_params, expand_all)\n", 
            "\n", 
            "        return rollups\n", 
            "\n", 
            "    def _get_random_assignment_ta_rollup(self, question, variation_id_list,\n", 
            "                                        filter_data=None, compare_data=None,\n", 
            "                                        expand_all=None, option_id=0):\n", 
            "        \"\"\"\n", 
            "        random assignment ta rollups need a different structure\n", 
            "\n", 
            "        \"\"\"\n", 
            "        rollups = {}\n", 
            "\n", 
            "        # compared questions are only expanded by the user\n", 
            "        # or if expand_all == True\n", 
            "        if (\n", 
            "            expand_all is None and\n", 
            "            compare_data is not None and\n", 
            "            'right' in compare_data\n", 
            "            ):\n", 
            "            return rollups\n", 
            "\n", 
            "        # prepare a default set of parameters for each question\n", 
            "        for variation in variation_id_list:\n", 
            "            default_params = self._prepare_ta_rollup(filter_data, compare_data,\n", 
            "                expand_all, variation)\n", 
            "            if self.owner.has_respondent_limit():\n", 
            "                response_limit = self.owner.response_limit\n", 
            "                default_params['common']['response_limitation'] = response_limit\n", 
            "            ta_rollup = question.ta_preget_rollup_by_question(\n", 
            "                            default_params, expand_all, option_id, variation)\n", 
            "\n", 
            "        return ta_rollup\n", 
            "\n", 
            "    def _prepare_ta_rollup(self, filter_data=None, compare_data=None,\n", 
            "                            expand_all=None, option_id=0, variation_id=0):\n", 
            "        \"\"\"\n", 
            "        prepares rollups for all questions having text responses\n", 
            "\n", 
            "        \"\"\"\n", 
            "\n", 
            "        return {\n", 
            "            'common': {\n", 
            "                'option_id': option_id,\n", 
            "                'variation_id': variation_id,\n", 
            "                'crosstab_option_id': None,\n", 
            "                'matrix_crosstab': None,\n", 
            "                'filter': filter_data,\n", 
            "                'crosstab': compare_data\n", 
            "            },\n", 
            "            'response': {\n", 
            "                'language': self._get_owner_language(),\n", 
            "                # should get this from the client as well\n", 
            "                #'page_size': data['page_size']\n", 
            "                'page_size': 50,\n", 
            "                'offset': 0,\n", 
            "                'include_question_response_count': 1,\n", 
            "                'include_question_tags': 1,\n", 
            "                'restrict_by_tag_ids': None,\n", 
            "            },\n", 
            "            'analysis': {\n", 
            "                'hide_ids': 1\n", 
            "            }\n", 
            "        }\n", 
            "\n", 
            "    @prof(depth=5)#, include_variables=['questions', 'rollups'])\n", 
            "    def get_question_rollups(self, questions, filter_data=None,\n", 
            "                             compare_data=None, expand_all=None,\n", 
            "                             include_openended=True):\n", 
            "        \"\"\"\n", 
            "        Return a dictionary of question rollup data for the currently showing\n", 
            "        page. Filters and compare data will be applied if they exist on the\n", 
            "        current view.\n", 
            "\n", 
            "        A list of Question instances may be passed as ``questions``, then only\n", 
            "        the rollup data for these questions will be returned.\n", 
            "\n", 
            "        \"\"\"\n", 
            "        rollups = {}  # returned data\n", 
            "        input_question_list = []  # input for ansvc\n", 
            "        ta_question_list = []  # input for tasvc\n", 
            "        random_assignment_ta_list = []  # input for tasvc\n", 
            "\n", 
            "        for question in questions:\n", 
            "            if question.is_presentation() and \\\n", 
            "                not question.has_random_assignment:\n", 
            "                # skip \"presentation\" questions that don't have summary data\n", 
            "                continue\n", 
            "\n", 
            "            # We always return a dict of rollups that have all the requested\n", 
            "            # questions. If the question doesn't have rollup data, it rollup\n", 
            "            # value will be None.\n", 
            "            rollups[question.id] = None\n", 
            "            input_question_list.append(question)\n", 
            "            if (\n", 
            "                include_openended and\n", 
            "                question.has_text and not\n", 
            "                question.random_assignment_list\n", 
            "            ):\n", 
            "                ta_question_list.append(question)\n", 
            "\n", 
            "        if not input_question_list:\n", 
            "            # If the survey doesn't have any questions, return an empty rollup\n", 
            "            # dictionary\n", 
            "            return rollups\n", 
            "\n", 
            "        questions_data = []\n", 
            "\n", 
            "        for question in input_question_list:\n", 
            "            q_data = {\n", 
            "                'question_id': question.id,\n", 
            "                'question_type': {\n", 
            "                    'family': question.type,\n", 
            "                    'subtype': question.subtype\n", 
            "                },\n", 
            "            }\n", 
            "            if question.random_assignment_list:\n", 
            "                q_data['random_assignment_vars'] = [str(ra['variable_id']) for ra in question.random_assignment_list]\n", 
            "                if include_openended and question.has_text:\n", 
            "                    random_assignment_ta_list.append(question)\n", 
            "            questions_data.append(q_data)\n", 
            "\n", 
            "        is_ra_compare = False\n", 
            "        is_ra_filter = False\n", 
            "\n", 
            "        if compare_data is not None:\n", 
            "            if compare_data['type'] == 'random_assignment':\n", 
            "                is_ra_compare = True\n", 
            "        elif filter_data is not None:\n", 
            "            if filter_data['left'] == 'question.ra':\n", 
            "                is_ra_filter = True\n", 
            "\n", 
            "        if is_ra_compare:\n", 
            "            response = self.request.ansvc.get_compare_rollups(\n", 
            "                self.id,\n", 
            "                self.owner.id,\n", 
            "                questions_data,\n", 
            "                filter_data,\n", 
            "                compare_data,\n", 
            "                self.owner.response_limit\n", 
            "            )\n", 
            "        elif False:  # is_ra_filter:\n", 
            "            response = self.request.ansvc.get_questions_rollups_v2(\n", 
            "                self.id,\n", 
            "                self.owner.id,\n", 
            "                questions_data,\n", 
            "                filter_data,\n", 
            "                compare_data,\n", 
            "                self.owner.response_limit\n", 
            "            )\n", 
            "        else:\n", 
            "            response = self.request.ansvc.get_questions_rollups(\n", 
            "                self.id,\n", 
            "                self.owner.id,\n", 
            "                questions_data,\n", 
            "                filter_data,\n", 
            "                compare_data,\n", 
            "                self.owner.response_limit\n", 
            "            )\n", 
            "\n", 
            "        # unwrap rollups to the top-level of the dict\n", 
            "        response = response[self.id]\n", 
            "\n", 
            "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
            "        rollups.update(response)\n", 
            "\n", 
            "        ta_rollups = self._get_ta_question_rollups(\n", 
            "            ta_question_list,\n", 
            "            filter_data,\n", 
            "            compare_data,\n", 
            "            expand_all\n", 
            "        )\n", 
            "\n", 
            "        for question_id in ta_rollups:\n", 
            "            rollups[question_id]['summary']['ta_data'] = ta_rollups[question_id]\n", 
            "\n", 
            "        # Puts the TA data into questions that have random assignment in them\n", 
            "        for question in random_assignment_ta_list:\n", 
            "            for variable in question.random_assignment_list:\n", 
            "                variable_id = str(variable['variable_id'])\n", 
            "\n", 
            "                # This is needed because on random_assignment compares, we\n", 
            "                #   merge the question that is the source of the compare, thus we\n", 
            "                #   don't seperate it by variation_id\n", 
            "                if variable_id in rollups[question.id]:\n", 
            "                    question_variable_rollup = rollups[question.id][variable_id]\n", 
            "                else:\n", 
            "                    variable_id == '0'\n", 
            "                    question_variable_rollup = rollups[question.id]\n", 
            "\n", 
            "                if question.other_option:\n", 
            "                    option_id = str(question.other_option['id'])\n", 
            "                else:\n", 
            "                    option_id = '0'\n", 
            "\n", 
            "                ta_rollup_data = self._get_random_assignment_ta_rollup(\n", 
            "                                question, [variable_id],\n", 
            "                                filter_data, compare_data,\n", 
            "                                expand_all, option_id)\n", 
            "\n", 
            "                question_variable_rollup['summary']['ta_data'] = ta_rollup_data\n", 
            "        \n", 
            "        return rollups\n", 
            "    \n", 
            "\n", 
            "    @property\n", 
            "    def resource_path(self):\n", 
            "        # taken from smlib.webmodels\n", 
            "        if self.id is None:\n", 
            "            raise Exception(\"survey id required\")\n", 
            "\n", 
            "        resource_path_prefix = self.request.registry.settings['dotnet.resource_path_prefix']\n", 
            "        resource_host = self.request.registry.settings['dotnet.resource_host']\n", 
            "        survey_id_modded = int(self.id) % 30000\n", 
            "        return \"//%s/%s/%s/%s/\" % (resource_host, resource_path_prefix, survey_id_modded, self.id)\n", 
            "\n", 
            "\n", 
            "    def get_questions_responses_trends(\n", 
            "        self, first_respondent, last_respondent, default_trend_by, questions,\n", 
            "        filter_data=None, compare_data=None\n", 
            "    ):\n", 
            "        \"\"\"\n", 
            "        Return a dictionary of question rollup data for the currently showing\n", 
            "        page. Filters and compare data will be applied if they exist on the\n", 
            "        current view.\n", 
            "\n", 
            "        A list of Question instances may be passed as ``questions``, then only\n", 
            "        the rollup data for these questions will be returned.\n", 
            "\n", 
            "        \"\"\"\n", 
            "        rollups = {}  # returned data\n", 
            "        input_question_list = []  # input for ansvc\n", 
            "\n", 
            "        for question in questions:\n", 
            "            if not question.is_trendable():\n", 
            "                continue\n", 
            "            input_question_list.append(question)\n", 
            "\n", 
            "            # if the question has no data (no answers), we want to keep track\n", 
            "            # that the rollup for this question was at least requested\n", 
            "            rollups[question.id] = None\n", 
            "\n", 
            "        if not input_question_list:\n", 
            "            # If the survey doesn't have any questions, return an empty rollup\n", 
            "            # dictionary\n", 
            "            return rollups\n", 
            "\n", 
            "        questions_data = []\n", 
            "        for question in input_question_list:\n", 
            "            q_data = {\n", 
            "                'question_id': question.id,\n", 
            "                'question_type': {\n", 
            "                    'family': question.type,\n", 
            "                    'subtype': question.subtype\n", 
            "                },\n", 
            "                'trend_data': {\n", 
            "                    'trend_by': question.trend_by or default_trend_by,\n", 
            "                    'first_respondent': first_respondent.id,\n", 
            "                    'last_respondent': last_respondent.id,\n", 
            "                    'utc_offset': self.owner.utc_offset\n", 
            "                }\n", 
            "            }\n", 
            "\n", 
            "            questions_data.append(q_data)\n", 
            "\n", 
            "        response = self.request.ansvc.get_questions_responses_trends(\n", 
            "            self.id,\n", 
            "            self.owner.id,\n", 
            "            questions_data,\n", 
            "            filter_data,\n", 
            "            compare_data\n", 
            "        )\n", 
            "        response = response[self.id]  # unwrap rollups to the top-level of the dict\n", 
            "\n", 
            "        # Update our ``rollups`` dict with the rollup data returned by ansvc\n", 
            "        rollups.update(response)\n", 
            "\n", 
            "        return rollups\n", 
            "\n", 
            "    def to_dict(self, include_collectors=False, include_theme=False):\n", 
            "        \"\"\"\n", 
            "        Return the whole survey structure.\n", 
            "\n", 
            "        \"\"\"\n", 
            "        survey_data = {\n", 
            "            'id': self.id,\n", 
            "            'date_created': self.date_created,\n", 
            "            'date_modified': self.date_modified,\n", 
            "            'date_deleted': self.date_deleted,\n", 
            "            'title': self.title,\n", 
            "            'nickname': self.nickname,\n", 
            "            'version': self.version,\n", 
            "            'num_responses': self.num_responses,\n", 
            "            'language': self.language,\n", 
            "            'user_id': self.owner.id,\n", 
            "            'answers': self._answer_map,\n", 
            "            'has_panel_page': self.has_panel_page,\n", 
            "            'question_count': self.question_count,\n", 
            "            'design_settings': self.design_settings,\n", 
            "            'theme_settings': self.theme if include_theme else None,\n", 
            "            'quotas': self.quotas,\n", 
            "            'page_logic': self.page_logic,\n", 
            "            'question_logic': self.question_logic,\n", 
            "            'has_logic': True if (\n", 
            "                self.page_logic or self.question_logic\n", 
            "            ) else False,\n", 
            "            'has_randomization': True if (\n", 
            "                self.has_page_randomization or\n", 
            "                self.has_question_randomization\n", 
            "            ) else False,\n", 
            "            'mangled_id': self.mangled_id,\n", 
            "            'preview_link': self.preview_link,\n", 
            "            'resource_path': self.resource_path\n", 
            "        }\n", 
            "\n", 
            "        if self._populated_pages:\n", 
            "            survey_data.update({\n", 
            "                'page_ids': [page.id for page in self.pages],\n", 
            "                'questions': dict((q.id, q.to_dict()) for q in self.questions),\n", 
            "                'pages': dict((p.id, p.to_dict()) for p in self.pages)\n", 
            "            })\n", 
            "        if self._populated_collectors or include_collectors:\n", 
            "            survey_data.update({\n", 
            "                'collectors': [c.to_dict() for c in self.collectors],\n", 
            "                'has_collector': self.has_collector,\n", 
            "                'has_email_collector': self.has_email_collector,\n", 
            "                'has_open_collector': self.has_open_collector,\n", 
            "                'has_all_closed_collectors': self.has_all_closed_collectors,\n", 
            "                'has_unconfigured_collector': self.has_unconfigured_collector\n", 
            "            })\n", 
            "\n", 
            "        return survey_data\n", 
            "\n", 
            "\n", 
            "class Page(object):\n", 
            "    \"\"\"A page. Also referred as a survey page.\"\"\"\n", 
            "\n", 
            "    heading = None\n", 
            "    sub_heading = None\n", 
            "    id = None\n", 
            "    position = None\n", 
            "    question_ids = None\n", 
            "    survey_id = None\n", 
            "\n", 
            "    survey = None  # backref\n", 
            "\n", 
            "    def __init__(self, request):\n", 
            "        self.request = request\n", 
            "        self._question_list = []\n", 
            "        self._question_map = {}\n", 
            "\n", 
            "    @property\n", 
            "    def edit_link(self):\n", 
            "        #/MySurvey_EditorPage.aspx?sm=ALFEvPW9xjVqGpg5j9RNK4p1LERFeyh15O4IyBL9YkgpxQj1bS0JB%2f1t8uOA6gji\n", 
            "        if self.survey_id is None:\n", 
            "            raise RuntimeError(\n", 
            "                \"Unable to mangle the ID of an unsaved survey.\"\n", 
            "            )\n", 
            "\n", 
            "        mangled = encrypt_mangled(\n", 
            "            \"SurveyID=%s&SectionID=%s&\" % (self.survey_id, self.id)\n", 
            "        )\n", 
            "\n", 
            "        return \"/MySurvey_EditorPage.aspx?sm=%s\" % mangled\n", 
            "\n", 
            "    @property\n", 
            "    def index(self):\n", 
            "        return self.position - 1\n", 
            "\n", 
            "    @property\n", 
            "    def questions(self):\n", 
            "        return self._question_list[:]  # return copy!\n", 
            "\n", 
            "    @property\n", 
            "    def has_random_assignment(self):\n", 
            "        for q in self.questions:\n", 
            "            if q.has_random_assignment:\n", 
            "                return True\n", 
            "        return False\n", 
            "\n", 
            "    def has_question(self, question):\n", 
            "        return self._question_map.get(question.id)\n", 
            "\n", 
            "    def add_question(self, question):\n", 
            "        self._question_list.append(question)\n", 
            "        self._question_map[question.id] = question\n", 
            "        question.page = self  # backref\n", 
            "\n", 
            "    def load(self, page_data):\n", 
            "        questions = page_data['questions']\n", 
            "        self.question_ids = []\n", 
            "        self.heading = page_data['heading']\n", 
            "        self.id = str(page_data['page_id'])\n", 
            "        self.position = page_data['position']\n", 
            "        self.question_ids = []\n", 
            "        self.has_question_randomization = page_data['question_randomization']['enabled']\n", 
            "        for q in questions:\n", 
            "            question = Question(self.request)\n", 
            "            question.load(q)\n", 
            "            self.add_question(question)\n", 
            "            self.question_ids.append(question.id)\n", 
            "        self.sub_heading = page_data['sub_heading']\n", 
            "        self.survey_id = page_data['survey_id']\n", 
            "\n", 
            "    def to_dict(self):\n", 
            "        question_ids = [question.id for question in self.questions]\n", 
            "\n", 
            "        return {\n", 
            "            'heading': self.heading,\n", 
            "            'sub_heading': self.sub_heading,\n", 
            "            'id': self.id,\n", 
            "            'position': self.position,\n", 
            "            'question_ids': question_ids,\n", 
            "            'survey_id': self.survey_id,\n", 
            "            'edit_link': self.edit_link\n", 
            "        }\n"
        ], 
        "name": "surveys.py", 
        "obj_type": "file", 
        "parent_file_path": "/opt/webapp/anweb/src/anweb/anweb/models/surveys.py", 
        "returns": [], 
        "variables": [
            "{'obj_type': 'assign', 'ast_node': <_ast.Assign object at 0x2565bd0>, 'target': 'log', 'line_index_start': 20, 'line_index_end': 22, 'parent_obj': <parsefilelib.models.file_obj.FileObj object at 0x2291d10>, 'targets': []}"
        ]
    }
]
